
package org.jboss.examples.ticketmonster.rest;

import java.util.ArrayList;
import java.util.List;

-import javax.ejb.Stateless;
+import javax.enterprise.context.ApplicationScoped;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.OptimisticLockException;
-import javax.persistence.PersistenceContext;
import javax.persistence.TypedQuery;
import javax.ws.rs.Consumes;
import javax.ws.rs.DELETE;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.PUT;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.QueryParam;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;
import javax.ws.rs.core.UriBuilder;
import org.jboss.examples.ticketmonster.rest.dto.BookingDTO;
import org.jboss.examples.ticketmonster.model.Booking;

/**
 * 
 */
-@Stateless
+@ApplicationScoped
@Path("forge/bookings")
public class BookingEndpoint
{
-   @PersistenceContext(unitName = "primary")
-   private EntityManager em;
+   private final EntityManager em;

+   // Constructor for injecting the EntityManager
+   @Inject
+   public BookingEndpoint(EntityManager em) {
+       this.em = em;
+   }

   @POST
   @Consumes("application/json")
   public Response create(BookingDTO dto)
   {
      // ... method implementation remains unchanged ...
   }

   // ... other methods remain unchanged ...
}
