{"version":3,"file":"static/js/608.7e524485.chunk.js","mappings":"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","sources":["shared/components/conditional-render/conditional-render.tsx","shared/components/simple-select/simple-select.tsx","shared/components/dependencies-table/dependencies-table.tsx","shared/components/simple-markdown/simple-markdown.tsx","shared/components/file-editor/file-editor.tsx","shared/components/table-controls/conditional-table-body.tsx","shared/components/table-controls/simple-pagination.tsx","shared/components/violations-table/components/issue-overview.tsx","shared/components/violations-table/violations-table.tsx","shared/hooks/useModal/useModal.ts","shared/hooks/useTable/useTable.ts","shared/hooks/useTableControls/useTableControls.ts","shared/hooks/useToolbar/useToolbar.ts","shared/hooks/useCellSelectionState/useCellSelectionState.ts","utils/utils.ts"],"sourcesContent":["import React from 'react';\n\nexport interface ConditionalRenderProps {\n  when: boolean;\n  then: any;\n  children: any;\n}\n\nexport const ConditionalRender: React.FC<ConditionalRenderProps> = ({ when, then, children }) => {\n  return when ? then : children || <></>;\n};\n","import React, { useState } from 'react';\n\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectOptionProps,\n  SelectProps,\n} from '@patternfly/react-core/deprecated';\n\nexport interface OptionWithValue<T = string> extends SelectOptionObject {\n  value: T;\n  props?: Partial<SelectOptionProps>; // Extra props for <SelectOption>, e.g. children, className\n}\n\ntype OptionLike = string | SelectOptionObject | OptionWithValue;\n\nexport interface ISimpleSelectProps\n  extends Omit<\n    SelectProps,\n    \"onChange\" | \"isOpen\" | \"onToggle\" | \"onSelect\" | \"selections\" | \"value\"\n  > {\n  \"aria-label\": string;\n  onChange: (selection: OptionLike) => void;\n  options: OptionLike[];\n  value?: OptionLike | OptionLike[];\n}\n\nexport const SimpleSelect: React.FC<ISimpleSelectProps> = ({\n  onChange,\n  options,\n  value,\n  placeholderText = \"Select...\",\n\n  ...props\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <Select\n      placeholderText={placeholderText}\n      isOpen={isOpen}\n      onToggle={(_, isExpanded) => setIsOpen(isExpanded)}\n      onSelect={(_, selection: OptionLike) => {\n        onChange(selection);\n        if (props.variant !== \"checkbox\") {\n          setIsOpen(false);\n        }\n      }}\n      selections={value}\n      {...props}\n    >\n      {options.map((option, index) => (\n        <SelectOption\n          key={`${index}-${option.toString()}`}\n          value={option}\n          {...(typeof option === \"object\" && (option as OptionWithValue).props)}\n        />\n      ))}\n    </Select>\n  );\n};\n","import React, { useMemo, useState, useEffect, useCallback } from \"react\";\n\nimport {\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Label,\n  Split,\n  SplitItem,\n  SearchInput,\n  Title,\n  ToolbarItem,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarFilter,\n  ToolbarGroup,\n  Toolbar,\n  ToolbarContent,\n  ToolbarToggleGroup,\n  ToolbarItemVariant,\n} from \"@patternfly/react-core\";\nimport ArrowUpIcon from \"@patternfly/react-icons/dist/esm/icons/arrow-up-icon\";\nimport FilterIcon from \"@patternfly/react-icons/dist/esm/icons/filter-icon\";\nimport { Table, Tbody, Td, Th, Thead, Tr } from \"@patternfly/react-table\";\nimport { useDebounce } from \"usehooks-ts\";\n\nimport { DependencyDto } from \"@app/api/report\";\nimport { ALL_APPLICATIONS_ID } from \"@app/Constants\";\nimport { useAllApplications } from \"@app/queries/report\";\nimport {\n  SimpleSelect,\n  OptionWithValue,\n  SimplePagination,\n  ConditionalTableBody,\n} from \"@app/shared/components\";\nimport { useTable, useTableControls, useToolbar } from \"@app/shared/hooks\";\n\nconst compareToByColumn = (\n  a: DependencyDto,\n  b: DependencyDto,\n  columnIndex?: number\n) => {\n  switch (columnIndex) {\n    case 1: // name\n      return a.name.localeCompare(b.name);\n    case 3: // version\n      return a.version === b.version ? 0 : 1;\n    case 4: // indirect\n      return a.indirect === b.indirect ? 0 : 1;\n    default:\n      return 0;\n  }\n};\n\nconst toOption = (option: string | ToolbarChip): OptionWithValue => {\n  if (typeof option === \"string\") {\n    const toStringFn = () => option;\n    return {\n      value: option,\n      toString: toStringFn,\n      compareTo: (other: string | OptionWithValue) => {\n        return typeof other === \"string\"\n          ? toStringFn().toLowerCase().includes(other.toLocaleLowerCase())\n          : option === other.value;\n      },\n    };\n  } else {\n    const toStringFn = () => option.node as string;\n    return {\n      value: option.key,\n      toString: toStringFn,\n      compareTo: (other: string | OptionWithValue) => {\n        return typeof other === \"string\"\n          ? toStringFn().toLowerCase().includes(other.toLowerCase())\n          : option.key === other.value;\n      },\n    };\n  }\n};\n\nconst toToolbarChip = (option: OptionWithValue): ToolbarChip => {\n  return {\n    key: option.value,\n    node: option.toString(),\n  };\n};\n\nexport interface IDependenciesTableProps {\n  applicationId?: string;\n}\n\nexport const DependenciesTable: React.FC<IDependenciesTableProps> = ({\n  applicationId,\n}) => {\n  const allApplicationsQuery = useAllApplications();\n\n  // Filters\n  const [filterText, setFilterText] = useState(\"\");\n  const { filters, setFilter, removeFilter, clearAllFilters } = useToolbar<\n    \"labels\" | \"relationship\",\n    ToolbarChip\n  >();\n\n  const debouncedFilterText = useDebounce<string>(filterText, 250);\n  const debouncedFilters = useDebounce<\n    Map<\"labels\" | \"relationship\", ToolbarChip[]>\n  >(filters, 100);\n\n  const dependencies = useMemo(() => {\n    if (!allApplicationsQuery.data || applicationId === undefined) {\n      return [];\n    }\n    return applicationId === ALL_APPLICATIONS_ID\n      ? allApplicationsQuery.data?.flatMap((a) => a.dependencies || [])\n      : allApplicationsQuery.data?.find((f) => f.id === applicationId)\n          ?.dependencies || [];\n  }, [allApplicationsQuery.data, applicationId]);\n\n  const allLabels: string[] = useMemo(() => {\n    return Array.from(new Set(dependencies?.flatMap((d) => d.labels)));\n  }, [dependencies]);\n\n  // Rows\n\n  const {\n    page: currentPage,\n    sortBy: currentSortBy,\n    changePage: onPageChange,\n    changeSortBy: onChangeSortBy,\n  } = useTableControls();\n\n  const filterItem = useCallback(\n    (item: DependencyDto) => {\n      let isFilterTextFilterCompliant = true;\n      if (debouncedFilterText && debouncedFilterText.trim().length > 0) {\n        isFilterTextFilterCompliant =\n          item.name.toLowerCase().indexOf(debouncedFilterText.toLowerCase()) !==\n          -1;\n      }\n\n      let isLabelFilterCompliant = true;\n      const selectedLabels = debouncedFilters.get(\"labels\") || [];\n      if (selectedLabels.length > 0) {\n        isLabelFilterCompliant = selectedLabels.some((f) =>\n          item.labels?.includes(f.key)\n        );\n      }\n\n      let isRelationshipFilterCompliant = true;\n      const selectedRelation = debouncedFilters.get(\"relationship\") || [];\n      if (selectedRelation.length > 0) {\n        isLabelFilterCompliant = selectedRelation.some(\n          (f) =>\n            (f.key === \"Direct\" && !item.indirect) ||\n            (f.key === \"Indirect\" && item.indirect)\n        );\n      }\n\n      return (\n        isFilterTextFilterCompliant &&\n        isLabelFilterCompliant &&\n        isRelationshipFilterCompliant\n      );\n    },\n    [debouncedFilterText, debouncedFilters]\n  );\n\n  const { pageItems, filteredItems } = useTable<DependencyDto>({\n    items: dependencies,\n    currentPage,\n    currentSortBy,\n    compareToByColumn,\n    filterItem,\n  });\n\n  // Reset pagination when application change\n  useEffect(() => {\n    onPageChange({ page: 1, perPage: currentPage.perPage });\n  }, [applicationId, onPageChange, currentPage.perPage]);\n\n  return (\n    <>\n      {applicationId === undefined ? (\n        <Bullseye>\n          <EmptyState>\n            <EmptyStateIcon icon={ArrowUpIcon} />\n            <Title headingLevel=\"h4\" size=\"lg\">\n              Select an application\n            </Title>\n            <EmptyStateBody>\n              Select an application whose data you want to get access to.\n            </EmptyStateBody>\n          </EmptyState>\n        </Bullseye>\n      ) : (\n        <>\n          <Toolbar\n            className=\"pf-m-toggle-group-container\"\n            collapseListedFiltersBreakpoint=\"xl\"\n            clearAllFilters={clearAllFilters}\n          >\n            <ToolbarContent>\n              <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n                <ToolbarItem variant=\"search-filter\">\n                  <SearchInput\n                    value={filterText}\n                    onChange={(_, value) => setFilterText(value)}\n                    onClear={() => setFilterText(\"\")}\n                  />\n                </ToolbarItem>\n                <ToolbarGroup variant=\"filter-group\">\n                  <ToolbarFilter\n                    chips={filters.get(\"labels\")}\n                    deleteChip={(\n                      category: string | ToolbarChipGroup,\n                      chip: ToolbarChip | string\n                    ) => removeFilter(\"labels\", chip)}\n                    deleteChipGroup={() => setFilter(\"labels\", [])}\n                    categoryName={{ key: \"labels\", name: \"Labels\" }}\n                  >\n                    <SimpleSelect\n                      maxHeight={300}\n                      variant=\"checkbox\"\n                      aria-label=\"labels\"\n                      aria-labelledby=\"labels\"\n                      placeholderText=\"Labels\"\n                      value={filters.get(\"labels\")?.map(toOption)}\n                      options={allLabels.map(toOption)}\n                      onChange={(option) => {\n                        const optionValue = option as OptionWithValue<string>;\n\n                        const elementExists = (\n                          filters.get(\"labels\") || []\n                        ).some((f) => f.key === optionValue.value);\n                        let newElements: ToolbarChip[];\n                        if (elementExists) {\n                          newElements = (filters.get(\"labels\") || []).filter(\n                            (f) => f.key !== optionValue.value\n                          );\n                        } else {\n                          newElements = [\n                            ...(filters.get(\"labels\") || []),\n                            toToolbarChip(optionValue),\n                          ];\n                        }\n\n                        setFilter(\"labels\", newElements);\n                      }}\n                      hasInlineFilter\n                      onClear={() => setFilter(\"labels\", [])}\n                    />\n                  </ToolbarFilter>\n                </ToolbarGroup>\n                <ToolbarGroup variant=\"filter-group\">\n                  <ToolbarFilter\n                    chips={filters.get(\"relationship\")}\n                    deleteChip={(\n                      category: string | ToolbarChipGroup,\n                      chip: ToolbarChip | string\n                    ) => removeFilter(\"relationship\", chip)}\n                    deleteChipGroup={() => setFilter(\"relationship\", [])}\n                    categoryName={{ key: \"relationship\", name: \"Relation\" }}\n                  >\n                    <SimpleSelect\n                      maxHeight={300}\n                      variant=\"checkbox\"\n                      aria-label=\"relationship\"\n                      aria-labelledby=\"relationship\"\n                      placeholderText=\"Relation\"\n                      value={filters.get(\"relationship\")?.map(toOption)}\n                      options={[\"Direct\", \"Indirect\"].map(toOption)}\n                      onChange={(option) => {\n                        const optionValue = option as OptionWithValue<string>;\n\n                        const elementExists = (\n                          filters.get(\"relationship\") || []\n                        ).some((f) => f.key === optionValue.value);\n                        let newElements: ToolbarChip[];\n                        if (elementExists) {\n                          newElements = (\n                            filters.get(\"relationship\") || []\n                          ).filter((f) => f.key !== optionValue.value);\n                        } else {\n                          newElements = [\n                            ...(filters.get(\"relationship\") || []),\n                            toToolbarChip(optionValue),\n                          ];\n                        }\n\n                        setFilter(\"relationship\", newElements);\n                      }}\n                      hasInlineFilter\n                      onClear={() => setFilter(\"relationship\", [])}\n                    />\n                  </ToolbarFilter>\n                </ToolbarGroup>\n              </ToolbarToggleGroup>\n              <ToolbarItem\n                variant={ToolbarItemVariant.pagination}\n                align={{ default: \"alignRight\" }}\n              >\n                <SimplePagination\n                  count={filteredItems.length}\n                  params={currentPage}\n                  onChange={onPageChange}\n                  isTop={true}\n                />\n              </ToolbarItem>\n            </ToolbarContent>\n          </Toolbar>\n\n          <Table>\n            <Thead>\n              <Tr>\n                <Th\n                  width={50}\n                  sort={{\n                    columnIndex: 1,\n                    sortBy: { ...currentSortBy },\n                    onSort: onChangeSortBy,\n                  }}\n                  modifier=\"truncate\"\n                >\n                  Name\n                </Th>\n                <Th width={30}>Labels</Th>\n                <Th width={10} modifier=\"truncate\">\n                  Version\n                </Th>\n                <Th\n                  width={10}\n                  sort={{\n                    columnIndex: 4,\n                    sortBy: { ...currentSortBy },\n                    onSort: onChangeSortBy,\n                  }}\n                  modifier=\"truncate\"\n                >\n                  Relation\n                </Th>\n              </Tr>\n            </Thead>\n            <ConditionalTableBody\n              isNoData={filteredItems.length === 0}\n              numRenderedColumns={10}\n            >\n              {pageItems?.map((item, rowIndex) => {\n                return (\n                  <Tbody key={rowIndex}>\n                    <Tr>\n                      <Td>{item.name}</Td>\n                      <Td>\n                        <Split hasGutter>\n                          {item.labels?.map((label, index) => (\n                            <SplitItem key={index}>\n                              <Label isCompact color=\"blue\">\n                                {label.replace(\"konveyor.io/source=\", \"\")}\n                              </Label>\n                            </SplitItem>\n                          ))}\n                        </Split>\n                      </Td>\n                      <Td>{item.version}</Td>\n                      <Td>{item.indirect ? \"Indirect\" : \"Direct\"}</Td>\n                    </Tr>\n                  </Tbody>\n                );\n              })}\n            </ConditionalTableBody>\n          </Table>\n\n          <SimplePagination\n            count={filteredItems.length}\n            params={currentPage}\n            onChange={onPageChange}\n          />\n        </>\n      )}\n    </>\n  );\n};\n","import React from \"react\";import ReactMarkdown from \"react-markdown\";\n\nimport { ReactMarkdownOptions } from \"react-markdown/lib/react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport \"github-markdown-css/github-markdown-light.css\";\n\ninterface ISimpleMarkdownProps extends ReactMarkdownOptions {}\n\nexport const SimpleMarkdown: React.FC<ISimpleMarkdownProps> = ({ ...rest }) => {\n  return (\n    <ReactMarkdown\n      className=\"markdown-body\"\n      remarkPlugins={[remarkGfm]}\n      linkTarget=\"_blank\"\n      {...rest}\n    />\n  );\n};\n","import React, { useEffect, useRef, useState } from \"react\";\n\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  Drawer,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelContent,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\n\nimport {\n  CodeEditor,\n  CodeEditorProps,\n  Language,\n} from \"@patternfly/react-code-editor\";\n\nimport * as monacoEditor from \"monaco-editor/esm/vs/editor/editor.api\";\n\nimport { LinkDto } from \"@app/api/report\";\nimport { ConditionalRender, SimpleMarkdown } from \"@app/shared/components\";\nimport { getMarkdown } from \"@app/utils/utils\";\nimport { IssueProcessed } from \"@app/models/api-enriched\";\nimport { IncidentCoordinates } from \"@app/models/file\";\n\nconst codeLineRegex = /^\\s*([0-9]+)( {2})?(.*)$/;\n\ninterface IFileEditorProps {\n  name: string;\n  displayName: string;\n  codeSnip: string;\n  isLoading: boolean;\n  incidents: IncidentCoordinates[];\n  issue: IssueProcessed;\n  props?: Partial<\n    Omit<CodeEditorProps, \"ref\" | \"code\" | \"options\" | \"onEditorDidMount\">\n  >;\n}\n\nexport const FileEditor: React.FC<IFileEditorProps> = ({\n  name, \n  displayName,\n  codeSnip,\n  isLoading,\n  incidents,\n  issue,\n  props,\n}) => {\n  let absoluteToRelativeLineNum = (lineNum: number) => lineNum;\n  let relativeToAbsoluteLineNum = (lineNum: number) => lineNum;\n  const codeSnipNumberedLines = codeSnip.split(\"\\n\");\n  const codeSnipTrimmedLines: string[] = [];\n  let codeSnipStartLine = 1;\n  codeSnipNumberedLines.forEach((numberedLine, index) => {\n    const match = numberedLine.match(codeLineRegex);\n    if (match && !isNaN(Number(match[1]))) {\n      const lineNum = Number(match[1]);\n      if (index === 0) codeSnipStartLine = lineNum;\n      const lineCode = match[3] || \"\";\n      codeSnipTrimmedLines.push(lineCode);\n    }\n  });\n  codeSnip = codeSnipTrimmedLines.join(\"\\n\");\n  absoluteToRelativeLineNum = (lineNum: number) => lineNum - (codeSnipStartLine - 1);\n  relativeToAbsoluteLineNum = (lineNum: number) => lineNum + (codeSnipStartLine - 1);\n\n  // Editor\n  const editorRef = useRef<monacoEditor.editor.IStandaloneCodeEditor>();\n  const monacoRef = useRef<typeof monacoEditor>();\n  useEffect(() => {\n    return () => {\n      monacoRef.current?.editor.getModels().forEach((model) => model.dispose());\n      editorRef.current?.dispose();\n    };\n  }, [editorRef, monacoRef]);\n\n  // Disposables\n  const [disposables, setDisposables] = useState<monacoEditor.IDisposable[]>(\n    []\n  );\n  useEffect(() => {\n    return () => {\n      disposables.forEach((disposable) => disposable && disposable.dispose());\n    };\n  }, [disposables]);\n\n  // const drawerRef = React.useRef<any>();\n  // const [isDrawerExpanded, setIsDrawerExpanded] = useState(\n  //   incidents ? true : false\n  // );\n  // const onDrawerExpand = () => {\n  //   drawerRef.current && drawerRef.current.focus();\n  // };\n\n  const fileExtension = name?.split('.')?.pop();\n\n  /**\n   * Adds a hover text to the hint line\n   */\n  const addHover = (\n    monaco: typeof monacoEditor,\n    incidents: IncidentCoordinates[],\n    links: LinkDto[]\n  ) => {\n    return incidents.map((inc) => {\n      return monaco.languages.registerHoverProvider(\"*\", {\n        provideHover: (model, position) => {\n          if (position.lineNumber !== inc.lineNumber) {\n            return undefined;\n          }\n\n          return {\n            range: new monaco.Range(inc.lineNumber!, 1, inc.lineNumber!, 1),\n            contents: [\n              {\n                value: getMarkdown(inc.message, links),\n              },\n            ],\n          };\n        },\n      });\n    });\n  };\n\n  /**\n   * Underlines the hint line\n   */\n  const addMarkers = (\n    monaco: typeof monacoEditor,\n    incidents: IncidentCoordinates[]\n  ) => {\n    const markers = incidents\n      .filter((inc) => inc.lineNumber && inc.lineNumber !== 0)\n      ?.map((inc) => {\n        const marker: monacoEditor.editor.IMarkerData = {\n          startLineNumber: absoluteToRelativeLineNum(inc.lineNumber),\n          endLineNumber: absoluteToRelativeLineNum(inc.lineNumber), \n          startColumn: 0,\n          endColumn: 1000,\n          message: issue.description,\n          severity: monaco.MarkerSeverity.Warning,\n        }\n        return marker\n      })\n\n    const model = monaco.editor.getModels()[0];\n    monaco.editor.setModelMarkers(model, \"*\", markers);\n  };\n\n  const onEditorDidMount = (\n    editor: monacoEditor.editor.IStandaloneCodeEditor,\n    monaco: typeof monacoEditor\n  ) => {\n    editor.layout();\n    editor.focus();\n    monaco.editor.getModels()[0].updateOptions({ tabSize: 5 });\n\n    let newDisposables: monacoEditor.IDisposable[] = [];\n\n    // Add markers\n    addMarkers(monaco, incidents);\n\n    // Add hovers\n    const hovers = addHover(monaco, incidents, issue.links);\n    newDisposables = newDisposables.concat(hovers);\n\n    setDisposables(newDisposables);\n\n    editorRef.current = editor;\n    monacoRef.current = monaco;\n  };\n\n  return (\n    <Drawer isExpanded={true} isInline>\n      <DrawerContent\n        panelContent={\n          <DrawerPanelContent\n            isResizable\n          >\n            <DrawerHead>\n              <Card isLarge>\n                <CardHeader>\n                  <CardTitle>\n                    <TextContent>\n                      <Text component=\"h1\">{issue.name}</Text>\n                    </TextContent>\n                    <TextContent>\n                      <Text component=\"small\">{issue.ruleID}</Text>\n                    </TextContent>\n                  </CardTitle>\n                </CardHeader>\n                <CardBody>\n                  {issue.description && (\n                    <SimpleMarkdown\n                      children={getMarkdown(\n                        issue.description,\n                        issue.links,\n                      )}\n                    />\n                  )}\n                </CardBody>\n              </Card>\n            </DrawerHead>\n          </DrawerPanelContent>\n        }\n      >\n        <DrawerContentBody>\n          <ConditionalRender\n            when={isLoading}\n            then={<span>Loading...</span>}\n          >\n            <CodeEditor\n              isDarkTheme\n              isLineNumbersVisible\n              isReadOnly={true}\n              isMinimapVisible\n              isLanguageLabelVisible\n              isDownloadEnabled={false}\n              title={displayName}\n              code={codeSnip ? codeSnip : \"\"}\n              language={Object.values(Language).find(\n                (l) => l === fileExtension?.toLowerCase()\n              )}\n              options={{\n                glyphMargin: true,\n                \"semanticHighlighting.enabled\": true,\n                renderValidationDecorations: \"on\",\n                lineNumbers: (lineNum: number) => \n                  String(relativeToAbsoluteLineNum(lineNum))\n              }}\n              onEditorDidMount={(\n                editor: monacoEditor.editor.IStandaloneCodeEditor,\n                monaco: typeof monacoEditor\n              ) => {\n                onEditorDidMount(editor, monaco);\n              }}\n              height={`${window.innerHeight - 300}px`}\n              {...props}\n            />\n          </ConditionalRender>\n        </DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n","import React from 'react';\nimport {\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Spinner,\n  Title,\n} from '@patternfly/react-core';\nimport CubesIcon from '@patternfly/react-icons/dist/esm/icons/cubes-icon';\nimport ExclamationCircleIcon from '@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon';\nimport { Tbody, Td, Tr } from '@patternfly/react-table';\nimport { global_danger_color_200 as globalDangerColor200 } from '@patternfly/react-tokens';\n\nexport interface IConditionalTableBodyProps {\n  numRenderedColumns: number;\n  isLoading?: boolean;\n  isError?: boolean;\n  isNoData?: boolean;\n  errorEmptyState?: React.ReactNode;\n  noDataEmptyState?: React.ReactNode;\n  children: React.ReactNode;\n}\n\nexport const ConditionalTableBody: React.FC<IConditionalTableBodyProps> = ({\n  numRenderedColumns,\n  isLoading = false,\n  isError = false,\n  isNoData = false,\n  errorEmptyState = null,\n  noDataEmptyState = null,\n  children,\n}) => {\n  const error = (\n    <EmptyState variant={EmptyStateVariant.sm}>\n      <EmptyStateIcon icon={ExclamationCircleIcon} color={globalDangerColor200.value} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        Unable to connect\n      </Title>\n      <EmptyStateBody>\n        There was an error retrieving data. Check your connection and try again.\n      </EmptyStateBody>\n    </EmptyState>\n  );\n\n  const noData = (\n    <EmptyState variant={EmptyStateVariant.sm}>\n      <EmptyStateIcon icon={CubesIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        No data available\n      </Title>\n      <EmptyStateBody>No data available to be shown here.</EmptyStateBody>\n    </EmptyState>\n  );\n\n  return (\n    <>\n      {isLoading ? (\n        <Tbody>\n          <Tr>\n            <Td colSpan={numRenderedColumns}>\n              <Bullseye>\n                <Spinner size=\"xl\" />\n              </Bullseye>\n            </Td>\n          </Tr>\n        </Tbody>\n      ) : isError ? (\n        <Tbody aria-label=\"Table error\">\n          <Tr>\n            <Td colSpan={numRenderedColumns}>\n              <Bullseye>{errorEmptyState || error}</Bullseye>\n            </Td>\n          </Tr>\n        </Tbody>\n      ) : isNoData ? (\n        <Tbody aria-label=\"Table no data\">\n          <Tr>\n            <Td colSpan={numRenderedColumns}>\n              <Bullseye>{noDataEmptyState || noData}</Bullseye>\n            </Td>\n          </Tr>\n        </Tbody>\n      ) : (\n        children\n      )}\n    </>\n  );\n};\n","import React from 'react';\n\nimport { Pagination, PaginationVariant, ToggleTemplate } from '@patternfly/react-core';\n\nexport interface ISimplePaginationProps {\n  count: number;\n  params: {\n    perPage?: number;\n    page?: number;\n  };\n\n  isTop?: boolean;\n  isCompact?: boolean;\n  perPageOptions?: number[];\n  onChange: ({ page, perPage }: { page: number; perPage: number }) => void;\n}\n\nexport const SimplePagination: React.FC<ISimplePaginationProps> = ({\n  count,\n  params,\n  isTop,\n  isCompact,\n  perPageOptions,\n  onChange,\n}) => {\n  const mapPerPageOptions = (options: number[]) => {\n    return options.map((option) => ({\n      title: String(option),\n      value: option,\n    }));\n  };\n\n  const getPerPage = () => {\n    return params.perPage || 10;\n  };\n\n  return (\n    <Pagination\n      itemCount={count}\n      page={params.page || 1}\n      perPage={getPerPage()}\n      onPageInput={(_, page) => {\n        onChange({ page, perPage: getPerPage() });\n      }}\n      onSetPage={(_, page) => {\n        onChange({ page, perPage: getPerPage() });\n      }}\n      onPerPageSelect={(_, perPage) => {\n        onChange({ page: 1, perPage });\n      }}\n      isCompact={isTop || isCompact}\n      widgetId=\"pagination-options-menu\"\n      variant={isTop ? PaginationVariant.top : PaginationVariant.bottom}\n      perPageOptions={mapPerPageOptions(perPageOptions || [10, 20, 50, 100])}\n      toggleTemplate={(props) => <ToggleTemplate {...props} />}\n    />\n  );\n};\n","import React, { useState, useCallback, useMemo } from \"react\";\nimport { useDebounce } from \"usehooks-ts\";\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n  Truncate,\n  ToolbarItem,\n  SearchInput,\n  CardHeader,\n  CardTitle,\n  Text,\n  TextContent,\n  Toolbar,\n  ToolbarContent,\n  ToolbarToggleGroup,\n  ToolbarItemVariant,\n} from \"@patternfly/react-core\";\n\nimport { Table, Tbody, Td, Th, Thead, Tr } from \"@patternfly/react-table\";\n\nimport FilterIcon from \"@patternfly/react-icons/dist/esm/icons/filter-icon\";\n\nimport { useTable, useTableControls } from \"@app/shared/hooks\";\n\nimport { IssueProcessed } from \"@app/models/api-enriched\";\nimport {\n  ConditionalTableBody,\n  SimpleMarkdown,\n  SimplePagination,\n} from \"@app/shared/components\";\nimport { getMarkdown } from \"@app/utils/utils\";\nimport { DispersedFile } from \"@app/models/file\";\nimport { useDispersedFiles } from \"@app/queries/report\";\n\ninterface IIssueOverviewProps {\n  issue: IssueProcessed;\n  onShowFile: (file: DispersedFile, issue: IssueProcessed) => void;\n}\n\ninterface TableData extends DispersedFile {}\n\nexport const compareByColumnIndex = (\n  a: TableData,\n  b: TableData,\n  columnIndex?: number\n) => {\n  switch (columnIndex) {\n    case 0: // name\n      return a.name.localeCompare(b.name);\n    case 1: // count\n      return a.totalIncidents - b.totalIncidents;\n    default:\n      return 0;\n  }\n};\n\nexport const IssueOverview: React.FC<IIssueOverviewProps> = ({\n  issue,\n  onShowFile,\n}) => {\n  const [filterText, setFilterText] = useState(\"\");\n  const debouncedFilterText = useDebounce<string>(filterText, 250);\n  const dispersedFilesQuery = useDispersedFiles(issue);\n\n  const items: TableData[] = useMemo(() => \n    dispersedFilesQuery.data?.filter((f) => f.totalIncidents !== 0) || [], \n  [dispersedFilesQuery.data])\n\n  const filterItem = useCallback(\n    (item: TableData) => {\n      let isFilterTextFilterCompliant = true;\n      if (debouncedFilterText && debouncedFilterText.trim().length > 0) {\n        isFilterTextFilterCompliant =\n          item.name.toLowerCase().indexOf(debouncedFilterText.toLowerCase()) !==\n          -1;\n      }\n      return isFilterTextFilterCompliant;\n    },\n    [debouncedFilterText]\n  );\n\n  const {\n    page: currentPage,\n    sortBy: currentSortBy,\n    changePage: onPageChange,\n    changeSortBy: onChangeSortBy,\n  } = useTableControls();\n\n  const { pageItems, filteredItems } = useTable<TableData>({\n    items,\n    filterItem,\n    currentPage: currentPage,\n    currentSortBy: currentSortBy,\n    compareToByColumn: compareByColumnIndex,\n  });\n\n  return (\n    <Stack hasGutter>\n      <StackItem>\n        <Grid hasGutter>\n          <GridItem md={5}>\n            <Toolbar\n              className=\"pf-m-toggle-group-container\"\n              collapseListedFiltersBreakpoint=\"xl\"\n            >\n              <ToolbarContent>\n                <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n                  <ToolbarItem variant=\"search-filter\">\n                    <SearchInput\n                      value={filterText}\n                      onChange={(_, value) => setFilterText(value)}\n                      onClear={() => setFilterText(\"\")}\n                    />\n                  </ToolbarItem>\n                </ToolbarToggleGroup>\n                <ToolbarItem\n                  variant={ToolbarItemVariant.pagination}\n                  align={{ default: \"alignRight\" }}\n                >\n                  <SimplePagination\n                    count={filteredItems.length}\n                    params={currentPage}\n                    onChange={onPageChange}\n                    isTop={true}\n                  />\n                </ToolbarItem>\n              </ToolbarContent>\n            </Toolbar>\n\n            <Table>\n              <Thead>\n                <Tr>\n                  <Th\n                    width={80}\n                    sort={{\n                      columnIndex: 1,\n                      sortBy: { ...currentSortBy },\n                      onSort: onChangeSortBy,\n                    }}\n                  >\n                    File\n                  </Th>\n                  <Th width={20}>Total incidents</Th>\n                </Tr>\n              </Thead>\n              <ConditionalTableBody\n                isNoData={filteredItems.length === 0}\n                numRenderedColumns={10}\n              >\n                {pageItems?.map((item, rowIndex) => {\n                  return (\n                    <Tbody key={rowIndex}>\n                      <Tr>\n                        <Td>\n                          <FileLink\n                            file={item.name}\n                            defaultText={item.displayName}\n                            onClick={() => onShowFile(item, issue)}\n                          />\n                        </Td>\n                        <Td>{item.totalIncidents}</Td>\n                      </Tr>\n                    </Tbody>\n                  );\n                })}\n              </ConditionalTableBody>\n            </Table>\n\n            <SimplePagination\n              count={filteredItems.length}\n              params={currentPage}\n              onChange={onPageChange}\n            />\n          </GridItem>\n          <GridItem md={7}>\n            <Card isCompact isFullHeight>\n              <CardHeader>\n                <CardTitle>\n                  <TextContent>\n                    <>\n                      <Text component=\"h2\">{issue.ruleID}</Text>\n                    </>\n                  </TextContent>\n                </CardTitle>\n              </CardHeader>\n              <CardBody>\n                <SimpleMarkdown\n                  children={getMarkdown(issue.description || \"\", issue.links)}\n                />\n              </CardBody>\n            </Card>\n          </GridItem>\n        </Grid>\n      </StackItem>\n    </Stack>\n  );\n};\n\ninterface IFileLinkProps {\n  file: string;\n  defaultText: string;\n  onClick: () => void;\n}\n\nexport const FileLink: React.FC<IFileLinkProps> = ({\n  file,\n  defaultText,\n  onClick,\n}) => {\n  return (\n    <>\n      {file ? (\n        <Button variant=\"link\" isInline onClick={onClick}>\n          <Truncate content={defaultText || file} />\n        </Button>\n      ) : (\n        defaultText\n      )}\n    </>\n  );\n};\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport { useSelectionState } from \"@migtools/lib-ui\";\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Label,\n  Modal,\n  SearchInput,\n  Split,\n  SplitItem,\n  Tab,\n  Tabs,\n  Title,\n  Toolbar,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarContent,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n  ToolbarItemVariant,\n  ToolbarToggleGroup,\n} from \"@patternfly/react-core\";\nimport ArrowUpIcon from \"@patternfly/react-icons/dist/esm/icons/arrow-up-icon\";\nimport FilterIcon from \"@patternfly/react-icons/dist/esm/icons/filter-icon\";\nimport { Table, Tbody, Td, Th, Thead, Tr } from \"@patternfly/react-table\";\nimport { useDebounce } from \"usehooks-ts\";\n\nimport { compareByCategoryFn } from \"@app/models/api-enriched\";\nimport { ALL_APPLICATIONS_ID } from \"@app/Constants\";\nimport { IssueProcessed } from \"@app/models/api-enriched\";\nimport { useAllApplications, useCodeSnip } from \"@app/queries/report\";\nimport {\n  SimpleSelect,\n  OptionWithValue,\n  FileEditor,\n  ConditionalTableBody,\n  SimplePagination,\n} from \"@app/shared/components\";\nimport {\n  useModal,\n  useTable,\n  useTableControls,\n  useToolbar,\n} from \"@app/shared/hooks\";\n\nimport { IssueOverview } from \"./components/issue-overview\";\nimport { DispersedFile } from \"@app/models/file\";\n\nexport interface TableData extends IssueProcessed {}\n\nconst areRowsEquals = (a: TableData, b: TableData) => {\n  return a.id === b.id;\n};\n\nconst toOption = (option: string | ToolbarChip): OptionWithValue => {\n  if (typeof option === \"string\") {\n    const toStringFn = () => option;\n    return {\n      value: option,\n      toString: toStringFn,\n      compareTo: (other: string | OptionWithValue) => {\n        return typeof other === \"string\"\n          ? toStringFn().toLowerCase().includes(other.toLocaleLowerCase())\n          : option === other.value;\n      },\n    };\n  } else {\n    const toStringFn = () => option.node as string;\n    return {\n      value: option.key,\n      toString: toStringFn,\n      compareTo: (other: string | OptionWithValue) => {\n        return typeof other === \"string\"\n          ? toStringFn().toLowerCase().includes(other.toLowerCase())\n          : option.key === other.value;\n      },\n    };\n  }\n};\n\nconst toToolbarChip = (option: OptionWithValue): ToolbarChip => {\n  return {\n    key: option.value,\n    node: option.toString(),\n  };\n};\n\nexport const compareByColumnIndex = (\n  a: IssueProcessed,\n  b: IssueProcessed,\n  columnIndex?: number\n) => {\n  switch (columnIndex) {\n    case 1: // name\n      return a.id.localeCompare(b.id);\n    case 6: // Total incidents\n      return a.totalIncidents - b.totalIncidents;\n    case 7: // Total storypoints\n      return a.totalEffort - b.totalEffort;\n    default:\n      return 0;\n  }\n};\n\ninterface SelectedFile {\n  file: DispersedFile;\n  issue: IssueProcessed;\n}\n\nexport interface IViolationsTableProps {\n  applicationId?: string;\n}\n\nexport const ViolationsTable: React.FC<IViolationsTableProps> = ({\n  applicationId,\n}) => {\n  const allApplications = useAllApplications();\n\n\n  const [fileEditorTabId, setFileEditorTabId] = useState<number>(0);\n  const [selectedFile, setSelectedFile] = useState<DispersedFile>({} as DispersedFile);\n\n  const codeSnipQuery = useCodeSnip(selectedFile, fileEditorTabId);\n\n  const codeSnip: string = useMemo(() => codeSnipQuery.data || \"\", [codeSnipQuery.data])\n\n  // Filters\n  const [filterText, setFilterText] = useState(\"\");\n  const { filters, setFilter, removeFilter, clearAllFilters } = useToolbar<\n    \"category\" | \"effort\" | \"sourceTechnology\" | \"targetTechnology\",\n    ToolbarChip\n  >();\n\n  const debouncedFilterText = useDebounce<string>(filterText, 250);\n  const debouncedFilters = useDebounce<\n    Map<\n      \"category\" | \"effort\" | \"sourceTechnology\" | \"targetTechnology\",\n      ToolbarChip[]\n    >\n  >(filters, 100);\n\n  const {\n    data: fileModalData,\n    isOpen: isFileModalOpen,\n    action: fileModalAction,\n    open: openFileModal,\n    close: closeFileModal,\n  } = useModal<\"showFile\", SelectedFile>();\n\n\n  const issues: TableData[] = useMemo(() => {\n    if (!allApplications.data || applicationId === undefined) {\n      return [];\n    }\n\n    return applicationId === ALL_APPLICATIONS_ID\n      ? allApplications.data?.flatMap((a) => a.issues)\n      : allApplications.data?.find((f) => f.id === applicationId)?.issues || [];\n  }, [allApplications.data, applicationId]);\n\n  const technologies = useMemo(() => {\n    const sources = new Set<string>();\n    const targets = new Set<string>();\n\n    issues.forEach((elem) => {\n      elem.sourceTechnologies?.forEach((e) => sources.add(e));\n      elem.targetTechnologies?.forEach((e) => targets.add(e));\n    });\n\n    return { source: Array.from(sources), target: Array.from(targets) };\n  }, [issues]);\n\n  const categories = useMemo(() => {\n    const allCategories = (issues || []).map((i) => i.category);\n    return Array.from(new Set(allCategories)).sort(\n      compareByCategoryFn((e) => e)\n    );\n  }, [issues]);\n\n  const efforts = useMemo(() => {\n    const allEfforts = (issues || []).map((e) => e.effort.toString());\n    return Array.from(new Set(allEfforts)).sort();\n  }, [issues]);\n\n  const {\n    isItemSelected: isRowExpanded,\n    toggleItemSelected: toggleRowExpanded,\n  } = useSelectionState<TableData>({\n    items: issues,\n    isEqual: areRowsEquals,\n  });\n\n  const {\n    page: currentPage,\n    sortBy: currentSortBy,\n    changePage: onPageChange,\n    changeSortBy: onChangeSortBy,\n  } = useTableControls();\n\n  const filterItem = useCallback(\n    (item: TableData) => {\n      let isFilterTextFilterCompliant = true;\n      if (debouncedFilterText && debouncedFilterText.trim().length > 0) {\n        isFilterTextFilterCompliant =\n          item.name.toLowerCase().indexOf(debouncedFilterText.toLowerCase()) !==\n          -1;\n      }\n\n      let isCategoryFilterCompliant = true;\n      const selectedCategories = debouncedFilters.get(\"category\") || [];\n      if (selectedCategories.length > 0) {\n        isCategoryFilterCompliant = selectedCategories.some(\n          (f) => item.category === f.key\n        );\n      }\n\n      let isLevelOfEffortCompliant = true;\n      const selectedLevelOfEfforts = debouncedFilters.get(\"effort\") || [];\n      if (selectedLevelOfEfforts.length > 0) {\n        isLevelOfEffortCompliant = selectedLevelOfEfforts.some(\n          (f) => item.effort.toString() === f.key\n        );\n      }\n\n      let isSourceCompliant = true;\n      const selectedSources = debouncedFilters.get(\"sourceTechnology\") || [];\n      if (selectedSources.length > 0) {\n        isSourceCompliant = selectedSources.some((f) => {\n          return item.sourceTechnologies?.includes(f.key);\n        });\n      }\n\n      let isTargetCompliant = true;\n      const selectedTargets = debouncedFilters.get(\"targetTechnology\") || [];\n      if (selectedTargets.length > 0) {\n        isTargetCompliant = selectedTargets.some((f) => {\n          return item.targetTechnologies?.includes(f.key);\n        });\n      }\n\n      return (\n        isFilterTextFilterCompliant &&\n        isCategoryFilterCompliant &&\n        isLevelOfEffortCompliant &&\n        isSourceCompliant &&\n        isTargetCompliant\n      );\n    },\n    [debouncedFilterText, debouncedFilters]\n  );\n\n  const { pageItems, filteredItems } = useTable<TableData>({\n    items: issues,\n    currentPage: currentPage,\n    currentSortBy: currentSortBy,\n    compareToByColumn: compareByColumnIndex,\n    filterItem: filterItem,\n  });\n\n  // Reset pagination when application change\n  useEffect(() => {\n    onPageChange({ page: 1, perPage: currentPage.perPage });\n  }, [\n    debouncedFilterText,\n    debouncedFilters,\n    onPageChange,\n    currentPage.perPage,\n  ]);\n\n  return (\n    <>\n      <>\n        {applicationId === undefined ? (\n          <Bullseye>\n            <EmptyState>\n              <EmptyStateIcon icon={ArrowUpIcon} />\n              <Title headingLevel=\"h4\" size=\"lg\">\n                Select an application\n              </Title>\n              <EmptyStateBody>\n                Select an application whose data you want to get access to.\n              </EmptyStateBody>\n            </EmptyState>\n          </Bullseye>\n        ) : (\n          <>\n            <Toolbar\n              className=\"pf-m-toggle-group-container\"\n              collapseListedFiltersBreakpoint=\"xl\"\n              clearAllFilters={clearAllFilters}\n            >\n              <ToolbarContent>\n                <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n                  <ToolbarItem variant=\"search-filter\">\n                    <SearchInput\n                      value={filterText}\n                      onChange={(_, value) => setFilterText(value)}\n                      onClear={() => setFilterText(\"\")}\n                    />\n                  </ToolbarItem>\n                  <ToolbarGroup variant=\"filter-group\">\n                    <ToolbarFilter\n                      chips={filters.get(\"category\")}\n                      deleteChip={(\n                        category: string | ToolbarChipGroup,\n                        chip: ToolbarChip | string\n                      ) => removeFilter(\"category\", chip)}\n                      deleteChipGroup={() => setFilter(\"category\", [])}\n                      categoryName={{ key: \"category\", name: \"Category\" }}\n                    >\n                      <SimpleSelect\n                        maxHeight={300}\n                        variant=\"checkbox\"\n                        aria-label=\"category\"\n                        aria-labelledby=\"category\"\n                        placeholderText=\"Category\"\n                        value={filters.get(\"category\")?.map(toOption)}\n                        options={categories.map(toOption)}\n                        onChange={(option) => {\n                          const optionValue = option as OptionWithValue<string>;\n\n                          const elementExists = (\n                            filters.get(\"category\") || []\n                          ).some((f) => f.key === optionValue.value);\n                          let newElements: ToolbarChip[];\n                          if (elementExists) {\n                            newElements = (\n                              filters.get(\"category\") || []\n                            ).filter((f) => f.key !== optionValue.value);\n                          } else {\n                            newElements = [\n                              ...(filters.get(\"category\") || []),\n                              toToolbarChip(optionValue),\n                            ];\n                          }\n\n                          setFilter(\"category\", newElements);\n                        }}\n                        hasInlineFilter\n                        onClear={() => setFilter(\"category\", [])}\n                      />\n                    </ToolbarFilter>\n                  </ToolbarGroup>\n                  <ToolbarGroup variant=\"filter-group\">\n                    <ToolbarFilter\n                      chips={filters.get(\"effort\")}\n                      deleteChip={(\n                        category: string | ToolbarChipGroup,\n                        chip: ToolbarChip | string\n                      ) => removeFilter(\"effort\", chip)}\n                      deleteChipGroup={() => setFilter(\"effort\", [])}\n                      categoryName={{\n                        key: \"effort\",\n                        name: \"Effort\",\n                      }}\n                    >\n                      <SimpleSelect\n                        maxHeight={300}\n                        variant=\"checkbox\"\n                        aria-label=\"effort\"\n                        aria-labelledby=\"effort\"\n                        placeholderText=\"Effort\"\n                        value={filters.get(\"effort\")?.map(toOption)}\n                        options={efforts.map(toOption)}\n                        onChange={(option) => {\n                          const optionValue = option as OptionWithValue<string>;\n\n                          const elementExists = (\n                            filters.get(\"effort\") || []\n                          ).some((f) => f.key === optionValue.value);\n                          let newElements: ToolbarChip[];\n                          if (elementExists) {\n                            newElements = (filters.get(\"effort\") || []).filter(\n                              (f) => f.key !== optionValue.value\n                            );\n                          } else {\n                            newElements = [\n                              ...(filters.get(\"effort\") || []),\n                              toToolbarChip(optionValue),\n                            ];\n                          }\n\n                          setFilter(\"effort\", newElements);\n                        }}\n                        hasInlineFilter\n                        onClear={() => setFilter(\"effort\", [])}\n                      />\n                    </ToolbarFilter>\n                  </ToolbarGroup>\n                  <ToolbarGroup variant=\"filter-group\">\n                    {technologies.source.length > 0 && (\n                      <ToolbarFilter\n                        chips={filters.get(\"sourceTechnology\")}\n                        deleteChip={(\n                          category: string | ToolbarChipGroup,\n                          chip: ToolbarChip | string\n                        ) => removeFilter(\"sourceTechnology\", chip)}\n                        deleteChipGroup={() =>\n                          setFilter(\"sourceTechnology\", [])\n                        }\n                        categoryName={{\n                          key: \"sourceTechnology\",\n                          name: \"Source\",\n                        }}\n                      >\n                        <SimpleSelect\n                          maxHeight={300}\n                          variant=\"checkbox\"\n                          aria-label=\"sourceTechnology\"\n                          aria-labelledby=\"sourceTechnology\"\n                          placeholderText=\"Source\"\n                          value={filters.get(\"sourceTechnology\")?.map(toOption)}\n                          options={technologies.source.map(toOption)}\n                          onChange={(option) => {\n                            const optionValue =\n                              option as OptionWithValue<string>;\n\n                            const elementExists = (\n                              filters.get(\"sourceTechnology\") || []\n                            ).some((f) => f.key === optionValue.value);\n                            let newElements: ToolbarChip[];\n                            if (elementExists) {\n                              newElements = (\n                                filters.get(\"sourceTechnology\") || []\n                              ).filter((f) => f.key !== optionValue.value);\n                            } else {\n                              newElements = [\n                                ...(filters.get(\"sourceTechnology\") || []),\n                                toToolbarChip(optionValue),\n                              ];\n                            }\n\n                            setFilter(\"sourceTechnology\", newElements);\n                          }}\n                          hasInlineFilter\n                          onClear={() => setFilter(\"sourceTechnology\", [])}\n                        />\n                      </ToolbarFilter>\n                    )}\n                    {technologies.target.length > 0 && (\n                      <ToolbarFilter\n                        chips={filters.get(\"targetTechnology\")}\n                        deleteChip={(\n                          category: string | ToolbarChipGroup,\n                          chip: ToolbarChip | string\n                        ) => removeFilter(\"targetTechnology\", chip)}\n                        deleteChipGroup={() =>\n                          setFilter(\"targetTechnology\", [])\n                        }\n                        categoryName={{\n                          key: \"targetTechnology\",\n                          name: \"Target\",\n                        }}\n                      >\n                        <SimpleSelect\n                          maxHeight={300}\n                          variant=\"checkbox\"\n                          aria-label=\"targetTechnology\"\n                          aria-labelledby=\"targetTechnology\"\n                          placeholderText=\"Target\"\n                          value={filters.get(\"targetTechnology\")?.map(toOption)}\n                          options={technologies.target.map(toOption)}\n                          onChange={(option) => {\n                            const optionValue =\n                              option as OptionWithValue<string>;\n\n                            const elementExists = (\n                              filters.get(\"targetTechnology\") || []\n                            ).some((f) => f.key === optionValue.value);\n                            let newElements: ToolbarChip[];\n                            if (elementExists) {\n                              newElements = (\n                                filters.get(\"targetTechnology\") || []\n                              ).filter((f) => f.key !== optionValue.value);\n                            } else {\n                              newElements = [\n                                ...(filters.get(\"targetTechnology\") || []),\n                                toToolbarChip(optionValue),\n                              ];\n                            }\n\n                            setFilter(\"targetTechnology\", newElements);\n                          }}\n                          hasInlineFilter\n                          onClear={() => setFilter(\"targetTechnology\", [])}\n                        />\n                      </ToolbarFilter>\n                    )}\n                  </ToolbarGroup>\n                </ToolbarToggleGroup>\n                <ToolbarItem\n                  variant={ToolbarItemVariant.pagination}\n                  align={{ default: \"alignRight\" }}\n                >\n                  <SimplePagination\n                    count={filteredItems.length}\n                    params={currentPage}\n                    onChange={onPageChange}\n                    isTop={true}\n                  />\n                </ToolbarItem>\n              </ToolbarContent>\n            </Toolbar>\n\n            <Table isExpandable>\n              <Thead>\n                <Tr>\n                  <Th></Th>\n                  <Th\n                    width={35}\n                    sort={{\n                      columnIndex: 1,\n                      sortBy: { ...currentSortBy },\n                      onSort: onChangeSortBy,\n                    }}\n                  >\n                    Issue\n                  </Th>\n                  <Th width={10}>Category</Th>\n                  <Th width={10} modifier=\"wrap\">\n                    Source\n                  </Th>\n                  <Th width={10} modifier=\"wrap\">\n                    Target\n                  </Th>\n                  <Th width={15} modifier=\"truncate\">\n                    Effort\n                  </Th>\n                  <Th\n                    width={10}\n                    sort={{\n                      columnIndex: 6,\n                      sortBy: { ...currentSortBy },\n                      onSort: onChangeSortBy,\n                    }}\n                  >\n                    Total incidents\n                  </Th>\n                  <Th\n                    width={10}\n                    sort={{\n                      columnIndex: 7,\n                      sortBy: { ...currentSortBy },\n                      onSort: onChangeSortBy,\n                    }}\n                  >\n                    Total effort\n                  </Th>\n                </Tr>\n              </Thead>\n              <ConditionalTableBody\n                isNoData={filteredItems.length === 0}\n                numRenderedColumns={10}\n              >\n                {pageItems?.map((item, rowIndex) => {\n                  return (\n                    <Tbody key={rowIndex} isExpanded={isRowExpanded(item)}>\n                      <Tr>\n                        <Td\n                          expand={{\n                            rowIndex,\n                            isExpanded: isRowExpanded(item),\n                            onToggle: () => toggleRowExpanded(item),\n                          }}\n                        />\n                        <Td>{item.name}</Td>\n                        <Td>{item.category}</Td>\n                        <Td>\n                          <Split hasGutter>\n                            {item.sourceTechnologies?.map((technology) => (\n                              <SplitItem key={technology}>\n                                <Label isCompact color=\"blue\">\n                                  {technology}\n                                </Label>\n                              </SplitItem>\n                            ))}\n                          </Split>\n                        </Td>\n                        <Td>\n                          <Split hasGutter>\n                            {item.targetTechnologies?.map((technology) => (\n                              <SplitItem key={technology}>\n                                <Label isCompact color=\"blue\">\n                                  {technology}\n                                </Label>\n                              </SplitItem>\n                            ))}\n                          </Split>\n                        </Td>\n                        <Td>{item.effort.toString()}</Td>\n                        <Td>{item.totalIncidents}</Td>\n                        <Td>{item.totalEffort}</Td>\n                      </Tr>\n                      {isRowExpanded(item) ? (\n                        <Tr isExpanded>\n                          <Td colSpan={9}>\n                            <div className=\"pf-v5-u-m-sm\">\n                              <IssueOverview\n                                issue={item}\n                                onShowFile={(file, issue) => {\n                                  openFileModal(\"showFile\", {\n                                    file,\n                                    issue,\n                                  })\n                                  setSelectedFile(file)\n                                }\n                              }\n                              />\n                            </div>\n                          </Td>\n                        </Tr>\n                      ) : null}\n                    </Tbody>\n                  );\n                })}\n              </ConditionalTableBody>\n            </Table>\n\n            <SimplePagination\n              count={filteredItems.length}\n              params={currentPage}\n              onChange={onPageChange}\n            />\n          </>\n        )}\n      </>\n\n      <Modal\n        title={`File ${fileModalData?.file?.name || \"\"}`}\n        isOpen={isFileModalOpen && fileModalAction === \"showFile\"}\n        onClose={closeFileModal}\n        variant=\"default\"\n        position=\"top\"\n        disableFocusTrap\n        actions={[\n          <Button key=\"close\" variant=\"primary\" onClick={closeFileModal}>\n            Close\n          </Button>,\n        ]}\n      >\n        { Object.keys(fileModalData?.file?.incidents || {}).length > 1 ? (\n          <Tabs\n            activeKey={fileEditorTabId}\n            onSelect={(_event, tabKey) =>\n              setFileEditorTabId(tabKey as number)}>\n          {\n            Object.values(fileModalData?.file?.incidents || {}).flatMap((incidents, idx) => (\n              <Tab\n                key={idx}\n                eventKey={idx}\n                title={`Line #${fileModalData?.file.ranges[idx*2]} - #${fileModalData?.file.ranges[idx*2+1]}`} // TODO i18n\n              >\n                {fileEditorTabId === idx ? (\n                      <FileEditor\n                        name={fileModalData?.file.name || \"\"}\n                        displayName={fileModalData?.file.displayName || \"\"}\n                        codeSnip={codeSnip}\n                        isLoading={codeSnipQuery.isLoading || codeSnipQuery.isFetching}\n                        issue={fileModalData?.issue || {} as IssueProcessed}\n                        incidents={incidents}\n                      />\n                ): null} \n              </Tab>))\n          }\n          </Tabs>\n        ) : (\n          <FileEditor\n            name={fileModalData?.file.name || \"\"}\n            displayName={fileModalData?.file.displayName || \"\"}\n            codeSnip={codeSnip}\n            isLoading={codeSnipQuery.isLoading || codeSnipQuery.isFetching}\n            issue={fileModalData?.issue || {} as IssueProcessed}\n            incidents={fileModalData?.file?.incidents[0] || []}/>\n        )}\n      </Modal>\n    </>\n  );\n};\n","import { useCallback, useReducer } from 'react';\n\nimport { ActionType, createAction, getType } from 'typesafe-actions';\n\ninterface IOpenAction {\n  action: any;\n  data: any;\n}\n\nconst openModal = createAction('useModal/action/openModalWithData')<IOpenAction>();\nconst closeModal = createAction('useModal/action/startClose')();\n\n// State\ntype State = Readonly<{\n  action: any;\n  data: any;\n  isOpen: boolean;\n}>;\n\nconst defaultState: State = {\n  action: undefined,\n  data: undefined,\n  isOpen: false,\n};\n\n// Reducer\n\ntype Action = ActionType<typeof openModal | typeof closeModal>;\n\nconst reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case getType(openModal):\n      return {\n        ...state,\n        action: action.payload.action,\n        data: action.payload.data,\n        isOpen: true,\n      };\n    case getType(closeModal):\n      return {\n        ...state,\n        action: undefined,\n        data: undefined,\n        isOpen: false,\n      };\n    default:\n      return state;\n  }\n};\n\n// Hook\n\ninterface HookState<A, T> {\n  action?: A;\n  data?: T;\n  isOpen: boolean;\n  open: (action: A, data?: T) => void;\n  close: () => void;\n  isAction: (action: A) => boolean;\n}\n\nexport const useModal = <A, T = any>(): HookState<A, T> => {\n  const [state, dispatch] = useReducer(reducer, {\n    ...defaultState,\n  });\n\n  const openHandler = useCallback((action: A, entity?: T) => {\n    dispatch(openModal({ action: action, data: entity }));\n  }, []);\n\n  const closeHandler = useCallback(() => {\n    dispatch(closeModal());\n  }, []);\n\n  return {\n    action: state.action,\n    data: state.data,\n    isOpen: state.isOpen,\n    open: openHandler,\n    close: closeHandler,\n    isAction: (action: A) => state.action === action,\n  };\n};\n\nexport default useModal;\n","import { useMemo } from 'react';\n\nimport { SortByDirection } from '@patternfly/react-table';\n\nimport { Page, SortBy } from '../../common/types';\n\n// Hook\n\ninterface HookArgs<T> {\n  items?: T[];\n\n  currentSortBy?: SortBy;\n  compareToByColumn: (a: T, b: T, columnIndex?: number) => number;\n\n  currentPage: Page;\n  filterItem: (value: T) => boolean;\n}\n\ninterface HookState<T> {\n  pageItems: T[];\n  filteredItems: T[];\n}\n\nexport const useTable = <T>({\n  items,\n  currentSortBy,\n  currentPage,\n  filterItem,\n  compareToByColumn,\n}: HookArgs<T>): HookState<T> => {\n  const state: HookState<T> = useMemo(() => {\n    const allItems = [...(items || [])];\n\n    // Filter\n    const filteredItems = allItems.filter(filterItem);\n\n    //  Sort\n    let orderChanged = false;\n\n    let sortedItems: T[];\n    sortedItems = [...filteredItems].sort((a, b) => {\n      const comparisonResult = compareToByColumn(a, b, currentSortBy?.index);\n      if (comparisonResult !== 0) {\n        orderChanged = true;\n      }\n      return comparisonResult;\n    });\n\n    if (orderChanged && currentSortBy?.direction === SortByDirection.desc) {\n      sortedItems = sortedItems.reverse();\n    }\n\n    // Paginate\n    const pageItems = sortedItems.slice(\n      (currentPage.page - 1) * currentPage.perPage,\n      currentPage.page * currentPage.perPage\n    );\n\n    return {\n      pageItems,\n      filteredItems,\n    };\n  }, [items, currentPage, currentSortBy, compareToByColumn, filterItem]);\n\n  return state;\n};\n","import { useCallback, useReducer } from 'react';\n\nimport { IExtraColumnData, SortByDirection } from '@patternfly/react-table';\nimport { ActionType, createAction, getType } from 'typesafe-actions';\n\nimport { Page, SortBy } from '../../common/types';\n\n// Actions\n\nconst setPage = createAction('useTableControls/pagination/change')<Page>();\nconst setSortBy = createAction('useTableControls/sortBy/change')<SortBy>();\n\n// State\ntype State = Readonly<{\n  changed: boolean;\n\n  currentPage: Page;\n  sortBy?: SortBy;\n}>;\n\nconst defaultState: State = {\n  changed: false,\n\n  currentPage: {\n    page: 1,\n    perPage: 10,\n  },\n  sortBy: undefined,\n};\n\n// Reducer\n\ntype Action = ActionType<typeof setSortBy | typeof setPage>;\n\nconst reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case getType(setPage):\n      return {\n        ...state,\n        changed: true,\n        currentPage: {\n          page: action.payload.page,\n          perPage: action.payload.perPage,\n        },\n      };\n    case getType(setSortBy):\n      return {\n        ...state,\n        changed: true,\n        sortBy: {\n          index: action.payload.index,\n          direction: action.payload.direction,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\n// Hook\n\ninterface HookArgs {\n  page?: Page;\n  sortBy?: SortBy;\n}\n\ninterface HookState {\n  page: Page;\n  sortBy?: SortBy;\n  changePage: (page: { page: number; perPage?: number }) => void;\n  changeSortBy: (\n    event: React.MouseEvent,\n    index: number,\n    direction: SortByDirection,\n    extraData: IExtraColumnData\n  ) => void;\n}\n\nexport const useTableControls = (args?: HookArgs): HookState => {\n  const [state, dispatch] = useReducer(reducer, {\n    ...defaultState,\n    currentPage: args && args.page ? { ...args.page } : { ...defaultState.currentPage },\n    sortBy: args && args.sortBy ? { ...args.sortBy } : defaultState.sortBy,\n  });\n\n  const handlePageChange = useCallback((newPage: { page: number; perPage?: number }) => {\n    dispatch(\n      setPage({\n        page: newPage.page >= 1 ? newPage.page : 1,\n        perPage: newPage.perPage ?? defaultState.currentPage.perPage,\n      })\n    );\n  }, []);\n\n  const handleSortByChange = useCallback(\n    (\n      event: React.MouseEvent,\n      index: number,\n      direction: SortByDirection,\n      extraData: IExtraColumnData\n    ) => {\n      dispatch(\n        setSortBy({\n          index: index,\n          direction: direction,\n        })\n      );\n    },\n    []\n  );\n\n  return {\n    page: state.currentPage,\n    sortBy: state.sortBy,\n    changePage: handlePageChange,\n    changeSortBy: handleSortByChange,\n  };\n};\n","import { useState } from 'react';\n\nimport { ToolbarChip } from '@patternfly/react-core';\n\nconst getToolbarChipKey = (value: string | ToolbarChip) => {\n  return typeof value === 'string' ? value : value.key;\n};\n\n// Hook\n\ntype FilterType = string | ToolbarChip;\n\ninterface HookState<K, T> {\n  filters: Map<K, T[]>;\n  isPresent: boolean;\n  addFilter: (key: K, value: T) => void;\n  setFilter: (key: K, value: T[]) => void;\n  removeFilter: (key: K, value: FilterType | FilterType[]) => void;\n  clearAllFilters: () => void;\n}\n\nexport const useToolbar = <K, T extends FilterType>(\n  initialValue: Map<K, T[]> | (() => Map<K, T[]>) = new Map()\n): HookState<K, T> => {\n  const [filters, setFilters] = useState<Map<K, T[]>>(initialValue);\n\n  const isPresent =\n    Array.from(filters.values()).reduce((previous, current) => [...previous, ...current], [])\n      .length > 0;\n\n  const addFilter = (key: K, value: T) => {\n    setFilters((current) => {\n      const currentChips = current.get(key) || [];\n      return new Map(current).set(key, [...currentChips, value]);\n    });\n  };\n\n  const setFilter = (key: K, value: T[]) => {\n    setFilters((current) => new Map(current).set(key, value));\n  };\n\n  const removeFilter = (key: K, value: FilterType | FilterType[]) => {\n    setFilters((current) => {\n      let elementsToBeRemoved: FilterType[];\n      if (Array.isArray(value)) {\n        elementsToBeRemoved = [...value];\n      } else {\n        elementsToBeRemoved = [value];\n      }\n\n      const newValue = (current.get(key) || []).filter((f) => {\n        const fkey = getToolbarChipKey(f);\n        return !elementsToBeRemoved.some((r) => {\n          const rKey = getToolbarChipKey(r);\n          return fkey === rKey;\n        });\n      });\n\n      return new Map(current).set(key, newValue);\n    });\n  };\n\n  const clearAllFilters = () => {\n    setFilters((current) => {\n      const newVal = new Map(current);\n      Array.from(newVal.keys()).forEach((key) => {\n        newVal.set(key, []);\n      });\n      return newVal;\n    });\n  };\n\n  return {\n    filters,\n    isPresent,\n    addFilter,\n    setFilter,\n    removeFilter,\n    clearAllFilters,\n  };\n};\n","import { useState } from \"react\";\n\ninterface Cell {\n  isSelected: boolean;\n}\n\nconst defaultCellState: Cell = { isSelected: false };\n\nexport interface IArgs<R, C> {\n  rows: R[];\n  columns: C[];\n}\n\nexport interface IState<R, C> {\n  isCellSelected: (row: R, column: C) => boolean;\n  isSomeCellSelected: (row: R, columns: C[]) => boolean;\n  toggleCellSelected: (row: R, column: C, isSelecting?: boolean) => void;\n}\n\nexport const useCellSelectionState = <R, C>({\n  rows,\n  columns,\n}: IArgs<R, C>): IState<R, C> => {\n  const [spreadsheet, setSpreadsheet] = useState<Map<R, Map<C, Cell>>>(\n    new Map()\n  );\n\n  const isCellSelected = (row: R, column: C) => {\n    const cell = spreadsheet.get(row)?.get(column);\n    return cell ? cell.isSelected : false;\n  };\n\n  const isSomeCellSelected = (row: R, columns: C[]) => {\n    return columns.some((elem) => spreadsheet.get(row)?.get(elem));\n  };\n\n  const toggleCellSelected = (\n    row: R,\n    column: C,\n    isSelecting: boolean = !isCellSelected(row, column)\n  ) => {\n    const columns: Map<C, Cell> = spreadsheet.get(row) || new Map();\n    const cell: Cell = columns.get(column) || { ...defaultCellState };\n\n    const newColumns = new Map().set(column, {\n      ...cell,\n      isSelected: isSelecting,\n    });\n    const newSpreadsheet = new Map(spreadsheet).set(row, newColumns);\n\n    setSpreadsheet(newSpreadsheet);\n  };\n\n  return {\n    isCellSelected,\n    isSomeCellSelected,\n    toggleCellSelected,\n  };\n};\n\nexport default useCellSelectionState;\n","import { LinkDto } from \"@app/api/report\";\n\nexport const getMarkdown = (body: string, links: LinkDto[]): string => {\n  const formattedLinks = (links || [])\n    .map((link, index) => `${index + 1}. [${link.title}](${link.url})`)\n    .join(\"\\n\");\n  return [body, formattedLinks].join(\"\\n\");\n};\n\n\nexport const capitalizeFirstLetter = (val: string) => {\n  if (!val) {\n    return val;\n  }\n\n  return val.charAt(0).toUpperCase() + val.slice(1);\n};"],"names":["ConditionalRender","_ref","when","then","children","_jsx","_Fragment","SimpleSelect","onChange","options","value","placeholderText","props","isOpen","setIsOpen","useState","Select","onToggle","_","isExpanded","onSelect","selection","variant","selections","map","option","index","SelectOption","concat","toString","compareToByColumn","a","b","columnIndex","name","localeCompare","version","indirect","toOption","toStringFn","compareTo","other","toLowerCase","includes","toLocaleLowerCase","node","key","toToolbarChip","DependenciesTable","_filters$get","_filters$get2","applicationId","allApplicationsQuery","useAllApplications","filterText","setFilterText","filters","setFilter","removeFilter","clearAllFilters","useToolbar","debouncedFilterText","useDebounce","debouncedFilters","dependencies","useMemo","_allApplicationsQuery","_allApplicationsQuery2","_allApplicationsQuery3","data","undefined","ALL_APPLICATIONS_ID","flatMap","find","f","id","allLabels","Array","from","Set","d","labels","page","currentPage","sortBy","currentSortBy","changePage","onPageChange","changeSortBy","onChangeSortBy","useTableControls","filterItem","useCallback","item","isFilterTextFilterCompliant","trim","length","indexOf","isLabelFilterCompliant","selectedLabels","get","some","_item$labels","selectedRelation","pageItems","filteredItems","useTable","items","useEffect","perPage","Bullseye","_jsxs","EmptyState","EmptyStateIcon","icon","ArrowUpIcon","Title","headingLevel","size","EmptyStateBody","Toolbar","className","collapseListedFiltersBreakpoint","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarItem","SearchInput","onClear","ToolbarGroup","ToolbarFilter","chips","deleteChip","category","chip","deleteChipGroup","categoryName","maxHeight","optionValue","newElements","filter","hasInlineFilter","ToolbarItemVariant","pagination","align","default","SimplePagination","count","params","isTop","Table","Thead","Tr","Th","width","sort","onSort","modifier","ConditionalTableBody","isNoData","numRenderedColumns","rowIndex","_item$labels2","Tbody","Td","Split","hasGutter","label","SplitItem","Label","isCompact","color","replace","SimpleMarkdown","rest","ReactMarkdown","remarkPlugins","remarkGfm","linkTarget","codeLineRegex","FileEditor","_name$split","displayName","codeSnip","isLoading","incidents","issue","absoluteToRelativeLineNum","lineNum","relativeToAbsoluteLineNum","codeSnipNumberedLines","split","codeSnipTrimmedLines","codeSnipStartLine","forEach","numberedLine","match","isNaN","Number","lineCode","push","join","editorRef","useRef","monacoRef","_monacoRef$current","_editorRef$current","current","editor","getModels","model","dispose","disposables","setDisposables","disposable","fileExtension","pop","onEditorDidMount","monaco","layout","focus","updateOptions","tabSize","newDisposables","addMarkers","_incidents$filter","markers","inc","lineNumber","startLineNumber","endLineNumber","startColumn","endColumn","message","description","severity","MarkerSeverity","Warning","setModelMarkers","hovers","addHover","links","languages","registerHoverProvider","provideHover","position","range","Range","contents","getMarkdown","Drawer","isInline","DrawerContent","panelContent","DrawerPanelContent","isResizable","DrawerHead","Card","isLarge","CardHeader","CardTitle","TextContent","Text","component","ruleID","CardBody","DrawerContentBody","CodeEditor","isDarkTheme","isLineNumbersVisible","isReadOnly","isMinimapVisible","isLanguageLabelVisible","isDownloadEnabled","title","code","language","Object","values","Language","l","glyphMargin","renderValidationDecorations","lineNumbers","String","height","window","innerHeight","isError","errorEmptyState","noDataEmptyState","error","EmptyStateVariant","sm","ExclamationCircleIcon","globalDangerColor200","noData","CubesIcon","colSpan","Spinner","perPageOptions","getPerPage","Pagination","itemCount","onPageInput","onSetPage","onPerPageSelect","widgetId","PaginationVariant","top","bottom","toggleTemplate","ToggleTemplate","compareByColumnIndex","totalIncidents","IssueOverview","onShowFile","dispersedFilesQuery","useDispersedFiles","_dispersedFilesQuery$","Stack","StackItem","Grid","GridItem","md","FileLink","file","defaultText","onClick","isFullHeight","_ref2","Button","Truncate","content","areRowsEquals","totalEffort","ViolationsTable","_filters$get3","_filters$get4","_fileModalData$file","_fileModalData$file2","_fileModalData$file3","_fileModalData$file4","allApplications","fileEditorTabId","setFileEditorTabId","selectedFile","setSelectedFile","codeSnipQuery","useCodeSnip","fileModalData","isFileModalOpen","action","fileModalAction","open","openFileModal","close","closeFileModal","useModal","issues","_allApplications$data","_allApplications$data2","_allApplications$data3","technologies","sources","targets","elem","_elem$sourceTechnolog","_elem$targetTechnolog","sourceTechnologies","e","add","targetTechnologies","source","target","categories","allCategories","i","compareByCategoryFn","efforts","allEfforts","effort","isItemSelected","isRowExpanded","toggleItemSelected","toggleRowExpanded","useSelectionState","isEqual","isCategoryFilterCompliant","selectedCategories","isLevelOfEffortCompliant","selectedLevelOfEfforts","isSourceCompliant","selectedSources","_item$sourceTechnolog","isTargetCompliant","selectedTargets","_item$targetTechnolog","isExpandable","_item$sourceTechnolog2","_item$targetTechnolog2","expand","technology","Modal","onClose","disableFocusTrap","actions","keys","Tabs","activeKey","_event","tabKey","idx","Tab","eventKey","ranges","isFetching","openModal","createAction","closeModal","defaultState","reducer","state","type","getType","payload","dispatch","useReducer","openHandler","entity","closeHandler","isAction","sortedItems","orderChanged","comparisonResult","direction","SortByDirection","desc","reverse","slice","setPage","setSortBy","changed","args","handlePageChange","newPage","_newPage$perPage","handleSortByChange","event","extraData","getToolbarChipKey","initialValue","arguments","Map","setFilters","isPresent","reduce","previous","addFilter","currentChips","set","elementsToBeRemoved","isArray","newValue","fkey","r","rKey","newVal","defaultCellState","isSelected","useCellSelectionState","rows","columns","spreadsheet","setSpreadsheet","isCellSelected","row","column","_spreadsheet$get","cell","isSomeCellSelected","_spreadsheet$get2","toggleCellSelected","isSelecting","newColumns","newSpreadsheet","body","link","url","capitalizeFirstLetter","val","charAt","toUpperCase"],"sourceRoot":""}