{"version":3,"file":"static/js/730.dbfe9987.chunk.js","mappings":"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","sources":["pages/application-details/pages/dashboard/components/incidents-section.tsx","pages/application-details/pages/dashboard/dashboard.tsx"],"sourcesContent":["import React, { useMemo } from \"react\";\n\nimport {\n  Chart,\n  ChartAxis,\n  ChartBar,\n  ChartGroup,\n  ChartThemeColor,\n  ChartTooltip,\n} from \"@patternfly/react-charts\";\nimport {\n  Card,\n  CardBody,\n  CardTitle,\n  Grid,\n  GridItem,\n} from \"@patternfly/react-core\";\nimport {\n  Table,\n  Tbody,\n  Td,\n  Th,\n  Thead,\n  Tr,\n} from \"@patternfly/react-table\";\n\nimport {\n  ISSUE_CATEGORIES,\n  IssueCatType,\n  compareByCategoryFn,\n} from \"@app/models/api-enriched\";\nimport { ApplicationProcessed } from \"@app/models/api-enriched\";\n\ninterface IncidentsData {\n  category: IssueCatType;\n  totalIncidents: number;\n  totalStoryPoints: number;\n}\n\nconst DEFAULT_INCIDENTS_DATA: IncidentsData[] =\n  ISSUE_CATEGORIES.map((e) => ({\n    category: e,\n    totalIncidents: 0,\n    totalStoryPoints: 0,\n  }));\n\ntype IncidentsChart = {\n  [key in \"IncidentsBar\" | \"StoryPointsBar\"]: {\n    getY: (data: IncidentsData) => number;\n    getTooltip: (data: any) => string;\n  };\n};\nconst INCIDENTS_CHART: IncidentsChart = {\n  IncidentsBar: {\n    getY: (data: IncidentsData) => {\n      return data.totalIncidents;\n    },\n    getTooltip: ({ datum }: any) => `${datum.y} incidents`,\n  },\n  StoryPointsBar: {\n    getY: (data: IncidentsData) => {\n      return data.totalStoryPoints;\n    },\n    getTooltip: ({ datum }: any) => `${datum.y} SP`,\n  },\n};\n\nexport interface IIncidentsSectionProps {\n  application: ApplicationProcessed;\n}\n\nexport const IncidentsSection: React.FC<IIncidentsSectionProps> = ({\n  application,\n}) => {\n  const applicationIssues = application.issues\n\n  // Incidents Chart\n  const incidents = useMemo(() => {\n    return (applicationIssues || []).reduce((prev, current) => {\n      const prevVal: IncidentsData | undefined = prev.find(\n        (e) => e.category === current.category\n      );\n\n      let result: IncidentsData[];\n      if (prevVal) {\n        result = [\n          ...prev.filter((e) => e.category !== current.category),\n          {\n            category: current.category,\n            totalIncidents: prevVal.totalIncidents + current.totalIncidents,\n            totalStoryPoints:\n              prevVal.totalStoryPoints + current.totalEffort,\n          },\n        ];\n      } else {\n        result = [\n          ...prev,\n          {\n            category: current.category,\n            totalIncidents: 0,\n            totalStoryPoints: 0,\n          },\n        ];\n      }\n\n      return result.sort(compareByCategoryFn((elem) => elem.category));\n    }, DEFAULT_INCIDENTS_DATA);\n  }, [applicationIssues]);\n\n  return (\n    <Grid md={6}>\n      <GridItem>\n        <Card isFullHeight>\n          <CardTitle>Incidents</CardTitle>\n          <CardBody>\n            <Table variant=\"compact\">\n              <Thead>\n                <Tr>\n                  <Th width={40}>Category</Th>\n                  <Th>Incidents</Th>\n                  <Th>Total Story Points</Th>\n                </Tr>\n              </Thead>\n              <Tbody>\n                {incidents.map((incident) => (\n                  <Tr key={incident.category}>\n                    <Td>{incident.category}</Td>\n                    <Td>{incident.totalIncidents}</Td>\n                    <Td>{incident.totalStoryPoints}</Td>\n                  </Tr>\n                ))}\n              </Tbody>\n            </Table>\n          </CardBody>\n        </Card>\n      </GridItem>\n      <GridItem>\n        <Card isFullHeight>\n          <CardTitle>Incidents and Story Points</CardTitle>\n          <CardBody>\n            <Chart\n              themeColor={ChartThemeColor.multiOrdered}\n              domainPadding={{ x: 35 }}\n              padding={{\n                bottom: 40,\n                top: 20,\n                left: 60,\n                right: 0,\n              }}\n              height={300}\n              width={700}\n            >\n              <ChartAxis />\n              <ChartAxis dependentAxis showGrid={false} />\n              <ChartGroup offset={10}>\n                {Object.entries(INCIDENTS_CHART).map(([barName, barConfig]) => (\n                  <ChartBar\n                    key={barName}\n                    data={incidents.map((incident) => ({\n                      name: barName,\n                      x: incident.category,\n                      y: barConfig.getY(incident),\n                      label: barConfig.getTooltip,\n                    }))}\n                    labelComponent={<ChartTooltip constrainToVisibleArea />}\n                  />\n                ))}\n              </ChartGroup>\n            </Chart>\n          </CardBody>\n        </Card>\n      </GridItem>\n    </Grid>\n  );\n};\n","import React from \"react\";\nimport { useOutletContext } from \"react-router-dom\";\n\nimport { PageSection, Stack, StackItem } from \"@patternfly/react-core\";\n\nimport { ApplicationProcessed } from \"@app/models/api-enriched\";\n\nimport { IncidentsSection } from \"./components/incidents-section\";\n\nexport const Dashboard: React.FC = () => {\n  const application = useOutletContext<ApplicationProcessed | null>();\n\n  return (\n    <>\n      <PageSection>\n        <Stack hasGutter>\n          <StackItem>\n            {application && <IncidentsSection application={application} />}\n          </StackItem>\n        </Stack>\n      </PageSection>\n    </>\n  );\n};\n"],"names":["DEFAULT_INCIDENTS_DATA","ISSUE_CATEGORIES","map","e","category","totalIncidents","totalStoryPoints","INCIDENTS_CHART","IncidentsBar","getY","data","getTooltip","_ref","datum","concat","y","StoryPointsBar","_ref2","IncidentsSection","_ref3","application","applicationIssues","issues","incidents","useMemo","reduce","prev","current","prevVal","find","result","filter","totalEffort","sort","compareByCategoryFn","elem","_jsxs","Grid","md","children","_jsx","GridItem","Card","isFullHeight","CardTitle","CardBody","Table","variant","Thead","Tr","Th","width","Tbody","incident","Td","Chart","themeColor","ChartThemeColor","multiOrdered","domainPadding","x","padding","bottom","top","left","right","height","ChartAxis","dependentAxis","showGrid","ChartGroup","offset","Object","entries","_ref4","barName","barConfig","ChartBar","name","label","labelComponent","ChartTooltip","constrainToVisibleArea","Dashboard","useOutletContext","_Fragment","PageSection","Stack","hasGutter","StackItem"],"sourceRoot":""}