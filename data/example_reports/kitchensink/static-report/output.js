
window["apps"] = [{"id":"0000","name":"kitchensink","rulesets":[{"name":"azure/springboot","description":"Identify Zipkin dependencies.","skipped":["azure-aws-config-credential-01000","azure-aws-config-region-02000","azure-aws-config-s3-03000","azure-aws-config-sqs-04000","azure-aws-config-secret-manager-05000","azure-file-system-01000","azure-file-system-02000","azure-file-system-03000","azure-password-01000","azure-java-version-01000","azure-java-version-02000","eap-to-azure-appservice-certificates-001","azure-logging-0000","eap-to-azure-appservice-datasource-driver-01000","azure-os-specific-00001","azure-os-specific-00002","eap-to-azure-appservice-environment-variables-001","eap-to-azure-appservice-pom-001","spring-boot-to-azure-cache-redis-01000","spring-boot-to-azure-cache-redis-02000","spring-boot-to-azure-database-jdbc-01000","spring-boot-to-azure-database-mongodb-02000","spring-boot-to-azure-database-r2dbc-03000","spring-boot-to-azure-eureka-01000","spring-boot-to-azure-eureka-02000","spring-boot-to-azure-feign-01000","spring-boot-to-azure-identity-provider-01000","spring-boot-to-azure-config-server-01000","spring-boot-to-azure-jms-broker-01000","spring-boot-to-azure-schedule-job-01000","spring-boot-to-azure-static-content-01000","spring-boot-to-azure-zipkin-01000","spring-boot-to-azure-java-fx-01000","spring-boot-to-azure-jks-01000","spring-boot-to-azure-mq-config-kafka-01000","spring-boot-to-azure-mq-config-rabbitmq-01000","spring-boot-to-azure-mq-config-artemis-01000","spring-boot-to-azure-port-01000","spring-boot-to-azure-swing-01000","spring-boot-to-azure-system-config-01000","spring-boot-to-azure-version-01000","spring-boot-to-azure-version-02000","spring-boot-to-azure-version-03000","spring-cloud-to-azure-version-01000","spring-cloud-to-azure-version-02000","spring-cloud-to-azure-version-03000","tomcat-to-azure-external-resources-01000"]},{"name":"camel3","description":"Rules for changes between Camel 3.0 and Camel 4.0","skipped":["xml-removed-camel4-00001","xml-removed-camel4-00002","xml-removed-camel4-00003","xml-removed-camel4-00004","xml-removed-camel4-00005","xml-removed-camel4-00006","xml-removed-camel4-00007","xml-removed-camel4-00008","xml-removed-camel4-00010","xml-removed-camel4-00011","xml-removed-camel4-00012","xml-removed-camel4-00013","xml-removed-camel4-00014","xml-removed-camel4-00015","xml-removed-camel4-00016","xml-removed-camel4-00017","xml-removed-camel4-00018","xml-removed-camel4-00019","xml-removed-camel4-00020","xml-removed-camel4-00021","xml-removed-camel4-00022","xml-removed-camel4-00023","xml-removed-camel4-00024","xml-removed-camel4-00025","xml-removed-camel4-00026","xml-removed-camel4-00027","xml-removed-camel4-00028","xml-removed-camel4-00029","xml-removed-camel4-00030","xml-removed-camel4-00031","xml-removed-camel4-00032","xml-removed-camel4-00033","xml-removed-camel4-00034","xml-changedcomponent-camel4-00001","xml-changedcomponent-camel4-00002"]},{"name":"camel3/camel2","description":"This ruleset provides analysis with respect to the missing dependencies in Apache Camel 3 due to Java 11 adoption.","skipped":["component-changes-00019","java-dsl-changes-00001","java-generic-information-00000","java-generic-information-00001","java-generic-information-00002","java-generic-information-00004","java-generic-information-00005","java-generic-information-00006","java-generic-information-00008","java-generic-information-00009","java-generic-information-00010","java-generic-information-00011","java-generic-information-00012","java-generic-information-00013","java-generic-information-00014","java-generic-information-00015","java-generic-information-00016","java-generic-information-00017","java-generic-information-00018","java-generic-information-00019","java-generic-information-00021","java-generic-information-00022","java-generic-information-00023","java-generic-information-00024","java-generic-information-00025","java-generic-information-00026","java-generic-information-00027","java-generic-information-00028","java-generic-information-00029","java-generic-information-00030","java-generic-information-00031","java-generic-information-00032","java-generic-information-00033","java-generic-information-00045","java-generic-information-00046","java-generic-information-00047","java-generic-information-00048","java-generic-information-00049","java-generic-information-00050","java-generic-information-00051","java-generic-information-00052","java-multiple-camelcontexts-per-application-not-supported-00000","java-multiple-camelcontexts-per-application-not-supported-00001","xml-dsl-changes-00001","xml-dsl-changes-00002","xml-dsl-changes-00003","xml-dsl-changes-00004","xml-dsl-changes-00005","xml-dsl-changes-00006","xml-dsl-changes-00007","xml-dsl-changes-00008","xml-dsl-changes-00009","xml-java-versions-00001","xml-java-versions-00002","xml-java-versions-00003","xml-moved-components-00012","xml-moved-components-00013","xml-moved-components-00014","xml-moved-components-00015","xml-removed-components-00000","xml-removed-components-00001","xml-removed-components-00002","xml-removed-components-00003","xml-removed-components-00004","xml-removed-components-00005","xml-removed-components-00006","xml-removed-components-00007","xml-removed-components-00008","xml-removed-components-00005-01","xml-removed-components-00007-01","xml-removed-components-00008-01","xml-renamed-components-00000","xml-renamed-components-00001","xml-renamed-components-00002","xml-renamed-components-00003","xml-renamed-components-00004","xml-renamed-components-00005","xml-renamed-components-00006","xml-renamed-components-00007","xml-renamed-components-00008","xml-renamed-components-00009","xml-renamed-components-00010","xml-renamed-components-00011","xml-renamed-components-00012","xml-renamed-components-00013","xml-renamed-components-00014","xml-renamed-components-00015","xml-renamed-components-00016","xml-renamed-components-00017","xml-renamed-components-00018","xml-renamed-components-000019","xml-renamed-components-000020","xml-renamed-components-00021","xml-renamed-components-00022","xml-renamed-components-000023","xml-renamed-components-000024","xml-renamed-components-00025","xml-renamed-components-00026","xml-renamed-components-000027","xml-renamed-components-000028","xml-renamed-components-000029"]},{"name":"discovery-rules","tags":["Java Source","Maven XML","EJB XML","Spring XML","JPA XML"],"unmatched":["discover-license","discover-properties-file","discover-manifest-file","windup-discover-web-configuration","hardcoded-ip-address"]},{"name":"droolsjbpm","description":"This ruleset provides help for migrating to a unified KIE (Knowledge Is Everything) API in the upgrade from version 5 to 6.","skipped":["kie-api-01000","kie-api-01001","kie-api-01002","kie-api-01003","kie-api-01004","kie-api-01005","kie-api-01006","kie-api-01007","kie-api-01008","kie-api-01009","kie-api-01010","kie-api-01011","kie-api-01012","kie-api-01013","kie-api-01014","kie-api-01015","kie-api-01016"]},{"name":"eap6/resin","description":"This ruleset provides analysis of Resin proprietary xml files that may require individual attention when migrating to JBoss EAP 6+.","skipped":["commonj-01000","commonj-04000","commonj-02000","commonj-03000","commonj-05000","commonj-06000","commonj-07000","xml-glassfish-02000","xml-glassfish-03000","java-ee-jaxrpc-00000","seam-java-00000","seam-java-00170","seam-java-00010","seam-java-00030","seam-java-00040","seam-java-00050","seam-java-00060","seam-java-00061","seam-java-00070","seam-java-00071","seam-java-00080","seam-java-00090","seam-java-00091","seam-java-00100","seam-java-00110","seam-java-00120","seam-java-00130","seam-java-00140","seam-java-00150","seam-java-00160","seam-java-00180","seam-java-00190","seam-java-00200","seam-java-00210","seam-java-00220","seam-java-00230","seam-java-00240","seam-java-00250","seam-java-00260","seam-java-00270","seam-ui-jsf-00001","seam-ui-jsf-00002","seam-ui-jsf-00001-01","seam-ui-jsf-01000","seam-ui-jsf-01001","seam-ui-jsf-01002","seam-ui-jsf-01003","seam-ui-jsf-01004","seam-ui-jsf-01005","seam-ui-jsf-01006","seam-ui-jsf-01007","seam-ui-jsf-01008","seam-ui-jsf-01009","seam-ui-jsf-01010","seam-ui-jsf-01011","seam-ui-jsf-01012","seam-ui-jsf-01013","seam-ui-jsf-01014","seam-ui-jsf-01015","seam-ui-jsf-01016","seam-ui-jsf-01017","seam-ui-jsf-01018","seam-ui-jsf-01019","seam-ui-jsf-01020","seam-ui-jsf-01021","seam-ui-jsf-01022","seam-ui-jsf-01023","seam-ui-jsf-01024","seam-ui-jsf-01025","seam-ui-jsf-01026","seam-ui-jsf-01027","seam-ui-jsf-01028","seam-ui-jsf-01029","xml-webservices-01000","xml-webservices-02000","xml-webservices-03000","xml-webservices-04000","xml-webservices-05000","xml-webservices-07000","xml-webservices-08000","xml-webservices-09000","xml-webservices-10000","xml-webservices-06000","xml-webservices-06001","eap4-eap6-25000","eap4-eap6-26000","eap4-eap6-27000","eap4-eap6-28000","eap4-eap6-29000","eap4-eap6-30000","eap4-eap6-31000","eap4-eap6-32000","eap4-eap6-33000","eap4-eap6-34000","eap4-eap6-35000","eap4-eap6-36000","eap4-eap6-37000","eap4-eap6-38000","eap4-eap6-39000","eap4-eap6-40000","eap4-eap6-41000","eap4-eap6-42000","jboss-eap5-java-01000","jboss-eap5-java-02000","jboss-eap5-java-04000","jboss-eap5-java-05000","jboss-eap5-java-06000","jboss-eap5-java-07000","jboss-eap5-java-08000","jboss-eap5-java-08100","jboss-eap5-java-08200","jboss-eap5-java-08300","jboss-eap5-java-08400","jboss-eap5-java-08500","jboss-eap5-java-08600","jboss-eap5-java-08700","jboss-eap5-java-08800","jboss-eap5-java-08900","jboss-eap5-java-09000","jboss-eap5-java-09100","jboss-eap5-xml-01000","jboss-eap5-xml-03000","jboss-eap5-xml-05000","jboss-eap5-xml-06000","jboss-eap5-xml-07000","jboss-eap5-xml-08000","jboss-eap5-xml-09000","jboss-eap5-7-xml-10000","jboss-eap5-xml-11000","jboss-eap5-xml-12000","jboss-eap5-xml-13000","jboss-eap5-xml-16000","jboss-eap5-xml-17000","jboss-eap5-xml-18000","jboss-eap5-xml-20000","jboss-eap5-xml-14000","resteasy-eap5-000001","jotm-00001","jrun-catchall-00000","jrun-catchall-00001","xml-jrun-01000","xml-jrun-02000","jsp-01000","log4j-02000","log4j-01000","log4j-03000","xml-orion-01000","xml-orion-02000","xml-orion-03000","xml-resin-01000","environment-dependent-calls-03500","environment-dependent-calls-01000","environment-dependent-calls-02000","environment-dependent-calls-03000","environment-dependent-calls-04000","environment-dependent-calls-04001","environment-dependent-calls-05000","generic-catchall-00000","generic-catchall-00001","generic-catchall-00002","generic-catchall-00003","generic-catchall-00100","generic-catchall-00200","generic-catchall-00300","generic-catchall-00400","generic-catchall-00500","generic-catchall-00600","generic-catchall-00700","generic-catchall-00900","weblogic-catchall-01000","weblogic-catchall-02000","weblogic-catchall-03000","weblogic-catchall-06000","weblogic-catchall-06500","weblogic-ejb-01000","weblogic-ejb-02000","weblogic-ejb-03000","weblogic-ejb-04000","weblogic-jms-00000","weblogic-jms-01000","weblogic-jms-02000","weblogic-jms-03000","weblogic-jms-04000","weblogic-jms-05000","weblogic-jms-06000","weblogic-jms-07000","weblogic-jms-08000","weblogic-services-01000","weblogic-services-02000","weblogic-services-03000","weblogic-webapp-01000","weblogic-webapp-02000","weblogic-webapp-03000","weblogic-webapp-04000","weblogic-webapp-05000","weblogic-webapp-06000","weblogic-webapp-07000","weblogic-webapp-08000","weblogic-webapp-09000","weblogic-webservices-01000","weblogic-webservices-02000","weblogic-webservices-03000","weblogic-webservices-04000","weblogic-webservices-05000","weblogic-webservices-06000","weblogic-webservices-07000","weblogic-xml-descriptor-01000","weblogic-xml-descriptor-02000","weblogic-xml-descriptor-07000","weblogic-xml-descriptor-08000","weblogic-xml-descriptor-09000","weblogic-xml-descriptor-11000","weblogic-xml-descriptor-12000","weblogic-xml-descriptor-14000","weblogic-xml-descriptor-15000","weblogic-xml-descriptor-16000","weblogic-xml-descriptor-17000","weblogic-xml-descriptor-18000","weblogic-xml-descriptor-03000","weblogic-xml-descriptor-04000","weblogic-xml-descriptor-06001","weblogic-xml-descriptor-10000","weblogic-xml-descriptor-19000","weblogic-01000","weblogic-02000","weblogic-03000","weblogic-04000","weblogic-05000","weblogic-06000","weblogic-07000","weblogic-08000","weblogic-09000","weblogic-10000","weblogic-11000","weblogic-12000","weblogic-13000","weblogic-15000","weblogic-016000","weblogic-017000","websphere-catchall-db2-00000","websphere-catchall-00000","websphere-catchall-00001","websphere-jms-00000","websphere-jms-01000","websphere-jms-02000","websphere-jms-02500","websphere-jms-03000","websphere-jms-04000","websphere-mq-00000","websphere-mq-01000","websphere-mq-02000","websphere-mqe-00000","websphere-mqe-01000","websphere-mqe-02000","websphere-mqe-03000","websphere-mqe-04000","websphere-other-01000","websphere-other-02000","websphere-xml-01000","websphere-xml-02000","websphere-xml-07000","websphere-xml-08000","websphere-xml-09000","websphere-xml-03500","websphere-xml-06000"]},{"name":"eap7/websphere","description":"Provides analysis of WebSphere proprietary classes and constructs that may require individual attention when migrating to JBoss EAP 7+.","unmatched":["maven-javax-to-jakarta-00002","maven-javax-to-jakarta-00004","maven-javax-to-jakarta-00001","maven-javax-to-jakarta-00005","maven-javax-to-jakarta-00006","maven-javax-to-jakarta-00011","maven-javax-to-jakarta-00010","maven-javax-to-jakarta-00008","maven-javax-to-jakarta-00007","maven-javax-to-jakarta-00003","maven-javax-to-jakarta-00013","maven-javax-to-jakarta-00016","maven-javax-to-jakarta-00017","maven-javax-to-jakarta-00015","maven-javax-to-jakarta-00014","maven-javax-to-jakarta-00012"],"skipped":["websphere-jms-eap7-00000","websphere-jms-eap7-01000","websphere-jms-eap7-02000","websphere-jms-eap7-02500","websphere-jms-eap7-03000","websphere-jms-eap7-04000","websphere-mq-eap7-00000","websphere-mq-eap7-01000","websphere-mq-eap7-02000","websphere-mqe-eap7-00000","websphere-mqe-eap7-01000","websphere-mqe-eap7-02000","websphere-mqe-eap7-03000","websphere-mqe-eap7-04000","websphere-other-eap7-01000","websphere-other-eap7-02000","eap7-websphere-xml-01000","eap7-websphere-xml-02000","eap7-websphere-xml-07000","eap7-websphere-xml-08000","eap7-websphere-xml-09000","eap7-websphere-xml-03500","eap7-websphere-xml-06000","jboss-eap4and5to6and7-java-01000","jboss-eap4and5to6and7-java-02000","jboss-eap4and5to6and7-java-03000","jboss-eap4and5to6and7-xml-01000","jboss-eap4and5to6and7-xml-02000","jboss-eap4and5to6and7-xml-03000","jboss-eap4and5to6and7-xml-04000","jboss-eap4and5to6and7-xml-05000","jboss-eap4and5to6and7-xml-06000","jboss-eap4and5to6and7-xml-07000","base64-01000","jaxrpc-00000","jboss-eap5-7-java-02000","jboss-eap5-7-java-03000","jboss-eap5-7-java-05000","jboss-eap5-7-java-06000","jboss-eap5-7-java-07000","jboss-eap5-7-java-08000","jboss-eap5-7-java-08100","jboss-eap5-7-java-08200","jboss-eap5-7-java-08300","jboss-eap5-7-java-08400","jboss-eap5-7-java-08500","jboss-eap5-7-java-08600","jboss-eap5-7-java-08700","jboss-eap5-7-java-08800","jboss-eap5-7-java-08900","jboss-eap5-7-java-09000","jboss-eap5-7-java-09100","jboss-eap5-7-xml-01000","jboss-eap5-7-xml-10000","jboss-eap5-7-xml-13000","jboss-eap5-7-xml-16000","jboss-eap5-7-xml-14000","jboss-eap5and6to7-java-01000","jboss-eap5and6to7-java-02000","jboss-eap5and6to7-java-04000","jboss-eap5and6to7-java-08000","jboss-eap5and6to7-java-03000","jboss-eap5and6to7-java-05000","jboss-eap5and6to7-java-06000","jboss-eap5and6to7-java-07000","jboss-eap5and6to7-java-09000","jboss-eap5and6to7-xml-05000","jboss-eap5and6to7-xml-06000","jboss-eap5and6to7-xml-07000","jboss-eap5and6to7-xml-09000","jboss-eap5and6to7-xml-12000","jboss-eap5and6to7-xml-17000","jboss-eap5and6to7-xml-18000","jboss-eap5and6to7-xml-34000","jboss-eap5and6to7-xml-37000","jboss-eap5and6to7-xml-31000","jboss-eap5and6to7-xml-31500","jboss-eap5and6to7-xml-32000","jboss-eap5and6to7-xml-33000","jboss-eap5and6to7-xml-38000","jboss-eap5and6to7-xml-38001","jboss-eap5and6to7-xml-38002","jboss-eap5and6to7-xml-38003","jboss-eap5and6to7-xml-38004","jboss-eap5and6to7-xml-38005","jboss-eap5and6to7-xml-38006","jboss-eap5and6to7-xml-38007","jboss-eap5and6to7-xml-39000","jboss-eap5and6to7-xml-40000","resteasy-eap5and6to7-000018","eap6-xml-05000","eap6-xml-06000","eap6-08000","eap6-08001","eap6-08002","eap6-11000","eap6-12000","hibernate4-xml-00001","hibernate4-xml-00002","hibernate4-xml-00003","hibernate4-xml-00004","hibernate4-xml-00005","hibernate4-00001","hibernate4-00002","hibernate4-00003","hibernate4-00004","hibernate4-00005","hibernate4-00006","hibernate4-00007","hibernate4-00008","hibernate4-00009","hibernate4-00010","hibernate4-00011","hibernate4-00012","hibernate4-00013","hibernate4-00014","hibernate4-00015","hibernate4-00016","hibernate4-00017","hibernate4-00018","hibernate4-00021","hibernate4-00022","hibernate4-00023","hibernate4-00024","hibernate4-00025","hibernate4-00026","hibernate4-00027","hibernate4-00028","hibernate4-00030","hibernate4-00031","hibernate4-00032","hibernate4-00033","hibernate4-00034","hibernate4-00035","hibernate4-00036","hibernate4-00037","hibernate4-00038","hibernate4-00039","hibernate4-00040","hsearch-00000","hsearch-00001","hsearch-00002","hsearch-00003","hsearch-00004","hsearch-00005","hsearch-00006","hsearch-00007","hsearch-00008","hsearch-00009","hsearch-00010","hsearch-00011","hsearch-00100","hsearch-00101","hsearch-00103","hsearch-00104","hsearch-00106","hsearch-00107","hsearch-00108","hsearch-00109","hsearch-00110","hsearch-00111","hsearch-00112","hsearch-00113","hsearch-00114","hsearch-00115","hsearch-00116","hsearch-00117","hsearch-00118","hsearch-00119","hsearch-00200","hsearch-00201","hsearch-00210","hsearch-00211","hsearch-00213","hsearch-00214","hsearch-00215","hsearch-00216","hsearch-00217","hsearch-00218","hsearch-00219","hsearch-00220","hsearch-00221","hsearch-00222","hsearch-00224","hsearch-00225","hsearch-00226","hsearch-00227","hsearch-00228","hsearch-00229","hsearch-00230","hsearch-00231","hsearch-00232","hsearch-00233","hsearch-00234","hsearch-00235","hsearch-00236","hsearch-00237","hsearch-00238","hsearch-00239","hsearch-00240","jax-ws-00000","resteasy-eap6-000001","resteasy-eap6-000002","resteasy-eap6-000003","resteasy-eap6-000004","resteasy-eap6-000005","resteasy-eap6-000006","resteasy-eap6-000007","resteasy-eap6-000008","resteasy-eap6-000009","resteasy-eap6-000010","resteasy-eap6-000011","resteasy-eap6-000012","resteasy-eap6-000013","resteasy-eap6-000014","resteasy-eap6-000015","resteasy-eap6-000017","resteasy-eap6-000019","resteasy-eap6-000020","resteasy-eap6-000021","resteasy-eap6-000022","resteasy-eap6-000023","resteasy-eap6-000024","resteasy-eap6-000025","resteasy-eap6-000029","resteasy-eap6-000030","resteasy-eap6-000032","resteasy-eap6-000101","resteasy-eap6-000103","resteasy-eap6-000104","resteasy-eap6-000105","resteasy-eap6-000106","resteasy-eap6-000107","resteasy-eap6-000118","resteasy-eap6-000119","resteasy-eap6-000120","resteasy-eap6-000121","resteasy-eap6-000122","resteasy-eap6-000123","resteasy-eap6-000125","resteasy-eap6-000126","resteasy-eap6-000127","resteasy-eap6-000128","resteasy-eap6-000129","resteasy-eap6-000130","resteasy-eap6-000131","resteasy-eap6-000140","resteasy-eap6-000141","resteasy-eap6-000142","ws-security-00000","ws-security-00001","ws-security-00002","hibernate50-51-00000","hibernate50-51-00100","hibernate51-53-00001","hibernate51-53-00100","hibernate51-53-00300","hibernate51-53-00400","hibernate51-53-00401","hibernate51-53-00402","hibernate51-53-00403","hibernate51-53-00404","hibernate51-53-00405","hibernate51-53-00406","hibernate51-53-00407","hibernate51-53-00500","hibernate51-53-00600","hibernate51-53-00700","hibernate51-53-00701","hibernate51-53-00702","hibernate51-53-00800","hibernate51-53-01000","hibernate51-53-01001","hibernate51-53-01100","hibernate51-53-01200","picketlink25-00000","resteasy30-36-00001","deprecated-singletonpolicy-00001","maven-artemis-jms-client-00001","maven-jboss-rmi-api_1.0_spec-00001","move-to-microprofile-rest-client-1.3-00001","singleton-sessionbean-00001","microprofile_removed_from_eap-00001","microprofile_removed_from_eap-00002","microprofile_removed_from_eap-00003","microprofile_removed_from_eap-00004","microprofile_removed_from_eap-00001-01","embedded-framework-libraries-01000","embedded-framework-libraries-02000","embedded-framework-libraries-04000","embedded-framework-libraries-05000","embedded-framework-libraries-06000","weblogic-jms-eap7-00000","weblogic-jms-eap7-01000","weblogic-jms-eap7-02000","weblogic-jms-eap7-03000","weblogic-jms-eap7-04000","weblogic-jms-eap7-05000","weblogic-jms-eap7-06000","weblogic-jms-eap7-07000","weblogic-jms-eap7-08000","weblogic-services-eap7-01000","weblogic-services-eap7-02000","weblogic-services-eap7-03000","weblogic-webapp-eap7-01000","weblogic-webapp-eap7-02000","weblogic-webapp-eap7-03000","weblogic-webapp-eap7-04000","weblogic-webapp-eap7-05000","weblogic-webapp-eap7-06000","weblogic-webapp-eap7-07000","weblogic-webapp-eap7-08000","weblogic-webapp-eap7-09000","weblogic-webservices-eap7-01000","weblogic-webservices-eap7-02000","weblogic-webservices-eap7-03000","weblogic-webservices-eap7-04000","weblogic-webservices-eap7-05000","weblogic-webservices-eap7-06000","weblogic-webservices-07000","weblogic-xml-descriptor-eap7-01000","weblogic-xml-descriptor-eap7-02000","weblogic-xml-descriptor-eap7-07000","weblogic-xml-descriptor-eap7-08000","weblogic-xml-descriptor-eap7-09000","weblogic-xml-descriptor-eap7-11000","weblogic-xml-descriptor-eap7-12000","weblogic-xml-descriptor-eap7-14000","weblogic-xml-descriptor-eap7-15000","weblogic-xml-descriptor-eap7-16000","weblogic-xml-descriptor-eap7-17000","weblogic-xml-descriptor-eap7-18000","weblogic-xml-descriptor-eap7-03000","weblogic-xml-descriptor-eap7-04000","weblogic-xml-descriptor-eap7-06001","weblogic-xml-descriptor-eap7-10000","weblogic-xml-descriptor-19000","weblogic-eap7-01000","weblogic-eap7-02000","weblogic-eap7-03000","weblogic-eap7-04000","weblogic-eap7-05000","weblogic-eap7-06000","weblogic-eap7-07000","weblogic-eap7-08000","weblogic-eap7-09000","weblogic-eap7-10000","weblogic-eap7-11000","weblogic-eap7-12000","weblogic-eap7-13000","weblogic-eap7-15000","weblogic-eap7-016000","weblogic-eap7-017000"]},{"name":"eap8/eap7","description":"This ruleset provides rules to support the migration to hibernate search 6.0. Developed under WINDUPRULE-900","violations":{"javaee-to-jakarta-namespaces-00001":{"description":"Replace the Java EE namespace, schemaLocation and version with the Jakarta equivalent\nReplace `http://xmlns.jcp.org/xml/ns/javaee` with `https://jakarta.ee/xml/ns/jakartaee` and change the schema version number","category":"mandatory","labels":["konveyor.io/target=jakarta-ee9+","konveyor.io/target=jakarta-ee","konveyor.io/target=eap8","konveyor.io/target=eap","konveyor.io/source"],"incidents":[{"uri":"file:///opt/input/source/src/main/webapp/WEB-INF/beans.xml","message":"Replace `http://xmlns.jcp.org/xml/ns/javaee` with `https://jakarta.ee/xml/ns/jakartaee` and change the schema version number","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003c!-- Marker file indicating CDI should be enabled --\u003e\n 19  \u003cbeans xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 20      xsi:schemaLocation=\"\n 21        http://xmlns.jcp.org/xml/ns/javaee\n 22        http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd\"\n 23      bean-discovery-mode=\"all\"\u003e\n 24  \u003c/beans\u003e\n","lineNumber":19,"variables":{"matchingText":"http://xmlns.jcp.org/xml/ns/javaee"}},{"uri":"file:///opt/input/source/src/main/webapp/WEB-INF/beans.xml","message":"Replace `http://xmlns.jcp.org/xml/ns/javaee` with `https://jakarta.ee/xml/ns/jakartaee` and change the schema version number","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003c!-- Marker file indicating CDI should be enabled --\u003e\n 19  \u003cbeans xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 20      xsi:schemaLocation=\"\n 21        http://xmlns.jcp.org/xml/ns/javaee\n 22        http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd\"\n 23      bean-discovery-mode=\"all\"\u003e\n 24  \u003c/beans\u003e\n","lineNumber":21,"variables":{"matchingText":"http://xmlns.jcp.org/xml/ns/javaee"}},{"uri":"file:///opt/input/source/src/main/webapp/WEB-INF/beans.xml","message":"Replace `http://xmlns.jcp.org/xml/ns/javaee` with `https://jakarta.ee/xml/ns/jakartaee` and change the schema version number","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003c!-- Marker file indicating CDI should be enabled --\u003e\n 19  \u003cbeans xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 20      xsi:schemaLocation=\"\n 21        http://xmlns.jcp.org/xml/ns/javaee\n 22        http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd\"\n 23      bean-discovery-mode=\"all\"\u003e\n 24  \u003c/beans\u003e\n","lineNumber":22,"variables":{"matchingText":"http://xmlns.jcp.org/xml/ns/javaee"}},{"uri":"file:///opt/input/source/src/main/webapp/WEB-INF/faces-config.xml","message":"Replace `http://xmlns.jcp.org/xml/ns/javaee` with `https://jakarta.ee/xml/ns/jakartaee` and change the schema version number","codeSnip":"  1  \u003c?xml version=\"1.0\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003c!-- This file is not required if you don't need any extra configuration. --\u003e\n 19  \u003cfaces-config version=\"2.2\" xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n 20      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 21      xsi:schemaLocation=\"\n 22          http://xmlns.jcp.org/xml/ns/javaee\n 23          http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd\"\u003e\n 24  \n 25      \u003c!-- This descriptor activates the JSF Servlet --\u003e\n 26  \n 27      \u003c!-- Write your navigation rules here. You are encouraged to use CDI\n 28          for creating @Named managed beans. --\u003e\n 29  \n 30  \u003c/faces-config\u003e\n","lineNumber":19,"variables":{"matchingText":"http://xmlns.jcp.org/xml/ns/javaee"}},{"uri":"file:///opt/input/source/src/main/webapp/WEB-INF/faces-config.xml","message":"Replace `http://xmlns.jcp.org/xml/ns/javaee` with `https://jakarta.ee/xml/ns/jakartaee` and change the schema version number","codeSnip":"  1  \u003c?xml version=\"1.0\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003c!-- This file is not required if you don't need any extra configuration. --\u003e\n 19  \u003cfaces-config version=\"2.2\" xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n 20      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 21      xsi:schemaLocation=\"\n 22          http://xmlns.jcp.org/xml/ns/javaee\n 23          http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd\"\u003e\n 24  \n 25      \u003c!-- This descriptor activates the JSF Servlet --\u003e\n 26  \n 27      \u003c!-- Write your navigation rules here. You are encouraged to use CDI\n 28          for creating @Named managed beans. --\u003e\n 29  \n 30  \u003c/faces-config\u003e\n","lineNumber":22,"variables":{"matchingText":"http://xmlns.jcp.org/xml/ns/javaee"}},{"uri":"file:///opt/input/source/src/main/webapp/WEB-INF/faces-config.xml","message":"Replace `http://xmlns.jcp.org/xml/ns/javaee` with `https://jakarta.ee/xml/ns/jakartaee` and change the schema version number","codeSnip":"  1  \u003c?xml version=\"1.0\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003c!-- This file is not required if you don't need any extra configuration. --\u003e\n 19  \u003cfaces-config version=\"2.2\" xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n 20      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 21      xsi:schemaLocation=\"\n 22          http://xmlns.jcp.org/xml/ns/javaee\n 23          http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd\"\u003e\n 24  \n 25      \u003c!-- This descriptor activates the JSF Servlet --\u003e\n 26  \n 27      \u003c!-- Write your navigation rules here. You are encouraged to use CDI\n 28          for creating @Named managed beans. --\u003e\n 29  \n 30  \u003c/faces-config\u003e\n","lineNumber":23,"variables":{"matchingText":"http://xmlns.jcp.org/xml/ns/javaee"}}],"links":[{"url":"https://jakarta.ee/xml/ns/jakartaee/#10","title":"Jakarta EE XML Schemas"}],"Extras":null,"effort":1},"javaee-to-jakarta-namespaces-00002":{"description":"Replace the Java EE persistence namespace, schemaLocation and version with the Jakarta equivalent\nReplace `http://xmlns.jcp.org/xml/ns/persistence` with `https://jakarta.ee/xml/ns/persistence` and change the schema version number","category":"mandatory","labels":["konveyor.io/target=jakarta-ee9+","konveyor.io/target=jakarta-ee","konveyor.io/target=eap8","konveyor.io/target=eap","konveyor.io/source"],"incidents":[{"uri":"file:///opt/input/source/src/main/resources/META-INF/persistence.xml","message":"Replace `http://xmlns.jcp.org/xml/ns/persistence` with `https://jakarta.ee/xml/ns/persistence` and change the schema version number","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cpersistence version=\"2.1\"\n 19     xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 20     xsi:schemaLocation=\"\n 21          http://xmlns.jcp.org/xml/ns/persistence\n 22          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\u003e\n 23     \u003cpersistence-unit name=\"primary\"\u003e\n 24        \u003c!-- If you are running in a production environment, add a managed\n 25           data source, this example data source is just for development and testing! --\u003e\n 26        \u003c!-- The datasource is deployed as WEB-INF/kitchensink-quickstart-ds.xml, you\n 27           can find it in the source at src/main/webapp/WEB-INF/kitchensink-quickstart-ds.xml --\u003e\n 28        \u003cjta-data-source\u003ejava:jboss/datasources/KitchensinkQuickstartDS\u003c/jta-data-source\u003e\n 29        \u003cproperties\u003e\n 30           \u003c!-- Properties for Hibernate --\u003e\n 31           \u003cproperty name=\"hibernate.hbm2ddl.auto\" value=\"create-drop\" /\u003e\n 32           \u003cproperty name=\"hibernate.show_sql\" value=\"false\" /\u003e\n 33        \u003c/properties\u003e\n 34     \u003c/persistence-unit\u003e\n 35  \u003c/persistence\u003e\n","lineNumber":19,"variables":{"matchingText":"http://xmlns.jcp.org/xml/ns/persistence"}},{"uri":"file:///opt/input/source/src/main/resources/META-INF/persistence.xml","message":"Replace `http://xmlns.jcp.org/xml/ns/persistence` with `https://jakarta.ee/xml/ns/persistence` and change the schema version number","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cpersistence version=\"2.1\"\n 19     xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 20     xsi:schemaLocation=\"\n 21          http://xmlns.jcp.org/xml/ns/persistence\n 22          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\u003e\n 23     \u003cpersistence-unit name=\"primary\"\u003e\n 24        \u003c!-- If you are running in a production environment, add a managed\n 25           data source, this example data source is just for development and testing! --\u003e\n 26        \u003c!-- The datasource is deployed as WEB-INF/kitchensink-quickstart-ds.xml, you\n 27           can find it in the source at src/main/webapp/WEB-INF/kitchensink-quickstart-ds.xml --\u003e\n 28        \u003cjta-data-source\u003ejava:jboss/datasources/KitchensinkQuickstartDS\u003c/jta-data-source\u003e\n 29        \u003cproperties\u003e\n 30           \u003c!-- Properties for Hibernate --\u003e\n 31           \u003cproperty name=\"hibernate.hbm2ddl.auto\" value=\"create-drop\" /\u003e\n 32           \u003cproperty name=\"hibernate.show_sql\" value=\"false\" /\u003e\n 33        \u003c/properties\u003e\n 34     \u003c/persistence-unit\u003e\n 35  \u003c/persistence\u003e\n","lineNumber":21,"variables":{"matchingText":"http://xmlns.jcp.org/xml/ns/persistence"}},{"uri":"file:///opt/input/source/src/main/resources/META-INF/persistence.xml","message":"Replace `http://xmlns.jcp.org/xml/ns/persistence` with `https://jakarta.ee/xml/ns/persistence` and change the schema version number","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cpersistence version=\"2.1\"\n 19     xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 20     xsi:schemaLocation=\"\n 21          http://xmlns.jcp.org/xml/ns/persistence\n 22          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\u003e\n 23     \u003cpersistence-unit name=\"primary\"\u003e\n 24        \u003c!-- If you are running in a production environment, add a managed\n 25           data source, this example data source is just for development and testing! --\u003e\n 26        \u003c!-- The datasource is deployed as WEB-INF/kitchensink-quickstart-ds.xml, you\n 27           can find it in the source at src/main/webapp/WEB-INF/kitchensink-quickstart-ds.xml --\u003e\n 28        \u003cjta-data-source\u003ejava:jboss/datasources/KitchensinkQuickstartDS\u003c/jta-data-source\u003e\n 29        \u003cproperties\u003e\n 30           \u003c!-- Properties for Hibernate --\u003e\n 31           \u003cproperty name=\"hibernate.hbm2ddl.auto\" value=\"create-drop\" /\u003e\n 32           \u003cproperty name=\"hibernate.show_sql\" value=\"false\" /\u003e\n 33        \u003c/properties\u003e\n 34     \u003c/persistence-unit\u003e\n 35  \u003c/persistence\u003e\n","lineNumber":22,"variables":{"matchingText":"http://xmlns.jcp.org/xml/ns/persistence"}}],"links":[{"url":"https://jakarta.ee/xml/ns/persistence/#3","title":"Jakarta Persistence XML Schemas"}],"Extras":null,"effort":1},"javaee-to-jakarta-namespaces-00006":{"description":"Replace the Java EE XSD with the Jakarta equivalent\nReplace `beans_1_1.xsd` with `beans_3_0.xsd` and update the version attribute to `\"3.0\"`","category":"mandatory","labels":["konveyor.io/target=jakarta-ee9+","konveyor.io/target=jakarta-ee","konveyor.io/target=eap8","konveyor.io/target=eap","konveyor.io/source"],"incidents":[{"uri":"file:///opt/input/source/src/main/webapp/WEB-INF/beans.xml","message":"Replace `beans_1_1.xsd` with `beans_3_0.xsd` and update the version attribute to `\"3.0\"`","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003c!-- Marker file indicating CDI should be enabled --\u003e\n 19  \u003cbeans xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 20      xsi:schemaLocation=\"\n 21        http://xmlns.jcp.org/xml/ns/javaee\n 22        http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd\"\n 23      bean-discovery-mode=\"all\"\u003e\n 24  \u003c/beans\u003e\n","lineNumber":22,"variables":{"matchingText":"beans_1_1.xsd"}}],"links":[{"url":"https://jakarta.ee/xml/ns/jakartaee/#9","title":"Jakarta XML Schemas"}],"Extras":null,"effort":1},"javaee-to-jakarta-namespaces-00021":{"description":"Replace the Java EE XSD with the Jakarta equivalent\nReplace `web-facesconfig_2_2.xsd` with `web-facesconfig_3_0.xsd` and update the version attribute to `\"3.0\"`","category":"mandatory","labels":["konveyor.io/target=jakarta-ee9+","konveyor.io/target=jakarta-ee","konveyor.io/target=eap8","konveyor.io/target=eap","konveyor.io/source"],"incidents":[{"uri":"file:///opt/input/source/src/main/webapp/WEB-INF/faces-config.xml","message":"Replace `web-facesconfig_2_2.xsd` with `web-facesconfig_3_0.xsd` and update the version attribute to `\"3.0\"`","codeSnip":"  1  \u003c?xml version=\"1.0\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003c!-- This file is not required if you don't need any extra configuration. --\u003e\n 19  \u003cfaces-config version=\"2.2\" xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n 20      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 21      xsi:schemaLocation=\"\n 22          http://xmlns.jcp.org/xml/ns/javaee\n 23          http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd\"\u003e\n 24  \n 25      \u003c!-- This descriptor activates the JSF Servlet --\u003e\n 26  \n 27      \u003c!-- Write your navigation rules here. You are encouraged to use CDI\n 28          for creating @Named managed beans. --\u003e\n 29  \n 30  \u003c/faces-config\u003e\n","lineNumber":23,"variables":{"matchingText":"web-facesconfig_2_2.xsd"}}],"links":[{"url":"https://jakarta.ee/xml/ns/jakartaee/#9","title":"Jakarta XML Schemas"}],"Extras":null,"effort":1},"javaee-to-jakarta-namespaces-00030":{"description":"Replace the Java EE XSD with the Jakarta equivalent\nReplace `persistence_2_1.xsd` with `persistence_3_0.xsd` and update the version attribute to `\"3.0\"`","category":"mandatory","labels":["konveyor.io/target=jakarta-ee9+","konveyor.io/target=jakarta-ee","konveyor.io/target=eap8","konveyor.io/target=eap","konveyor.io/source"],"incidents":[{"uri":"file:///opt/input/source/src/main/resources/META-INF/persistence.xml","message":"Replace `persistence_2_1.xsd` with `persistence_3_0.xsd` and update the version attribute to `\"3.0\"`","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cpersistence version=\"2.1\"\n 19     xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 20     xsi:schemaLocation=\"\n 21          http://xmlns.jcp.org/xml/ns/persistence\n 22          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\u003e\n 23     \u003cpersistence-unit name=\"primary\"\u003e\n 24        \u003c!-- If you are running in a production environment, add a managed\n 25           data source, this example data source is just for development and testing! --\u003e\n 26        \u003c!-- The datasource is deployed as WEB-INF/kitchensink-quickstart-ds.xml, you\n 27           can find it in the source at src/main/webapp/WEB-INF/kitchensink-quickstart-ds.xml --\u003e\n 28        \u003cjta-data-source\u003ejava:jboss/datasources/KitchensinkQuickstartDS\u003c/jta-data-source\u003e\n 29        \u003cproperties\u003e\n 30           \u003c!-- Properties for Hibernate --\u003e\n 31           \u003cproperty name=\"hibernate.hbm2ddl.auto\" value=\"create-drop\" /\u003e\n 32           \u003cproperty name=\"hibernate.show_sql\" value=\"false\" /\u003e\n 33        \u003c/properties\u003e\n 34     \u003c/persistence-unit\u003e\n 35  \u003c/persistence\u003e\n","lineNumber":22,"variables":{"matchingText":"persistence_2_1.xsd"}}],"links":[{"url":"https://jakarta.ee/xml/ns/jakartaee/#9","title":"Jakarta XML Schemas"}],"Extras":null,"effort":1},"javaee-to-jakarta-namespaces-00033":{"description":"Replace the Java EE version with the Jakarta equivalent\nIn the root tag, replace the `version` attribute value `2.1` with `3.0`","category":"mandatory","labels":["konveyor.io/target=jakarta-ee9+","konveyor.io/target=jakarta-ee","konveyor.io/target=eap8","konveyor.io/target=eap","konveyor.io/source"],"incidents":[{"uri":"file:///opt/input/source/src/main/resources/META-INF/persistence.xml","message":"In the root tag, replace the `version` attribute value `2.1` with `3.0`","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cpersistence version=\"2.1\"\n 19     xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 20     xsi:schemaLocation=\"\n 21          http://xmlns.jcp.org/xml/ns/persistence\n 22          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\u003e\n 23     \u003cpersistence-unit name=\"primary\"\u003e\n 24        \u003c!-- If you are running in a production environment, add a managed\n 25           data source, this example data source is just for development and testing! --\u003e\n 26        \u003c!-- The datasource is deployed as WEB-INF/kitchensink-quickstart-ds.xml, you\n 27           can find it in the source at src/main/webapp/WEB-INF/kitchensink-quickstart-ds.xml --\u003e\n 28        \u003cjta-data-source\u003ejava:jboss/datasources/KitchensinkQuickstartDS\u003c/jta-data-source\u003e\n 29        \u003cproperties\u003e\n 30           \u003c!-- Properties for Hibernate --\u003e\n 31           \u003cproperty name=\"hibernate.hbm2ddl.auto\" value=\"create-drop\" /\u003e\n 32           \u003cproperty name=\"hibernate.show_sql\" value=\"false\" /\u003e\n 33        \u003c/properties\u003e\n 34     \u003c/persistence-unit\u003e\n 35  \u003c/persistence\u003e\n","lineNumber":28,"variables":{"data":"persistence","innerText":"\n   \n      \n      \n      java:jboss/datasources/KitchensinkQuickstartDS\n      \n         \n         \n         \n      \n   \n","matchingXML":"\u003cpersistence-unit name=\"primary\"\u003e\u003c!-- If you are running in a production environment, add a managed\n         data source, this example data source is just for development and testing! --\u003e\u003c!-- The datasource is deployed as WEB-INF/kitchensink-quickstart-ds.xml, you\n         can find it in the source at src/main/webapp/WEB-INF/kitchensink-quickstart-ds.xml --\u003e\u003cjta-data-source\u003ejava:jboss/datasources/KitchensinkQuickstartDS\u003c/jta-data-source\u003e\u003cproperties\u003e\u003c!-- Properties for Hibernate --\u003e\u003cproperty name=\"hibernate.hbm2ddl.auto\" value=\"create-drop\"\u003e\u003c/property\u003e\u003cproperty name=\"hibernate.show_sql\" value=\"false\"\u003e\u003c/property\u003e\u003c/properties\u003e\u003c/persistence-unit\u003e"}},{"uri":"file:///opt/input/source/src/main/resources/META-INF/persistence.xml","message":"In the root tag, replace the `version` attribute value `2.1` with `3.0`","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cpersistence version=\"2.1\"\n 19     xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 20     xsi:schemaLocation=\"\n 21          http://xmlns.jcp.org/xml/ns/persistence\n 22          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\u003e\n 23     \u003cpersistence-unit name=\"primary\"\u003e\n 24        \u003c!-- If you are running in a production environment, add a managed\n 25           data source, this example data source is just for development and testing! --\u003e\n 26        \u003c!-- The datasource is deployed as WEB-INF/kitchensink-quickstart-ds.xml, you\n 27           can find it in the source at src/main/webapp/WEB-INF/kitchensink-quickstart-ds.xml --\u003e\n 28        \u003cjta-data-source\u003ejava:jboss/datasources/KitchensinkQuickstartDS\u003c/jta-data-source\u003e\n 29        \u003cproperties\u003e\n 30           \u003c!-- Properties for Hibernate --\u003e\n 31           \u003cproperty name=\"hibernate.hbm2ddl.auto\" value=\"create-drop\" /\u003e\n 32           \u003cproperty name=\"hibernate.show_sql\" value=\"false\" /\u003e\n 33        \u003c/properties\u003e\n 34     \u003c/persistence-unit\u003e\n 35  \u003c/persistence\u003e\n","lineNumber":18,"variables":{"matchingText":"version=\"2.1\""}}],"Extras":null,"effort":1},"javaee-to-jakarta-namespaces-00036":{"description":"Replace the Java EE version with the Jakarta equivalent\n`beans_2_0.xsd`: In the root tag, replace the `version` attribute value with `3.0`","category":"mandatory","labels":["konveyor.io/target=jakarta-ee9+","konveyor.io/target=jakarta-ee","konveyor.io/target=eap8","konveyor.io/target=eap","konveyor.io/source"],"incidents":[{"uri":"file:///opt/input/source/src/test/resources/META-INF/test-persistence.xml","message":"`beans_2_0.xsd`: In the root tag, replace the `version` attribute value with `3.0`","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cpersistence version=\"2.0\"\n 19     xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 20     xsi:schemaLocation=\"\n 21          http://java.sun.com/xml/ns/persistence\n 22          http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\"\u003e\n 23     \u003cpersistence-unit name=\"primary\"\u003e\n 24        \u003c!-- We use a different datasource for tests, so as to not overwrite\n 25           production data. This is an unmanaged data source, backed by H2, an in memory\n 26           database. Production applications should use a managed datasource. --\u003e\n 27        \u003c!-- The datasource is deployed as WEB-INF/test-ds.xml,\n 28           you can find it in the source at src/test/resources/test-ds.xml --\u003e\n 29        \u003cjta-data-source\u003ejava:jboss/datasources/KitchensinkQuickstartTestDS\u003c/jta-data-source\u003e\n 30        \u003cproperties\u003e\n 31           \u003c!-- Properties for Hibernate --\u003e\n 32           \u003cproperty name=\"hibernate.hbm2ddl.auto\" value=\"create-drop\" /\u003e\n 33           \u003cproperty name=\"hibernate.show_sql\" value=\"false\" /\u003e\n 34        \u003c/properties\u003e\n 35     \u003c/persistence-unit\u003e\n 36  \u003c/persistence\u003e\n","lineNumber":18,"variables":{"matchingText":"version=\"2.0\""}}],"Extras":null,"effort":1},"javaee-to-jakarta-namespaces-00048":{"description":"Replace the Java EE version with the Jakarta equivalent\n`web-facesconfig_2_2`: In the root tag, replace the `version` attribute value with `3.0`","category":"mandatory","labels":["konveyor.io/target=jakarta-ee9+","konveyor.io/target=jakarta-ee","konveyor.io/target=eap8","konveyor.io/target=eap","konveyor.io/source"],"incidents":[{"uri":"file:///opt/input/source/src/main/webapp/WEB-INF/faces-config.xml","message":"`web-facesconfig_2_2`: In the root tag, replace the `version` attribute value with `3.0`","variables":{"data":"faces-config","innerText":"\n\n    \n\n    \n\n","matchingXML":"\u003c!-- This descriptor activates the JSF Servlet --\u003e\u003c!-- Write your navigation rules here. You are encouraged to use CDI\n        for creating @Named managed beans. --\u003e"}},{"uri":"file:///opt/input/source/src/main/webapp/WEB-INF/faces-config.xml","message":"`web-facesconfig_2_2`: In the root tag, replace the `version` attribute value with `3.0`","codeSnip":"  1  \u003c?xml version=\"1.0\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003c!-- This file is not required if you don't need any extra configuration. --\u003e\n 19  \u003cfaces-config version=\"2.2\" xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n 20      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 21      xsi:schemaLocation=\"\n 22          http://xmlns.jcp.org/xml/ns/javaee\n 23          http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd\"\u003e\n 24  \n 25      \u003c!-- This descriptor activates the JSF Servlet --\u003e\n 26  \n 27      \u003c!-- Write your navigation rules here. You are encouraged to use CDI\n 28          for creating @Named managed beans. --\u003e\n 29  \n 30  \u003c/faces-config\u003e\n","lineNumber":19,"variables":{"matchingText":"version=\"2.2\""}}],"Extras":null,"effort":1},"javaee-to-jakarta-namespaces-00050":{"description":"Replace the Java EE version with the Jakarta equivalent\n`web-facelettaglibrary_2_2`: In the root tag, replace the `version` attribute value with `3.0`","category":"mandatory","labels":["konveyor.io/target=jakarta-ee9+","konveyor.io/target=jakarta-ee","konveyor.io/target=eap8","konveyor.io/target=eap","konveyor.io/source"],"incidents":[{"uri":"file:///opt/input/source/src/main/webapp/WEB-INF/faces-config.xml","message":"`web-facelettaglibrary_2_2`: In the root tag, replace the `version` attribute value with `3.0`","codeSnip":"  1  \u003c?xml version=\"1.0\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003c!-- This file is not required if you don't need any extra configuration. --\u003e\n 19  \u003cfaces-config version=\"2.2\" xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n 20      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 21      xsi:schemaLocation=\"\n 22          http://xmlns.jcp.org/xml/ns/javaee\n 23          http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd\"\u003e\n 24  \n 25      \u003c!-- This descriptor activates the JSF Servlet --\u003e\n 26  \n 27      \u003c!-- Write your navigation rules here. You are encouraged to use CDI\n 28          for creating @Named managed beans. --\u003e\n 29  \n 30  \u003c/faces-config\u003e\n","lineNumber":19,"variables":{"matchingText":"version=\"2.2\""}}],"Extras":null,"effort":1},"javaee-to-jakarta-namespaces-00052":{"description":"Replace the Java EE version with the Jakarta equivalent\n`web-jsptaglibrary_2_1`: In the root tag, replace the `version` attribute value with `3.0`","category":"mandatory","labels":["konveyor.io/target=jakarta-ee9+","konveyor.io/target=jakarta-ee","konveyor.io/target=eap8","konveyor.io/target=eap","konveyor.io/source"],"incidents":[{"uri":"file:///opt/input/source/src/main/resources/META-INF/persistence.xml","message":"`web-jsptaglibrary_2_1`: In the root tag, replace the `version` attribute value with `3.0`","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cpersistence version=\"2.1\"\n 19     xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 20     xsi:schemaLocation=\"\n 21          http://xmlns.jcp.org/xml/ns/persistence\n 22          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\u003e\n 23     \u003cpersistence-unit name=\"primary\"\u003e\n 24        \u003c!-- If you are running in a production environment, add a managed\n 25           data source, this example data source is just for development and testing! --\u003e\n 26        \u003c!-- The datasource is deployed as WEB-INF/kitchensink-quickstart-ds.xml, you\n 27           can find it in the source at src/main/webapp/WEB-INF/kitchensink-quickstart-ds.xml --\u003e\n 28        \u003cjta-data-source\u003ejava:jboss/datasources/KitchensinkQuickstartDS\u003c/jta-data-source\u003e\n 29        \u003cproperties\u003e\n 30           \u003c!-- Properties for Hibernate --\u003e\n 31           \u003cproperty name=\"hibernate.hbm2ddl.auto\" value=\"create-drop\" /\u003e\n 32           \u003cproperty name=\"hibernate.show_sql\" value=\"false\" /\u003e\n 33        \u003c/properties\u003e\n 34     \u003c/persistence-unit\u003e\n 35  \u003c/persistence\u003e\n","lineNumber":18,"variables":{"matchingText":"version=\"2.1\""}}],"Extras":null,"effort":1},"javaee-to-jakarta-namespaces-00053":{"description":"Replace the Java EE version with the Jakarta equivalent\n`validation-mapping-2.0`: In the root tag, replace the `version` attribute value with `3.0`","category":"mandatory","labels":["konveyor.io/target=jakarta-ee9+","konveyor.io/target=jakarta-ee","konveyor.io/target=eap8","konveyor.io/target=eap","konveyor.io/source"],"incidents":[{"uri":"file:///opt/input/source/src/test/resources/META-INF/test-persistence.xml","message":"`validation-mapping-2.0`: In the root tag, replace the `version` attribute value with `3.0`","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cpersistence version=\"2.0\"\n 19     xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 20     xsi:schemaLocation=\"\n 21          http://java.sun.com/xml/ns/persistence\n 22          http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\"\u003e\n 23     \u003cpersistence-unit name=\"primary\"\u003e\n 24        \u003c!-- We use a different datasource for tests, so as to not overwrite\n 25           production data. This is an unmanaged data source, backed by H2, an in memory\n 26           database. Production applications should use a managed datasource. --\u003e\n 27        \u003c!-- The datasource is deployed as WEB-INF/test-ds.xml,\n 28           you can find it in the source at src/test/resources/test-ds.xml --\u003e\n 29        \u003cjta-data-source\u003ejava:jboss/datasources/KitchensinkQuickstartTestDS\u003c/jta-data-source\u003e\n 30        \u003cproperties\u003e\n 31           \u003c!-- Properties for Hibernate --\u003e\n 32           \u003cproperty name=\"hibernate.hbm2ddl.auto\" value=\"create-drop\" /\u003e\n 33           \u003cproperty name=\"hibernate.show_sql\" value=\"false\" /\u003e\n 34        \u003c/properties\u003e\n 35     \u003c/persistence-unit\u003e\n 36  \u003c/persistence\u003e\n","lineNumber":18,"variables":{"matchingText":"version=\"2.0\""}}],"Extras":null,"effort":1},"javaee-to-jakarta-namespaces-00054":{"description":"Replace the Java EE version with the Jakarta equivalent\n`validation-configuration-2.0`: In the root tag, replace the `version` attribute value with `3.0`","category":"mandatory","labels":["konveyor.io/target=jakarta-ee9+","konveyor.io/target=jakarta-ee","konveyor.io/target=eap8","konveyor.io/target=eap","konveyor.io/source"],"incidents":[{"uri":"file:///opt/input/source/src/test/resources/META-INF/test-persistence.xml","message":"`validation-configuration-2.0`: In the root tag, replace the `version` attribute value with `3.0`","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cpersistence version=\"2.0\"\n 19     xmlns=\"http://java.sun.com/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 20     xsi:schemaLocation=\"\n 21          http://java.sun.com/xml/ns/persistence\n 22          http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\"\u003e\n 23     \u003cpersistence-unit name=\"primary\"\u003e\n 24        \u003c!-- We use a different datasource for tests, so as to not overwrite\n 25           production data. This is an unmanaged data source, backed by H2, an in memory\n 26           database. Production applications should use a managed datasource. --\u003e\n 27        \u003c!-- The datasource is deployed as WEB-INF/test-ds.xml,\n 28           you can find it in the source at src/test/resources/test-ds.xml --\u003e\n 29        \u003cjta-data-source\u003ejava:jboss/datasources/KitchensinkQuickstartTestDS\u003c/jta-data-source\u003e\n 30        \u003cproperties\u003e\n 31           \u003c!-- Properties for Hibernate --\u003e\n 32           \u003cproperty name=\"hibernate.hbm2ddl.auto\" value=\"create-drop\" /\u003e\n 33           \u003cproperty name=\"hibernate.show_sql\" value=\"false\" /\u003e\n 34        \u003c/properties\u003e\n 35     \u003c/persistence-unit\u003e\n 36  \u003c/persistence\u003e\n","lineNumber":18,"variables":{"matchingText":"version=\"2.0\""}}],"Extras":null,"effort":1},"javaee-to-jakarta-namespaces-00055":{"description":"Replace the Java EE version with the Jakarta equivalent\n`orm_2_1`: In the root tag, replace the `version` attribute value with `3.0`","category":"mandatory","labels":["konveyor.io/target=jakarta-ee9+","konveyor.io/target=jakarta-ee","konveyor.io/target=eap8","konveyor.io/target=eap","konveyor.io/source"],"incidents":[{"uri":"file:///opt/input/source/src/main/resources/META-INF/persistence.xml","message":"`orm_2_1`: In the root tag, replace the `version` attribute value with `3.0`","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cpersistence version=\"2.1\"\n 19     xmlns=\"http://xmlns.jcp.org/xml/ns/persistence\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 20     xsi:schemaLocation=\"\n 21          http://xmlns.jcp.org/xml/ns/persistence\n 22          http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd\"\u003e\n 23     \u003cpersistence-unit name=\"primary\"\u003e\n 24        \u003c!-- If you are running in a production environment, add a managed\n 25           data source, this example data source is just for development and testing! --\u003e\n 26        \u003c!-- The datasource is deployed as WEB-INF/kitchensink-quickstart-ds.xml, you\n 27           can find it in the source at src/main/webapp/WEB-INF/kitchensink-quickstart-ds.xml --\u003e\n 28        \u003cjta-data-source\u003ejava:jboss/datasources/KitchensinkQuickstartDS\u003c/jta-data-source\u003e\n 29        \u003cproperties\u003e\n 30           \u003c!-- Properties for Hibernate --\u003e\n 31           \u003cproperty name=\"hibernate.hbm2ddl.auto\" value=\"create-drop\" /\u003e\n 32           \u003cproperty name=\"hibernate.show_sql\" value=\"false\" /\u003e\n 33        \u003c/properties\u003e\n 34     \u003c/persistence-unit\u003e\n 35  \u003c/persistence\u003e\n","lineNumber":18,"variables":{"matchingText":"version=\"2.1\""}}],"Extras":null,"effort":1},"javaee-to-jakarta-namespaces-00056":{"description":"Replace the Java EE version with the Jakarta equivalent\n`orm_2_2`: In the root tag, replace the `version` attribute value with `3.0`","category":"mandatory","labels":["konveyor.io/target=jakarta-ee9+","konveyor.io/target=jakarta-ee","konveyor.io/target=eap8","konveyor.io/target=eap","konveyor.io/source"],"incidents":[{"uri":"file:///opt/input/source/src/main/webapp/WEB-INF/faces-config.xml","message":"`orm_2_2`: In the root tag, replace the `version` attribute value with `3.0`","codeSnip":"  1  \u003c?xml version=\"1.0\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003c!-- This file is not required if you don't need any extra configuration. --\u003e\n 19  \u003cfaces-config version=\"2.2\" xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n 20      xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 21      xsi:schemaLocation=\"\n 22          http://xmlns.jcp.org/xml/ns/javaee\n 23          http://xmlns.jcp.org/xml/ns/javaee/web-facesconfig_2_2.xsd\"\u003e\n 24  \n 25      \u003c!-- This descriptor activates the JSF Servlet --\u003e\n 26  \n 27      \u003c!-- Write your navigation rules here. You are encouraged to use CDI\n 28          for creating @Named managed beans. --\u003e\n 29  \n 30  \u003c/faces-config\u003e\n","lineNumber":19,"variables":{"matchingText":"version=\"2.2\""}}],"Extras":null,"effort":1},"javax-to-jakarta-import-00001":{"description":"javax.{renamed} has been replaced by jakarta.{renamed}\n","category":"mandatory","labels":["konveyor.io/target=jakarta-ee9+","konveyor.io/target=jakarta-ee","konveyor.io/target=eap8","konveyor.io/target=eap","konveyor.io/source"],"incidents":[{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java","message":"Replace the `javax.faces` import statement with `jakarta.faces`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.controller;\n 18  \n 19  import javax.annotation.PostConstruct;\n 20  import javax.enterprise.inject.Model;\n 21  import javax.enterprise.inject.Produces;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.context.FacesContext;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  \n 27  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 28  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 29  \n 30  // The @Model stereotype is a convenience mechanism to make this a request-scoped bean that has an\n 31  // EL name\n 32  // Read more about the @Model stereotype in this FAQ:\n 33  // http://www.cdi-spec.org/faq/#accordion6\n 34  @Model\n 35  public class MemberController {\n 36  \n 37      @Inject\n 38      private FacesContext facesContext;\n 39  \n 40      @Inject\n 41      private MemberRegistration memberRegistration;\n 42  \n 43      @Produces\n 44      @Named\n 45      private Member newMember;\n 46  \n 47      @PostConstruct\n 48      public void initNewMember() {\n 49          newMember = new Member();\n 50      }\n 51  \n 52      public void register() throws Exception {\n 53          try {\n 54              memberRegistration.register(newMember);\n 55              FacesMessage m = new FacesMessage(FacesMessage.SEVERITY_INFO, \"Registered!\", \"Registration successful\");\n 56              facesContext.addMessage(null, m);\n 57              initNewMember();\n 58          } catch (Exception e) {\n 59              String errorMessage = getRootErrorMessage(e);\n 60              FacesMessage m = new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMessage, \"Registration unsuccessful\");\n 61              facesContext.addMessage(null, m);\n 62          }\n 63      }\n 64  \n 65      private String getRootErrorMessage(Exception e) {\n 66          // Default to general error message that registration failed.\n 67          String errorMessage = \"Registration failed. See server log for more information\";\n 68          if (e == null) {\n 69              // This shouldn't happen, but return the default messages\n 70              return errorMessage;\n 71          }\n 72  \n 73          // Start with the exception and recurse to find the root cause\n 74          Throwable t = e;\n 75          while (t != null) {\n 76              // Get the message from the Throwable class instance\n 77              errorMessage = t.getLocalizedMessage();\n 78              t = t.getCause();\n 79          }\n 80          // This is the root cause message\n 81          return errorMessage;\n 82      }\n 83  \n 84  }\n","lineNumber":22,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java","kind":"Module","name":"javax.faces.application.FacesMessage","renamed":"faces"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java","message":"Replace the `javax.faces` import statement with `jakarta.faces`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.controller;\n 18  \n 19  import javax.annotation.PostConstruct;\n 20  import javax.enterprise.inject.Model;\n 21  import javax.enterprise.inject.Produces;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.context.FacesContext;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  \n 27  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 28  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 29  \n 30  // The @Model stereotype is a convenience mechanism to make this a request-scoped bean that has an\n 31  // EL name\n 32  // Read more about the @Model stereotype in this FAQ:\n 33  // http://www.cdi-spec.org/faq/#accordion6\n 34  @Model\n 35  public class MemberController {\n 36  \n 37      @Inject\n 38      private FacesContext facesContext;\n 39  \n 40      @Inject\n 41      private MemberRegistration memberRegistration;\n 42  \n 43      @Produces\n 44      @Named\n 45      private Member newMember;\n 46  \n 47      @PostConstruct\n 48      public void initNewMember() {\n 49          newMember = new Member();\n 50      }\n 51  \n 52      public void register() throws Exception {\n 53          try {\n 54              memberRegistration.register(newMember);\n 55              FacesMessage m = new FacesMessage(FacesMessage.SEVERITY_INFO, \"Registered!\", \"Registration successful\");\n 56              facesContext.addMessage(null, m);\n 57              initNewMember();\n 58          } catch (Exception e) {\n 59              String errorMessage = getRootErrorMessage(e);\n 60              FacesMessage m = new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMessage, \"Registration unsuccessful\");\n 61              facesContext.addMessage(null, m);\n 62          }\n 63      }\n 64  \n 65      private String getRootErrorMessage(Exception e) {\n 66          // Default to general error message that registration failed.\n 67          String errorMessage = \"Registration failed. See server log for more information\";\n 68          if (e == null) {\n 69              // This shouldn't happen, but return the default messages\n 70              return errorMessage;\n 71          }\n 72  \n 73          // Start with the exception and recurse to find the root cause\n 74          Throwable t = e;\n 75          while (t != null) {\n 76              // Get the message from the Throwable class instance\n 77              errorMessage = t.getLocalizedMessage();\n 78              t = t.getCause();\n 79          }\n 80          // This is the root cause message\n 81          return errorMessage;\n 82      }\n 83  \n 84  }\n","lineNumber":23,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java","kind":"Module","name":"javax.faces.context.FacesContext","renamed":"faces"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java","message":"Replace the `javax.inject` import statement with `jakarta.inject`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.controller;\n 18  \n 19  import javax.annotation.PostConstruct;\n 20  import javax.enterprise.inject.Model;\n 21  import javax.enterprise.inject.Produces;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.context.FacesContext;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  \n 27  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 28  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 29  \n 30  // The @Model stereotype is a convenience mechanism to make this a request-scoped bean that has an\n 31  // EL name\n 32  // Read more about the @Model stereotype in this FAQ:\n 33  // http://www.cdi-spec.org/faq/#accordion6\n 34  @Model\n 35  public class MemberController {\n 36  \n 37      @Inject\n 38      private FacesContext facesContext;\n 39  \n 40      @Inject\n 41      private MemberRegistration memberRegistration;\n 42  \n 43      @Produces\n 44      @Named\n 45      private Member newMember;\n 46  \n 47      @PostConstruct\n 48      public void initNewMember() {\n 49          newMember = new Member();\n 50      }\n 51  \n 52      public void register() throws Exception {\n 53          try {\n 54              memberRegistration.register(newMember);\n 55              FacesMessage m = new FacesMessage(FacesMessage.SEVERITY_INFO, \"Registered!\", \"Registration successful\");\n 56              facesContext.addMessage(null, m);\n 57              initNewMember();\n 58          } catch (Exception e) {\n 59              String errorMessage = getRootErrorMessage(e);\n 60              FacesMessage m = new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMessage, \"Registration unsuccessful\");\n 61              facesContext.addMessage(null, m);\n 62          }\n 63      }\n 64  \n 65      private String getRootErrorMessage(Exception e) {\n 66          // Default to general error message that registration failed.\n 67          String errorMessage = \"Registration failed. See server log for more information\";\n 68          if (e == null) {\n 69              // This shouldn't happen, but return the default messages\n 70              return errorMessage;\n 71          }\n 72  \n 73          // Start with the exception and recurse to find the root cause\n 74          Throwable t = e;\n 75          while (t != null) {\n 76              // Get the message from the Throwable class instance\n 77              errorMessage = t.getLocalizedMessage();\n 78              t = t.getCause();\n 79          }\n 80          // This is the root cause message\n 81          return errorMessage;\n 82      }\n 83  \n 84  }\n","lineNumber":25,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java","kind":"Module","name":"javax.inject.Named","renamed":"inject"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java","message":"Replace the `javax.enterprise` import statement with `jakarta.enterprise`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.controller;\n 18  \n 19  import javax.annotation.PostConstruct;\n 20  import javax.enterprise.inject.Model;\n 21  import javax.enterprise.inject.Produces;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.context.FacesContext;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  \n 27  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 28  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 29  \n 30  // The @Model stereotype is a convenience mechanism to make this a request-scoped bean that has an\n 31  // EL name\n 32  // Read more about the @Model stereotype in this FAQ:\n 33  // http://www.cdi-spec.org/faq/#accordion6\n 34  @Model\n 35  public class MemberController {\n 36  \n 37      @Inject\n 38      private FacesContext facesContext;\n 39  \n 40      @Inject\n 41      private MemberRegistration memberRegistration;\n 42  \n 43      @Produces\n 44      @Named\n 45      private Member newMember;\n 46  \n 47      @PostConstruct\n 48      public void initNewMember() {\n 49          newMember = new Member();\n 50      }\n 51  \n 52      public void register() throws Exception {\n 53          try {\n 54              memberRegistration.register(newMember);\n 55              FacesMessage m = new FacesMessage(FacesMessage.SEVERITY_INFO, \"Registered!\", \"Registration successful\");\n 56              facesContext.addMessage(null, m);\n 57              initNewMember();\n 58          } catch (Exception e) {\n 59              String errorMessage = getRootErrorMessage(e);\n 60              FacesMessage m = new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMessage, \"Registration unsuccessful\");\n 61              facesContext.addMessage(null, m);\n 62          }\n 63      }\n 64  \n 65      private String getRootErrorMessage(Exception e) {\n 66          // Default to general error message that registration failed.\n 67          String errorMessage = \"Registration failed. See server log for more information\";\n 68          if (e == null) {\n 69              // This shouldn't happen, but return the default messages\n 70              return errorMessage;\n 71          }\n 72  \n 73          // Start with the exception and recurse to find the root cause\n 74          Throwable t = e;\n 75          while (t != null) {\n 76              // Get the message from the Throwable class instance\n 77              errorMessage = t.getLocalizedMessage();\n 78              t = t.getCause();\n 79          }\n 80          // This is the root cause message\n 81          return errorMessage;\n 82      }\n 83  \n 84  }\n","lineNumber":20,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java","kind":"Module","name":"javax.enterprise.inject.Model","renamed":"enterprise"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java","message":"Replace the `javax.inject` import statement with `jakarta.inject`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.controller;\n 18  \n 19  import javax.annotation.PostConstruct;\n 20  import javax.enterprise.inject.Model;\n 21  import javax.enterprise.inject.Produces;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.context.FacesContext;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  \n 27  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 28  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 29  \n 30  // The @Model stereotype is a convenience mechanism to make this a request-scoped bean that has an\n 31  // EL name\n 32  // Read more about the @Model stereotype in this FAQ:\n 33  // http://www.cdi-spec.org/faq/#accordion6\n 34  @Model\n 35  public class MemberController {\n 36  \n 37      @Inject\n 38      private FacesContext facesContext;\n 39  \n 40      @Inject\n 41      private MemberRegistration memberRegistration;\n 42  \n 43      @Produces\n 44      @Named\n 45      private Member newMember;\n 46  \n 47      @PostConstruct\n 48      public void initNewMember() {\n 49          newMember = new Member();\n 50      }\n 51  \n 52      public void register() throws Exception {\n 53          try {\n 54              memberRegistration.register(newMember);\n 55              FacesMessage m = new FacesMessage(FacesMessage.SEVERITY_INFO, \"Registered!\", \"Registration successful\");\n 56              facesContext.addMessage(null, m);\n 57              initNewMember();\n 58          } catch (Exception e) {\n 59              String errorMessage = getRootErrorMessage(e);\n 60              FacesMessage m = new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMessage, \"Registration unsuccessful\");\n 61              facesContext.addMessage(null, m);\n 62          }\n 63      }\n 64  \n 65      private String getRootErrorMessage(Exception e) {\n 66          // Default to general error message that registration failed.\n 67          String errorMessage = \"Registration failed. See server log for more information\";\n 68          if (e == null) {\n 69              // This shouldn't happen, but return the default messages\n 70              return errorMessage;\n 71          }\n 72  \n 73          // Start with the exception and recurse to find the root cause\n 74          Throwable t = e;\n 75          while (t != null) {\n 76              // Get the message from the Throwable class instance\n 77              errorMessage = t.getLocalizedMessage();\n 78              t = t.getCause();\n 79          }\n 80          // This is the root cause message\n 81          return errorMessage;\n 82      }\n 83  \n 84  }\n","lineNumber":24,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java","kind":"Module","name":"javax.inject.Inject","renamed":"inject"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java","message":"Replace the `javax.enterprise` import statement with `jakarta.enterprise`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.controller;\n 18  \n 19  import javax.annotation.PostConstruct;\n 20  import javax.enterprise.inject.Model;\n 21  import javax.enterprise.inject.Produces;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.context.FacesContext;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  \n 27  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 28  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 29  \n 30  // The @Model stereotype is a convenience mechanism to make this a request-scoped bean that has an\n 31  // EL name\n 32  // Read more about the @Model stereotype in this FAQ:\n 33  // http://www.cdi-spec.org/faq/#accordion6\n 34  @Model\n 35  public class MemberController {\n 36  \n 37      @Inject\n 38      private FacesContext facesContext;\n 39  \n 40      @Inject\n 41      private MemberRegistration memberRegistration;\n 42  \n 43      @Produces\n 44      @Named\n 45      private Member newMember;\n 46  \n 47      @PostConstruct\n 48      public void initNewMember() {\n 49          newMember = new Member();\n 50      }\n 51  \n 52      public void register() throws Exception {\n 53          try {\n 54              memberRegistration.register(newMember);\n 55              FacesMessage m = new FacesMessage(FacesMessage.SEVERITY_INFO, \"Registered!\", \"Registration successful\");\n 56              facesContext.addMessage(null, m);\n 57              initNewMember();\n 58          } catch (Exception e) {\n 59              String errorMessage = getRootErrorMessage(e);\n 60              FacesMessage m = new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMessage, \"Registration unsuccessful\");\n 61              facesContext.addMessage(null, m);\n 62          }\n 63      }\n 64  \n 65      private String getRootErrorMessage(Exception e) {\n 66          // Default to general error message that registration failed.\n 67          String errorMessage = \"Registration failed. See server log for more information\";\n 68          if (e == null) {\n 69              // This shouldn't happen, but return the default messages\n 70              return errorMessage;\n 71          }\n 72  \n 73          // Start with the exception and recurse to find the root cause\n 74          Throwable t = e;\n 75          while (t != null) {\n 76              // Get the message from the Throwable class instance\n 77              errorMessage = t.getLocalizedMessage();\n 78              t = t.getCause();\n 79          }\n 80          // This is the root cause message\n 81          return errorMessage;\n 82      }\n 83  \n 84  }\n","lineNumber":21,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java","kind":"Module","name":"javax.enterprise.inject.Produces","renamed":"enterprise"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java","message":"Replace the `javax.annotation` import statement with `jakarta.annotation`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.controller;\n 18  \n 19  import javax.annotation.PostConstruct;\n 20  import javax.enterprise.inject.Model;\n 21  import javax.enterprise.inject.Produces;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.context.FacesContext;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  \n 27  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 28  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 29  \n 30  // The @Model stereotype is a convenience mechanism to make this a request-scoped bean that has an\n 31  // EL name\n 32  // Read more about the @Model stereotype in this FAQ:\n 33  // http://www.cdi-spec.org/faq/#accordion6\n 34  @Model\n 35  public class MemberController {\n 36  \n 37      @Inject\n 38      private FacesContext facesContext;\n 39  \n 40      @Inject\n 41      private MemberRegistration memberRegistration;\n 42  \n 43      @Produces\n 44      @Named\n 45      private Member newMember;\n 46  \n 47      @PostConstruct\n 48      public void initNewMember() {\n 49          newMember = new Member();\n 50      }\n 51  \n 52      public void register() throws Exception {\n 53          try {\n 54              memberRegistration.register(newMember);\n 55              FacesMessage m = new FacesMessage(FacesMessage.SEVERITY_INFO, \"Registered!\", \"Registration successful\");\n 56              facesContext.addMessage(null, m);\n 57              initNewMember();\n 58          } catch (Exception e) {\n 59              String errorMessage = getRootErrorMessage(e);\n 60              FacesMessage m = new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMessage, \"Registration unsuccessful\");\n 61              facesContext.addMessage(null, m);\n 62          }\n 63      }\n 64  \n 65      private String getRootErrorMessage(Exception e) {\n 66          // Default to general error message that registration failed.\n 67          String errorMessage = \"Registration failed. See server log for more information\";\n 68          if (e == null) {\n 69              // This shouldn't happen, but return the default messages\n 70              return errorMessage;\n 71          }\n 72  \n 73          // Start with the exception and recurse to find the root cause\n 74          Throwable t = e;\n 75          while (t != null) {\n 76              // Get the message from the Throwable class instance\n 77              errorMessage = t.getLocalizedMessage();\n 78              t = t.getCause();\n 79          }\n 80          // This is the root cause message\n 81          return errorMessage;\n 82      }\n 83  \n 84  }\n","lineNumber":19,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java","kind":"Module","name":"javax.annotation.PostConstruct","renamed":"annotation"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberListProducer.java","message":"Replace the `javax.inject` import statement with `jakarta.inject`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.data;\n 18  \n 19  import javax.annotation.PostConstruct;\n 20  import javax.enterprise.context.RequestScoped;\n 21  import javax.enterprise.event.Observes;\n 22  import javax.enterprise.event.Reception;\n 23  import javax.enterprise.inject.Produces;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  import java.util.List;\n 27  \n 28  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 29  \n 30  @RequestScoped\n 31  public class MemberListProducer {\n 32  \n 33      @Inject\n 34      private MemberRepository memberRepository;\n 35  \n 36      private List\u003cMember\u003e members;\n 37  \n 38      // @Named provides access the return value via the EL variable name \"members\" in the UI (e.g.\n 39      // Facelets or JSP view)\n 40      @Produces\n 41      @Named\n 42      public List\u003cMember\u003e getMembers() {\n 43          return members;\n 44      }\n 45  \n 46      public void onMemberListChanged(@Observes(notifyObserver = Reception.IF_EXISTS) final Member member) {\n 47          retrieveAllMembersOrderedByName();\n 48      }\n 49  \n 50      @PostConstruct\n 51      public void retrieveAllMembersOrderedByName() {\n 52          members = memberRepository.findAllOrderedByName();\n 53      }\n 54  }\n","lineNumber":24,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberListProducer.java","kind":"Module","name":"javax.inject.Inject","renamed":"inject"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberListProducer.java","message":"Replace the `javax.enterprise` import statement with `jakarta.enterprise`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.data;\n 18  \n 19  import javax.annotation.PostConstruct;\n 20  import javax.enterprise.context.RequestScoped;\n 21  import javax.enterprise.event.Observes;\n 22  import javax.enterprise.event.Reception;\n 23  import javax.enterprise.inject.Produces;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  import java.util.List;\n 27  \n 28  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 29  \n 30  @RequestScoped\n 31  public class MemberListProducer {\n 32  \n 33      @Inject\n 34      private MemberRepository memberRepository;\n 35  \n 36      private List\u003cMember\u003e members;\n 37  \n 38      // @Named provides access the return value via the EL variable name \"members\" in the UI (e.g.\n 39      // Facelets or JSP view)\n 40      @Produces\n 41      @Named\n 42      public List\u003cMember\u003e getMembers() {\n 43          return members;\n 44      }\n 45  \n 46      public void onMemberListChanged(@Observes(notifyObserver = Reception.IF_EXISTS) final Member member) {\n 47          retrieveAllMembersOrderedByName();\n 48      }\n 49  \n 50      @PostConstruct\n 51      public void retrieveAllMembersOrderedByName() {\n 52          members = memberRepository.findAllOrderedByName();\n 53      }\n 54  }\n","lineNumber":22,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberListProducer.java","kind":"Module","name":"javax.enterprise.event.Reception","renamed":"enterprise"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberListProducer.java","message":"Replace the `javax.enterprise` import statement with `jakarta.enterprise`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.data;\n 18  \n 19  import javax.annotation.PostConstruct;\n 20  import javax.enterprise.context.RequestScoped;\n 21  import javax.enterprise.event.Observes;\n 22  import javax.enterprise.event.Reception;\n 23  import javax.enterprise.inject.Produces;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  import java.util.List;\n 27  \n 28  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 29  \n 30  @RequestScoped\n 31  public class MemberListProducer {\n 32  \n 33      @Inject\n 34      private MemberRepository memberRepository;\n 35  \n 36      private List\u003cMember\u003e members;\n 37  \n 38      // @Named provides access the return value via the EL variable name \"members\" in the UI (e.g.\n 39      // Facelets or JSP view)\n 40      @Produces\n 41      @Named\n 42      public List\u003cMember\u003e getMembers() {\n 43          return members;\n 44      }\n 45  \n 46      public void onMemberListChanged(@Observes(notifyObserver = Reception.IF_EXISTS) final Member member) {\n 47          retrieveAllMembersOrderedByName();\n 48      }\n 49  \n 50      @PostConstruct\n 51      public void retrieveAllMembersOrderedByName() {\n 52          members = memberRepository.findAllOrderedByName();\n 53      }\n 54  }\n","lineNumber":21,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberListProducer.java","kind":"Module","name":"javax.enterprise.event.Observes","renamed":"enterprise"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberListProducer.java","message":"Replace the `javax.annotation` import statement with `jakarta.annotation`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.data;\n 18  \n 19  import javax.annotation.PostConstruct;\n 20  import javax.enterprise.context.RequestScoped;\n 21  import javax.enterprise.event.Observes;\n 22  import javax.enterprise.event.Reception;\n 23  import javax.enterprise.inject.Produces;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  import java.util.List;\n 27  \n 28  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 29  \n 30  @RequestScoped\n 31  public class MemberListProducer {\n 32  \n 33      @Inject\n 34      private MemberRepository memberRepository;\n 35  \n 36      private List\u003cMember\u003e members;\n 37  \n 38      // @Named provides access the return value via the EL variable name \"members\" in the UI (e.g.\n 39      // Facelets or JSP view)\n 40      @Produces\n 41      @Named\n 42      public List\u003cMember\u003e getMembers() {\n 43          return members;\n 44      }\n 45  \n 46      public void onMemberListChanged(@Observes(notifyObserver = Reception.IF_EXISTS) final Member member) {\n 47          retrieveAllMembersOrderedByName();\n 48      }\n 49  \n 50      @PostConstruct\n 51      public void retrieveAllMembersOrderedByName() {\n 52          members = memberRepository.findAllOrderedByName();\n 53      }\n 54  }\n","lineNumber":19,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberListProducer.java","kind":"Module","name":"javax.annotation.PostConstruct","renamed":"annotation"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberListProducer.java","message":"Replace the `javax.inject` import statement with `jakarta.inject`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.data;\n 18  \n 19  import javax.annotation.PostConstruct;\n 20  import javax.enterprise.context.RequestScoped;\n 21  import javax.enterprise.event.Observes;\n 22  import javax.enterprise.event.Reception;\n 23  import javax.enterprise.inject.Produces;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  import java.util.List;\n 27  \n 28  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 29  \n 30  @RequestScoped\n 31  public class MemberListProducer {\n 32  \n 33      @Inject\n 34      private MemberRepository memberRepository;\n 35  \n 36      private List\u003cMember\u003e members;\n 37  \n 38      // @Named provides access the return value via the EL variable name \"members\" in the UI (e.g.\n 39      // Facelets or JSP view)\n 40      @Produces\n 41      @Named\n 42      public List\u003cMember\u003e getMembers() {\n 43          return members;\n 44      }\n 45  \n 46      public void onMemberListChanged(@Observes(notifyObserver = Reception.IF_EXISTS) final Member member) {\n 47          retrieveAllMembersOrderedByName();\n 48      }\n 49  \n 50      @PostConstruct\n 51      public void retrieveAllMembersOrderedByName() {\n 52          members = memberRepository.findAllOrderedByName();\n 53      }\n 54  }\n","lineNumber":25,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberListProducer.java","kind":"Module","name":"javax.inject.Named","renamed":"inject"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberListProducer.java","message":"Replace the `javax.enterprise` import statement with `jakarta.enterprise`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.data;\n 18  \n 19  import javax.annotation.PostConstruct;\n 20  import javax.enterprise.context.RequestScoped;\n 21  import javax.enterprise.event.Observes;\n 22  import javax.enterprise.event.Reception;\n 23  import javax.enterprise.inject.Produces;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  import java.util.List;\n 27  \n 28  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 29  \n 30  @RequestScoped\n 31  public class MemberListProducer {\n 32  \n 33      @Inject\n 34      private MemberRepository memberRepository;\n 35  \n 36      private List\u003cMember\u003e members;\n 37  \n 38      // @Named provides access the return value via the EL variable name \"members\" in the UI (e.g.\n 39      // Facelets or JSP view)\n 40      @Produces\n 41      @Named\n 42      public List\u003cMember\u003e getMembers() {\n 43          return members;\n 44      }\n 45  \n 46      public void onMemberListChanged(@Observes(notifyObserver = Reception.IF_EXISTS) final Member member) {\n 47          retrieveAllMembersOrderedByName();\n 48      }\n 49  \n 50      @PostConstruct\n 51      public void retrieveAllMembersOrderedByName() {\n 52          members = memberRepository.findAllOrderedByName();\n 53      }\n 54  }\n","lineNumber":23,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberListProducer.java","kind":"Module","name":"javax.enterprise.inject.Produces","renamed":"enterprise"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberListProducer.java","message":"Replace the `javax.enterprise` import statement with `jakarta.enterprise`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.data;\n 18  \n 19  import javax.annotation.PostConstruct;\n 20  import javax.enterprise.context.RequestScoped;\n 21  import javax.enterprise.event.Observes;\n 22  import javax.enterprise.event.Reception;\n 23  import javax.enterprise.inject.Produces;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  import java.util.List;\n 27  \n 28  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 29  \n 30  @RequestScoped\n 31  public class MemberListProducer {\n 32  \n 33      @Inject\n 34      private MemberRepository memberRepository;\n 35  \n 36      private List\u003cMember\u003e members;\n 37  \n 38      // @Named provides access the return value via the EL variable name \"members\" in the UI (e.g.\n 39      // Facelets or JSP view)\n 40      @Produces\n 41      @Named\n 42      public List\u003cMember\u003e getMembers() {\n 43          return members;\n 44      }\n 45  \n 46      public void onMemberListChanged(@Observes(notifyObserver = Reception.IF_EXISTS) final Member member) {\n 47          retrieveAllMembersOrderedByName();\n 48      }\n 49  \n 50      @PostConstruct\n 51      public void retrieveAllMembersOrderedByName() {\n 52          members = memberRepository.findAllOrderedByName();\n 53      }\n 54  }\n","lineNumber":20,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberListProducer.java","kind":"Module","name":"javax.enterprise.context.RequestScoped","renamed":"enterprise"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.data;\n 18  \n 19  import javax.enterprise.context.ApplicationScoped;\n 20  import javax.inject.Inject;\n 21  import javax.persistence.EntityManager;\n 22  import javax.persistence.criteria.CriteriaBuilder;\n 23  import javax.persistence.criteria.CriteriaQuery;\n 24  import javax.persistence.criteria.Root;\n 25  import java.util.List;\n 26  \n 27  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 28  \n 29  @ApplicationScoped\n 30  public class MemberRepository {\n 31  \n 32      @Inject\n 33      private EntityManager em;\n 34  \n 35      public Member findById(Long id) {\n 36          return em.find(Member.class, id);\n 37      }\n 38  \n 39      public Member findByEmail(String email) {\n 40          CriteriaBuilder cb = em.getCriteriaBuilder();\n 41          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 42          Root\u003cMember\u003e member = criteria.from(Member.class);\n 43          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 44          // feature in JPA 2.0\n 45          // criteria.select(member).where(cb.equal(member.get(Member_.email), email));\n 46          criteria.select(member).where(cb.equal(member.get(\"email\"), email));\n 47          return em.createQuery(criteria).getSingleResult();\n 48      }\n 49  \n 50      public List\u003cMember\u003e findAllOrderedByName() {\n 51          CriteriaBuilder cb = em.getCriteriaBuilder();\n 52          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 53          Root\u003cMember\u003e member = criteria.from(Member.class);\n 54          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 55          // feature in JPA 2.0\n 56          // criteria.select(member).orderBy(cb.asc(member.get(Member_.name)));\n 57          criteria.select(member).orderBy(cb.asc(member.get(\"name\")));\n 58          return em.createQuery(criteria).getResultList();\n 59      }\n 60  }\n","lineNumber":21,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","kind":"Module","name":"javax.persistence.EntityManager","renamed":"persistence"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.data;\n 18  \n 19  import javax.enterprise.context.ApplicationScoped;\n 20  import javax.inject.Inject;\n 21  import javax.persistence.EntityManager;\n 22  import javax.persistence.criteria.CriteriaBuilder;\n 23  import javax.persistence.criteria.CriteriaQuery;\n 24  import javax.persistence.criteria.Root;\n 25  import java.util.List;\n 26  \n 27  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 28  \n 29  @ApplicationScoped\n 30  public class MemberRepository {\n 31  \n 32      @Inject\n 33      private EntityManager em;\n 34  \n 35      public Member findById(Long id) {\n 36          return em.find(Member.class, id);\n 37      }\n 38  \n 39      public Member findByEmail(String email) {\n 40          CriteriaBuilder cb = em.getCriteriaBuilder();\n 41          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 42          Root\u003cMember\u003e member = criteria.from(Member.class);\n 43          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 44          // feature in JPA 2.0\n 45          // criteria.select(member).where(cb.equal(member.get(Member_.email), email));\n 46          criteria.select(member).where(cb.equal(member.get(\"email\"), email));\n 47          return em.createQuery(criteria).getSingleResult();\n 48      }\n 49  \n 50      public List\u003cMember\u003e findAllOrderedByName() {\n 51          CriteriaBuilder cb = em.getCriteriaBuilder();\n 52          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 53          Root\u003cMember\u003e member = criteria.from(Member.class);\n 54          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 55          // feature in JPA 2.0\n 56          // criteria.select(member).orderBy(cb.asc(member.get(Member_.name)));\n 57          criteria.select(member).orderBy(cb.asc(member.get(\"name\")));\n 58          return em.createQuery(criteria).getResultList();\n 59      }\n 60  }\n","lineNumber":22,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","kind":"Module","name":"javax.persistence.criteria.CriteriaBuilder","renamed":"persistence"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","message":"Replace the `javax.inject` import statement with `jakarta.inject`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.data;\n 18  \n 19  import javax.enterprise.context.ApplicationScoped;\n 20  import javax.inject.Inject;\n 21  import javax.persistence.EntityManager;\n 22  import javax.persistence.criteria.CriteriaBuilder;\n 23  import javax.persistence.criteria.CriteriaQuery;\n 24  import javax.persistence.criteria.Root;\n 25  import java.util.List;\n 26  \n 27  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 28  \n 29  @ApplicationScoped\n 30  public class MemberRepository {\n 31  \n 32      @Inject\n 33      private EntityManager em;\n 34  \n 35      public Member findById(Long id) {\n 36          return em.find(Member.class, id);\n 37      }\n 38  \n 39      public Member findByEmail(String email) {\n 40          CriteriaBuilder cb = em.getCriteriaBuilder();\n 41          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 42          Root\u003cMember\u003e member = criteria.from(Member.class);\n 43          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 44          // feature in JPA 2.0\n 45          // criteria.select(member).where(cb.equal(member.get(Member_.email), email));\n 46          criteria.select(member).where(cb.equal(member.get(\"email\"), email));\n 47          return em.createQuery(criteria).getSingleResult();\n 48      }\n 49  \n 50      public List\u003cMember\u003e findAllOrderedByName() {\n 51          CriteriaBuilder cb = em.getCriteriaBuilder();\n 52          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 53          Root\u003cMember\u003e member = criteria.from(Member.class);\n 54          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 55          // feature in JPA 2.0\n 56          // criteria.select(member).orderBy(cb.asc(member.get(Member_.name)));\n 57          criteria.select(member).orderBy(cb.asc(member.get(\"name\")));\n 58          return em.createQuery(criteria).getResultList();\n 59      }\n 60  }\n","lineNumber":20,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","kind":"Module","name":"javax.inject.Inject","renamed":"inject"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","message":"Replace the `javax.enterprise` import statement with `jakarta.enterprise`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.data;\n 18  \n 19  import javax.enterprise.context.ApplicationScoped;\n 20  import javax.inject.Inject;\n 21  import javax.persistence.EntityManager;\n 22  import javax.persistence.criteria.CriteriaBuilder;\n 23  import javax.persistence.criteria.CriteriaQuery;\n 24  import javax.persistence.criteria.Root;\n 25  import java.util.List;\n 26  \n 27  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 28  \n 29  @ApplicationScoped\n 30  public class MemberRepository {\n 31  \n 32      @Inject\n 33      private EntityManager em;\n 34  \n 35      public Member findById(Long id) {\n 36          return em.find(Member.class, id);\n 37      }\n 38  \n 39      public Member findByEmail(String email) {\n 40          CriteriaBuilder cb = em.getCriteriaBuilder();\n 41          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 42          Root\u003cMember\u003e member = criteria.from(Member.class);\n 43          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 44          // feature in JPA 2.0\n 45          // criteria.select(member).where(cb.equal(member.get(Member_.email), email));\n 46          criteria.select(member).where(cb.equal(member.get(\"email\"), email));\n 47          return em.createQuery(criteria).getSingleResult();\n 48      }\n 49  \n 50      public List\u003cMember\u003e findAllOrderedByName() {\n 51          CriteriaBuilder cb = em.getCriteriaBuilder();\n 52          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 53          Root\u003cMember\u003e member = criteria.from(Member.class);\n 54          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 55          // feature in JPA 2.0\n 56          // criteria.select(member).orderBy(cb.asc(member.get(Member_.name)));\n 57          criteria.select(member).orderBy(cb.asc(member.get(\"name\")));\n 58          return em.createQuery(criteria).getResultList();\n 59      }\n 60  }\n","lineNumber":19,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","kind":"Module","name":"javax.enterprise.context.ApplicationScoped","renamed":"enterprise"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.data;\n 18  \n 19  import javax.enterprise.context.ApplicationScoped;\n 20  import javax.inject.Inject;\n 21  import javax.persistence.EntityManager;\n 22  import javax.persistence.criteria.CriteriaBuilder;\n 23  import javax.persistence.criteria.CriteriaQuery;\n 24  import javax.persistence.criteria.Root;\n 25  import java.util.List;\n 26  \n 27  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 28  \n 29  @ApplicationScoped\n 30  public class MemberRepository {\n 31  \n 32      @Inject\n 33      private EntityManager em;\n 34  \n 35      public Member findById(Long id) {\n 36          return em.find(Member.class, id);\n 37      }\n 38  \n 39      public Member findByEmail(String email) {\n 40          CriteriaBuilder cb = em.getCriteriaBuilder();\n 41          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 42          Root\u003cMember\u003e member = criteria.from(Member.class);\n 43          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 44          // feature in JPA 2.0\n 45          // criteria.select(member).where(cb.equal(member.get(Member_.email), email));\n 46          criteria.select(member).where(cb.equal(member.get(\"email\"), email));\n 47          return em.createQuery(criteria).getSingleResult();\n 48      }\n 49  \n 50      public List\u003cMember\u003e findAllOrderedByName() {\n 51          CriteriaBuilder cb = em.getCriteriaBuilder();\n 52          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 53          Root\u003cMember\u003e member = criteria.from(Member.class);\n 54          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 55          // feature in JPA 2.0\n 56          // criteria.select(member).orderBy(cb.asc(member.get(Member_.name)));\n 57          criteria.select(member).orderBy(cb.asc(member.get(\"name\")));\n 58          return em.createQuery(criteria).getResultList();\n 59      }\n 60  }\n","lineNumber":23,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","kind":"Module","name":"javax.persistence.criteria.CriteriaQuery","renamed":"persistence"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.data;\n 18  \n 19  import javax.enterprise.context.ApplicationScoped;\n 20  import javax.inject.Inject;\n 21  import javax.persistence.EntityManager;\n 22  import javax.persistence.criteria.CriteriaBuilder;\n 23  import javax.persistence.criteria.CriteriaQuery;\n 24  import javax.persistence.criteria.Root;\n 25  import java.util.List;\n 26  \n 27  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 28  \n 29  @ApplicationScoped\n 30  public class MemberRepository {\n 31  \n 32      @Inject\n 33      private EntityManager em;\n 34  \n 35      public Member findById(Long id) {\n 36          return em.find(Member.class, id);\n 37      }\n 38  \n 39      public Member findByEmail(String email) {\n 40          CriteriaBuilder cb = em.getCriteriaBuilder();\n 41          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 42          Root\u003cMember\u003e member = criteria.from(Member.class);\n 43          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 44          // feature in JPA 2.0\n 45          // criteria.select(member).where(cb.equal(member.get(Member_.email), email));\n 46          criteria.select(member).where(cb.equal(member.get(\"email\"), email));\n 47          return em.createQuery(criteria).getSingleResult();\n 48      }\n 49  \n 50      public List\u003cMember\u003e findAllOrderedByName() {\n 51          CriteriaBuilder cb = em.getCriteriaBuilder();\n 52          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 53          Root\u003cMember\u003e member = criteria.from(Member.class);\n 54          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 55          // feature in JPA 2.0\n 56          // criteria.select(member).orderBy(cb.asc(member.get(Member_.name)));\n 57          criteria.select(member).orderBy(cb.asc(member.get(\"name\")));\n 58          return em.createQuery(criteria).getResultList();\n 59      }\n 60  }\n","lineNumber":24,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","kind":"Module","name":"javax.persistence.criteria.Root","renamed":"persistence"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","message":"Replace the `javax.validation` import statement with `jakarta.validation`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.model;\n 18  \n 19  import java.io.Serializable;\n 20  \n 21  import javax.persistence.Column;\n 22  import javax.persistence.Entity;\n 23  import javax.persistence.GeneratedValue;\n 24  import javax.persistence.Id;\n 25  import javax.persistence.Table;\n 26  import javax.persistence.UniqueConstraint;\n 27  import javax.validation.constraints.Digits;\n 28  import javax.validation.constraints.NotNull;\n 29  import javax.validation.constraints.Pattern;\n 30  import javax.validation.constraints.Size;\n 31  import javax.xml.bind.annotation.XmlRootElement;\n 32  \n 33  import javax.validation.constraints.Email;\n 34  import javax.validation.constraints.NotEmpty;\n 35  \n 36  @SuppressWarnings(\"serial\")\n 37  @Entity\n 38  @XmlRootElement\n 39  @Table(uniqueConstraints = @UniqueConstraint(columnNames = \"email\"))\n 40  public class Member implements Serializable {\n 41  \n 42      @Id\n 43      @GeneratedValue\n 44      private Long id;\n 45  \n 46      @NotNull\n 47      @Size(min = 1, max = 25)\n 48      @Pattern(regexp = \"[^0-9]*\", message = \"Must not contain numbers\")\n 49      private String name;\n 50  \n 51      @NotNull\n 52      @NotEmpty\n 53      @Email\n 54      private String email;\n 55  \n 56      @NotNull\n 57      @Size(min = 10, max = 12)\n 58      @Digits(fraction = 0, integer = 12)\n 59      @Column(name = \"phone_number\")\n 60      private String phoneNumber;\n 61  \n 62      public Long getId() {\n 63          return id;\n 64      }\n 65  \n 66      public void setId(Long id) {\n 67          this.id = id;\n 68      }\n 69  \n 70      public String getName() {\n 71          return name;\n 72      }\n 73  \n 74      public void setName(String name) {\n 75          this.name = name;\n 76      }\n 77  \n 78      public String getEmail() {\n 79          return email;\n 80      }\n 81  \n 82      public void setEmail(String email) {\n 83          this.email = email;\n 84      }\n 85  \n 86      public String getPhoneNumber() {\n 87          return phoneNumber;\n 88      }\n 89  \n 90      public void setPhoneNumber(String phoneNumber) {\n 91          this.phoneNumber = phoneNumber;\n 92      }\n 93  }\n","lineNumber":33,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","kind":"Module","name":"javax.validation.constraints.Email","renamed":"validation"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","message":"Replace the `javax.validation` import statement with `jakarta.validation`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.model;\n 18  \n 19  import java.io.Serializable;\n 20  \n 21  import javax.persistence.Column;\n 22  import javax.persistence.Entity;\n 23  import javax.persistence.GeneratedValue;\n 24  import javax.persistence.Id;\n 25  import javax.persistence.Table;\n 26  import javax.persistence.UniqueConstraint;\n 27  import javax.validation.constraints.Digits;\n 28  import javax.validation.constraints.NotNull;\n 29  import javax.validation.constraints.Pattern;\n 30  import javax.validation.constraints.Size;\n 31  import javax.xml.bind.annotation.XmlRootElement;\n 32  \n 33  import javax.validation.constraints.Email;\n 34  import javax.validation.constraints.NotEmpty;\n 35  \n 36  @SuppressWarnings(\"serial\")\n 37  @Entity\n 38  @XmlRootElement\n 39  @Table(uniqueConstraints = @UniqueConstraint(columnNames = \"email\"))\n 40  public class Member implements Serializable {\n 41  \n 42      @Id\n 43      @GeneratedValue\n 44      private Long id;\n 45  \n 46      @NotNull\n 47      @Size(min = 1, max = 25)\n 48      @Pattern(regexp = \"[^0-9]*\", message = \"Must not contain numbers\")\n 49      private String name;\n 50  \n 51      @NotNull\n 52      @NotEmpty\n 53      @Email\n 54      private String email;\n 55  \n 56      @NotNull\n 57      @Size(min = 10, max = 12)\n 58      @Digits(fraction = 0, integer = 12)\n 59      @Column(name = \"phone_number\")\n 60      private String phoneNumber;\n 61  \n 62      public Long getId() {\n 63          return id;\n 64      }\n 65  \n 66      public void setId(Long id) {\n 67          this.id = id;\n 68      }\n 69  \n 70      public String getName() {\n 71          return name;\n 72      }\n 73  \n 74      public void setName(String name) {\n 75          this.name = name;\n 76      }\n 77  \n 78      public String getEmail() {\n 79          return email;\n 80      }\n 81  \n 82      public void setEmail(String email) {\n 83          this.email = email;\n 84      }\n 85  \n 86      public String getPhoneNumber() {\n 87          return phoneNumber;\n 88      }\n 89  \n 90      public void setPhoneNumber(String phoneNumber) {\n 91          this.phoneNumber = phoneNumber;\n 92      }\n 93  }\n","lineNumber":34,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","kind":"Module","name":"javax.validation.constraints.NotEmpty","renamed":"validation"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.model;\n 18  \n 19  import java.io.Serializable;\n 20  \n 21  import javax.persistence.Column;\n 22  import javax.persistence.Entity;\n 23  import javax.persistence.GeneratedValue;\n 24  import javax.persistence.Id;\n 25  import javax.persistence.Table;\n 26  import javax.persistence.UniqueConstraint;\n 27  import javax.validation.constraints.Digits;\n 28  import javax.validation.constraints.NotNull;\n 29  import javax.validation.constraints.Pattern;\n 30  import javax.validation.constraints.Size;\n 31  import javax.xml.bind.annotation.XmlRootElement;\n 32  \n 33  import javax.validation.constraints.Email;\n 34  import javax.validation.constraints.NotEmpty;\n 35  \n 36  @SuppressWarnings(\"serial\")\n 37  @Entity\n 38  @XmlRootElement\n 39  @Table(uniqueConstraints = @UniqueConstraint(columnNames = \"email\"))\n 40  public class Member implements Serializable {\n 41  \n 42      @Id\n 43      @GeneratedValue\n 44      private Long id;\n 45  \n 46      @NotNull\n 47      @Size(min = 1, max = 25)\n 48      @Pattern(regexp = \"[^0-9]*\", message = \"Must not contain numbers\")\n 49      private String name;\n 50  \n 51      @NotNull\n 52      @NotEmpty\n 53      @Email\n 54      private String email;\n 55  \n 56      @NotNull\n 57      @Size(min = 10, max = 12)\n 58      @Digits(fraction = 0, integer = 12)\n 59      @Column(name = \"phone_number\")\n 60      private String phoneNumber;\n 61  \n 62      public Long getId() {\n 63          return id;\n 64      }\n 65  \n 66      public void setId(Long id) {\n 67          this.id = id;\n 68      }\n 69  \n 70      public String getName() {\n 71          return name;\n 72      }\n 73  \n 74      public void setName(String name) {\n 75          this.name = name;\n 76      }\n 77  \n 78      public String getEmail() {\n 79          return email;\n 80      }\n 81  \n 82      public void setEmail(String email) {\n 83          this.email = email;\n 84      }\n 85  \n 86      public String getPhoneNumber() {\n 87          return phoneNumber;\n 88      }\n 89  \n 90      public void setPhoneNumber(String phoneNumber) {\n 91          this.phoneNumber = phoneNumber;\n 92      }\n 93  }\n","lineNumber":22,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","kind":"Module","name":"javax.persistence.Entity","renamed":"persistence"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","message":"Replace the `javax.validation` import statement with `jakarta.validation`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.model;\n 18  \n 19  import java.io.Serializable;\n 20  \n 21  import javax.persistence.Column;\n 22  import javax.persistence.Entity;\n 23  import javax.persistence.GeneratedValue;\n 24  import javax.persistence.Id;\n 25  import javax.persistence.Table;\n 26  import javax.persistence.UniqueConstraint;\n 27  import javax.validation.constraints.Digits;\n 28  import javax.validation.constraints.NotNull;\n 29  import javax.validation.constraints.Pattern;\n 30  import javax.validation.constraints.Size;\n 31  import javax.xml.bind.annotation.XmlRootElement;\n 32  \n 33  import javax.validation.constraints.Email;\n 34  import javax.validation.constraints.NotEmpty;\n 35  \n 36  @SuppressWarnings(\"serial\")\n 37  @Entity\n 38  @XmlRootElement\n 39  @Table(uniqueConstraints = @UniqueConstraint(columnNames = \"email\"))\n 40  public class Member implements Serializable {\n 41  \n 42      @Id\n 43      @GeneratedValue\n 44      private Long id;\n 45  \n 46      @NotNull\n 47      @Size(min = 1, max = 25)\n 48      @Pattern(regexp = \"[^0-9]*\", message = \"Must not contain numbers\")\n 49      private String name;\n 50  \n 51      @NotNull\n 52      @NotEmpty\n 53      @Email\n 54      private String email;\n 55  \n 56      @NotNull\n 57      @Size(min = 10, max = 12)\n 58      @Digits(fraction = 0, integer = 12)\n 59      @Column(name = \"phone_number\")\n 60      private String phoneNumber;\n 61  \n 62      public Long getId() {\n 63          return id;\n 64      }\n 65  \n 66      public void setId(Long id) {\n 67          this.id = id;\n 68      }\n 69  \n 70      public String getName() {\n 71          return name;\n 72      }\n 73  \n 74      public void setName(String name) {\n 75          this.name = name;\n 76      }\n 77  \n 78      public String getEmail() {\n 79          return email;\n 80      }\n 81  \n 82      public void setEmail(String email) {\n 83          this.email = email;\n 84      }\n 85  \n 86      public String getPhoneNumber() {\n 87          return phoneNumber;\n 88      }\n 89  \n 90      public void setPhoneNumber(String phoneNumber) {\n 91          this.phoneNumber = phoneNumber;\n 92      }\n 93  }\n","lineNumber":27,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","kind":"Module","name":"javax.validation.constraints.Digits","renamed":"validation"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.model;\n 18  \n 19  import java.io.Serializable;\n 20  \n 21  import javax.persistence.Column;\n 22  import javax.persistence.Entity;\n 23  import javax.persistence.GeneratedValue;\n 24  import javax.persistence.Id;\n 25  import javax.persistence.Table;\n 26  import javax.persistence.UniqueConstraint;\n 27  import javax.validation.constraints.Digits;\n 28  import javax.validation.constraints.NotNull;\n 29  import javax.validation.constraints.Pattern;\n 30  import javax.validation.constraints.Size;\n 31  import javax.xml.bind.annotation.XmlRootElement;\n 32  \n 33  import javax.validation.constraints.Email;\n 34  import javax.validation.constraints.NotEmpty;\n 35  \n 36  @SuppressWarnings(\"serial\")\n 37  @Entity\n 38  @XmlRootElement\n 39  @Table(uniqueConstraints = @UniqueConstraint(columnNames = \"email\"))\n 40  public class Member implements Serializable {\n 41  \n 42      @Id\n 43      @GeneratedValue\n 44      private Long id;\n 45  \n 46      @NotNull\n 47      @Size(min = 1, max = 25)\n 48      @Pattern(regexp = \"[^0-9]*\", message = \"Must not contain numbers\")\n 49      private String name;\n 50  \n 51      @NotNull\n 52      @NotEmpty\n 53      @Email\n 54      private String email;\n 55  \n 56      @NotNull\n 57      @Size(min = 10, max = 12)\n 58      @Digits(fraction = 0, integer = 12)\n 59      @Column(name = \"phone_number\")\n 60      private String phoneNumber;\n 61  \n 62      public Long getId() {\n 63          return id;\n 64      }\n 65  \n 66      public void setId(Long id) {\n 67          this.id = id;\n 68      }\n 69  \n 70      public String getName() {\n 71          return name;\n 72      }\n 73  \n 74      public void setName(String name) {\n 75          this.name = name;\n 76      }\n 77  \n 78      public String getEmail() {\n 79          return email;\n 80      }\n 81  \n 82      public void setEmail(String email) {\n 83          this.email = email;\n 84      }\n 85  \n 86      public String getPhoneNumber() {\n 87          return phoneNumber;\n 88      }\n 89  \n 90      public void setPhoneNumber(String phoneNumber) {\n 91          this.phoneNumber = phoneNumber;\n 92      }\n 93  }\n","lineNumber":24,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","kind":"Module","name":"javax.persistence.Id","renamed":"persistence"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.model;\n 18  \n 19  import java.io.Serializable;\n 20  \n 21  import javax.persistence.Column;\n 22  import javax.persistence.Entity;\n 23  import javax.persistence.GeneratedValue;\n 24  import javax.persistence.Id;\n 25  import javax.persistence.Table;\n 26  import javax.persistence.UniqueConstraint;\n 27  import javax.validation.constraints.Digits;\n 28  import javax.validation.constraints.NotNull;\n 29  import javax.validation.constraints.Pattern;\n 30  import javax.validation.constraints.Size;\n 31  import javax.xml.bind.annotation.XmlRootElement;\n 32  \n 33  import javax.validation.constraints.Email;\n 34  import javax.validation.constraints.NotEmpty;\n 35  \n 36  @SuppressWarnings(\"serial\")\n 37  @Entity\n 38  @XmlRootElement\n 39  @Table(uniqueConstraints = @UniqueConstraint(columnNames = \"email\"))\n 40  public class Member implements Serializable {\n 41  \n 42      @Id\n 43      @GeneratedValue\n 44      private Long id;\n 45  \n 46      @NotNull\n 47      @Size(min = 1, max = 25)\n 48      @Pattern(regexp = \"[^0-9]*\", message = \"Must not contain numbers\")\n 49      private String name;\n 50  \n 51      @NotNull\n 52      @NotEmpty\n 53      @Email\n 54      private String email;\n 55  \n 56      @NotNull\n 57      @Size(min = 10, max = 12)\n 58      @Digits(fraction = 0, integer = 12)\n 59      @Column(name = \"phone_number\")\n 60      private String phoneNumber;\n 61  \n 62      public Long getId() {\n 63          return id;\n 64      }\n 65  \n 66      public void setId(Long id) {\n 67          this.id = id;\n 68      }\n 69  \n 70      public String getName() {\n 71          return name;\n 72      }\n 73  \n 74      public void setName(String name) {\n 75          this.name = name;\n 76      }\n 77  \n 78      public String getEmail() {\n 79          return email;\n 80      }\n 81  \n 82      public void setEmail(String email) {\n 83          this.email = email;\n 84      }\n 85  \n 86      public String getPhoneNumber() {\n 87          return phoneNumber;\n 88      }\n 89  \n 90      public void setPhoneNumber(String phoneNumber) {\n 91          this.phoneNumber = phoneNumber;\n 92      }\n 93  }\n","lineNumber":25,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","kind":"Module","name":"javax.persistence.Table","renamed":"persistence"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","message":"Replace the `javax.validation` import statement with `jakarta.validation`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.model;\n 18  \n 19  import java.io.Serializable;\n 20  \n 21  import javax.persistence.Column;\n 22  import javax.persistence.Entity;\n 23  import javax.persistence.GeneratedValue;\n 24  import javax.persistence.Id;\n 25  import javax.persistence.Table;\n 26  import javax.persistence.UniqueConstraint;\n 27  import javax.validation.constraints.Digits;\n 28  import javax.validation.constraints.NotNull;\n 29  import javax.validation.constraints.Pattern;\n 30  import javax.validation.constraints.Size;\n 31  import javax.xml.bind.annotation.XmlRootElement;\n 32  \n 33  import javax.validation.constraints.Email;\n 34  import javax.validation.constraints.NotEmpty;\n 35  \n 36  @SuppressWarnings(\"serial\")\n 37  @Entity\n 38  @XmlRootElement\n 39  @Table(uniqueConstraints = @UniqueConstraint(columnNames = \"email\"))\n 40  public class Member implements Serializable {\n 41  \n 42      @Id\n 43      @GeneratedValue\n 44      private Long id;\n 45  \n 46      @NotNull\n 47      @Size(min = 1, max = 25)\n 48      @Pattern(regexp = \"[^0-9]*\", message = \"Must not contain numbers\")\n 49      private String name;\n 50  \n 51      @NotNull\n 52      @NotEmpty\n 53      @Email\n 54      private String email;\n 55  \n 56      @NotNull\n 57      @Size(min = 10, max = 12)\n 58      @Digits(fraction = 0, integer = 12)\n 59      @Column(name = \"phone_number\")\n 60      private String phoneNumber;\n 61  \n 62      public Long getId() {\n 63          return id;\n 64      }\n 65  \n 66      public void setId(Long id) {\n 67          this.id = id;\n 68      }\n 69  \n 70      public String getName() {\n 71          return name;\n 72      }\n 73  \n 74      public void setName(String name) {\n 75          this.name = name;\n 76      }\n 77  \n 78      public String getEmail() {\n 79          return email;\n 80      }\n 81  \n 82      public void setEmail(String email) {\n 83          this.email = email;\n 84      }\n 85  \n 86      public String getPhoneNumber() {\n 87          return phoneNumber;\n 88      }\n 89  \n 90      public void setPhoneNumber(String phoneNumber) {\n 91          this.phoneNumber = phoneNumber;\n 92      }\n 93  }\n","lineNumber":30,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","kind":"Module","name":"javax.validation.constraints.Size","renamed":"validation"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.model;\n 18  \n 19  import java.io.Serializable;\n 20  \n 21  import javax.persistence.Column;\n 22  import javax.persistence.Entity;\n 23  import javax.persistence.GeneratedValue;\n 24  import javax.persistence.Id;\n 25  import javax.persistence.Table;\n 26  import javax.persistence.UniqueConstraint;\n 27  import javax.validation.constraints.Digits;\n 28  import javax.validation.constraints.NotNull;\n 29  import javax.validation.constraints.Pattern;\n 30  import javax.validation.constraints.Size;\n 31  import javax.xml.bind.annotation.XmlRootElement;\n 32  \n 33  import javax.validation.constraints.Email;\n 34  import javax.validation.constraints.NotEmpty;\n 35  \n 36  @SuppressWarnings(\"serial\")\n 37  @Entity\n 38  @XmlRootElement\n 39  @Table(uniqueConstraints = @UniqueConstraint(columnNames = \"email\"))\n 40  public class Member implements Serializable {\n 41  \n 42      @Id\n 43      @GeneratedValue\n 44      private Long id;\n 45  \n 46      @NotNull\n 47      @Size(min = 1, max = 25)\n 48      @Pattern(regexp = \"[^0-9]*\", message = \"Must not contain numbers\")\n 49      private String name;\n 50  \n 51      @NotNull\n 52      @NotEmpty\n 53      @Email\n 54      private String email;\n 55  \n 56      @NotNull\n 57      @Size(min = 10, max = 12)\n 58      @Digits(fraction = 0, integer = 12)\n 59      @Column(name = \"phone_number\")\n 60      private String phoneNumber;\n 61  \n 62      public Long getId() {\n 63          return id;\n 64      }\n 65  \n 66      public void setId(Long id) {\n 67          this.id = id;\n 68      }\n 69  \n 70      public String getName() {\n 71          return name;\n 72      }\n 73  \n 74      public void setName(String name) {\n 75          this.name = name;\n 76      }\n 77  \n 78      public String getEmail() {\n 79          return email;\n 80      }\n 81  \n 82      public void setEmail(String email) {\n 83          this.email = email;\n 84      }\n 85  \n 86      public String getPhoneNumber() {\n 87          return phoneNumber;\n 88      }\n 89  \n 90      public void setPhoneNumber(String phoneNumber) {\n 91          this.phoneNumber = phoneNumber;\n 92      }\n 93  }\n","lineNumber":26,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","kind":"Module","name":"javax.persistence.UniqueConstraint","renamed":"persistence"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","message":"Replace the `javax.xml` import statement with `jakarta.xml`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.model;\n 18  \n 19  import java.io.Serializable;\n 20  \n 21  import javax.persistence.Column;\n 22  import javax.persistence.Entity;\n 23  import javax.persistence.GeneratedValue;\n 24  import javax.persistence.Id;\n 25  import javax.persistence.Table;\n 26  import javax.persistence.UniqueConstraint;\n 27  import javax.validation.constraints.Digits;\n 28  import javax.validation.constraints.NotNull;\n 29  import javax.validation.constraints.Pattern;\n 30  import javax.validation.constraints.Size;\n 31  import javax.xml.bind.annotation.XmlRootElement;\n 32  \n 33  import javax.validation.constraints.Email;\n 34  import javax.validation.constraints.NotEmpty;\n 35  \n 36  @SuppressWarnings(\"serial\")\n 37  @Entity\n 38  @XmlRootElement\n 39  @Table(uniqueConstraints = @UniqueConstraint(columnNames = \"email\"))\n 40  public class Member implements Serializable {\n 41  \n 42      @Id\n 43      @GeneratedValue\n 44      private Long id;\n 45  \n 46      @NotNull\n 47      @Size(min = 1, max = 25)\n 48      @Pattern(regexp = \"[^0-9]*\", message = \"Must not contain numbers\")\n 49      private String name;\n 50  \n 51      @NotNull\n 52      @NotEmpty\n 53      @Email\n 54      private String email;\n 55  \n 56      @NotNull\n 57      @Size(min = 10, max = 12)\n 58      @Digits(fraction = 0, integer = 12)\n 59      @Column(name = \"phone_number\")\n 60      private String phoneNumber;\n 61  \n 62      public Long getId() {\n 63          return id;\n 64      }\n 65  \n 66      public void setId(Long id) {\n 67          this.id = id;\n 68      }\n 69  \n 70      public String getName() {\n 71          return name;\n 72      }\n 73  \n 74      public void setName(String name) {\n 75          this.name = name;\n 76      }\n 77  \n 78      public String getEmail() {\n 79          return email;\n 80      }\n 81  \n 82      public void setEmail(String email) {\n 83          this.email = email;\n 84      }\n 85  \n 86      public String getPhoneNumber() {\n 87          return phoneNumber;\n 88      }\n 89  \n 90      public void setPhoneNumber(String phoneNumber) {\n 91          this.phoneNumber = phoneNumber;\n 92      }\n 93  }\n","lineNumber":31,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","kind":"Module","name":"javax.xml.bind.annotation.XmlRootElement","renamed":"xml"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","message":"Replace the `javax.validation` import statement with `jakarta.validation`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.model;\n 18  \n 19  import java.io.Serializable;\n 20  \n 21  import javax.persistence.Column;\n 22  import javax.persistence.Entity;\n 23  import javax.persistence.GeneratedValue;\n 24  import javax.persistence.Id;\n 25  import javax.persistence.Table;\n 26  import javax.persistence.UniqueConstraint;\n 27  import javax.validation.constraints.Digits;\n 28  import javax.validation.constraints.NotNull;\n 29  import javax.validation.constraints.Pattern;\n 30  import javax.validation.constraints.Size;\n 31  import javax.xml.bind.annotation.XmlRootElement;\n 32  \n 33  import javax.validation.constraints.Email;\n 34  import javax.validation.constraints.NotEmpty;\n 35  \n 36  @SuppressWarnings(\"serial\")\n 37  @Entity\n 38  @XmlRootElement\n 39  @Table(uniqueConstraints = @UniqueConstraint(columnNames = \"email\"))\n 40  public class Member implements Serializable {\n 41  \n 42      @Id\n 43      @GeneratedValue\n 44      private Long id;\n 45  \n 46      @NotNull\n 47      @Size(min = 1, max = 25)\n 48      @Pattern(regexp = \"[^0-9]*\", message = \"Must not contain numbers\")\n 49      private String name;\n 50  \n 51      @NotNull\n 52      @NotEmpty\n 53      @Email\n 54      private String email;\n 55  \n 56      @NotNull\n 57      @Size(min = 10, max = 12)\n 58      @Digits(fraction = 0, integer = 12)\n 59      @Column(name = \"phone_number\")\n 60      private String phoneNumber;\n 61  \n 62      public Long getId() {\n 63          return id;\n 64      }\n 65  \n 66      public void setId(Long id) {\n 67          this.id = id;\n 68      }\n 69  \n 70      public String getName() {\n 71          return name;\n 72      }\n 73  \n 74      public void setName(String name) {\n 75          this.name = name;\n 76      }\n 77  \n 78      public String getEmail() {\n 79          return email;\n 80      }\n 81  \n 82      public void setEmail(String email) {\n 83          this.email = email;\n 84      }\n 85  \n 86      public String getPhoneNumber() {\n 87          return phoneNumber;\n 88      }\n 89  \n 90      public void setPhoneNumber(String phoneNumber) {\n 91          this.phoneNumber = phoneNumber;\n 92      }\n 93  }\n","lineNumber":29,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","kind":"Module","name":"javax.validation.constraints.Pattern","renamed":"validation"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.model;\n 18  \n 19  import java.io.Serializable;\n 20  \n 21  import javax.persistence.Column;\n 22  import javax.persistence.Entity;\n 23  import javax.persistence.GeneratedValue;\n 24  import javax.persistence.Id;\n 25  import javax.persistence.Table;\n 26  import javax.persistence.UniqueConstraint;\n 27  import javax.validation.constraints.Digits;\n 28  import javax.validation.constraints.NotNull;\n 29  import javax.validation.constraints.Pattern;\n 30  import javax.validation.constraints.Size;\n 31  import javax.xml.bind.annotation.XmlRootElement;\n 32  \n 33  import javax.validation.constraints.Email;\n 34  import javax.validation.constraints.NotEmpty;\n 35  \n 36  @SuppressWarnings(\"serial\")\n 37  @Entity\n 38  @XmlRootElement\n 39  @Table(uniqueConstraints = @UniqueConstraint(columnNames = \"email\"))\n 40  public class Member implements Serializable {\n 41  \n 42      @Id\n 43      @GeneratedValue\n 44      private Long id;\n 45  \n 46      @NotNull\n 47      @Size(min = 1, max = 25)\n 48      @Pattern(regexp = \"[^0-9]*\", message = \"Must not contain numbers\")\n 49      private String name;\n 50  \n 51      @NotNull\n 52      @NotEmpty\n 53      @Email\n 54      private String email;\n 55  \n 56      @NotNull\n 57      @Size(min = 10, max = 12)\n 58      @Digits(fraction = 0, integer = 12)\n 59      @Column(name = \"phone_number\")\n 60      private String phoneNumber;\n 61  \n 62      public Long getId() {\n 63          return id;\n 64      }\n 65  \n 66      public void setId(Long id) {\n 67          this.id = id;\n 68      }\n 69  \n 70      public String getName() {\n 71          return name;\n 72      }\n 73  \n 74      public void setName(String name) {\n 75          this.name = name;\n 76      }\n 77  \n 78      public String getEmail() {\n 79          return email;\n 80      }\n 81  \n 82      public void setEmail(String email) {\n 83          this.email = email;\n 84      }\n 85  \n 86      public String getPhoneNumber() {\n 87          return phoneNumber;\n 88      }\n 89  \n 90      public void setPhoneNumber(String phoneNumber) {\n 91          this.phoneNumber = phoneNumber;\n 92      }\n 93  }\n","lineNumber":23,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","kind":"Module","name":"javax.persistence.GeneratedValue","renamed":"persistence"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","message":"Replace the `javax.validation` import statement with `jakarta.validation`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.model;\n 18  \n 19  import java.io.Serializable;\n 20  \n 21  import javax.persistence.Column;\n 22  import javax.persistence.Entity;\n 23  import javax.persistence.GeneratedValue;\n 24  import javax.persistence.Id;\n 25  import javax.persistence.Table;\n 26  import javax.persistence.UniqueConstraint;\n 27  import javax.validation.constraints.Digits;\n 28  import javax.validation.constraints.NotNull;\n 29  import javax.validation.constraints.Pattern;\n 30  import javax.validation.constraints.Size;\n 31  import javax.xml.bind.annotation.XmlRootElement;\n 32  \n 33  import javax.validation.constraints.Email;\n 34  import javax.validation.constraints.NotEmpty;\n 35  \n 36  @SuppressWarnings(\"serial\")\n 37  @Entity\n 38  @XmlRootElement\n 39  @Table(uniqueConstraints = @UniqueConstraint(columnNames = \"email\"))\n 40  public class Member implements Serializable {\n 41  \n 42      @Id\n 43      @GeneratedValue\n 44      private Long id;\n 45  \n 46      @NotNull\n 47      @Size(min = 1, max = 25)\n 48      @Pattern(regexp = \"[^0-9]*\", message = \"Must not contain numbers\")\n 49      private String name;\n 50  \n 51      @NotNull\n 52      @NotEmpty\n 53      @Email\n 54      private String email;\n 55  \n 56      @NotNull\n 57      @Size(min = 10, max = 12)\n 58      @Digits(fraction = 0, integer = 12)\n 59      @Column(name = \"phone_number\")\n 60      private String phoneNumber;\n 61  \n 62      public Long getId() {\n 63          return id;\n 64      }\n 65  \n 66      public void setId(Long id) {\n 67          this.id = id;\n 68      }\n 69  \n 70      public String getName() {\n 71          return name;\n 72      }\n 73  \n 74      public void setName(String name) {\n 75          this.name = name;\n 76      }\n 77  \n 78      public String getEmail() {\n 79          return email;\n 80      }\n 81  \n 82      public void setEmail(String email) {\n 83          this.email = email;\n 84      }\n 85  \n 86      public String getPhoneNumber() {\n 87          return phoneNumber;\n 88      }\n 89  \n 90      public void setPhoneNumber(String phoneNumber) {\n 91          this.phoneNumber = phoneNumber;\n 92      }\n 93  }\n","lineNumber":28,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","kind":"Module","name":"javax.validation.constraints.NotNull","renamed":"validation"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.model;\n 18  \n 19  import java.io.Serializable;\n 20  \n 21  import javax.persistence.Column;\n 22  import javax.persistence.Entity;\n 23  import javax.persistence.GeneratedValue;\n 24  import javax.persistence.Id;\n 25  import javax.persistence.Table;\n 26  import javax.persistence.UniqueConstraint;\n 27  import javax.validation.constraints.Digits;\n 28  import javax.validation.constraints.NotNull;\n 29  import javax.validation.constraints.Pattern;\n 30  import javax.validation.constraints.Size;\n 31  import javax.xml.bind.annotation.XmlRootElement;\n 32  \n 33  import javax.validation.constraints.Email;\n 34  import javax.validation.constraints.NotEmpty;\n 35  \n 36  @SuppressWarnings(\"serial\")\n 37  @Entity\n 38  @XmlRootElement\n 39  @Table(uniqueConstraints = @UniqueConstraint(columnNames = \"email\"))\n 40  public class Member implements Serializable {\n 41  \n 42      @Id\n 43      @GeneratedValue\n 44      private Long id;\n 45  \n 46      @NotNull\n 47      @Size(min = 1, max = 25)\n 48      @Pattern(regexp = \"[^0-9]*\", message = \"Must not contain numbers\")\n 49      private String name;\n 50  \n 51      @NotNull\n 52      @NotEmpty\n 53      @Email\n 54      private String email;\n 55  \n 56      @NotNull\n 57      @Size(min = 10, max = 12)\n 58      @Digits(fraction = 0, integer = 12)\n 59      @Column(name = \"phone_number\")\n 60      private String phoneNumber;\n 61  \n 62      public Long getId() {\n 63          return id;\n 64      }\n 65  \n 66      public void setId(Long id) {\n 67          this.id = id;\n 68      }\n 69  \n 70      public String getName() {\n 71          return name;\n 72      }\n 73  \n 74      public void setName(String name) {\n 75          this.name = name;\n 76      }\n 77  \n 78      public String getEmail() {\n 79          return email;\n 80      }\n 81  \n 82      public void setEmail(String email) {\n 83          this.email = email;\n 84      }\n 85  \n 86      public String getPhoneNumber() {\n 87          return phoneNumber;\n 88      }\n 89  \n 90      public void setPhoneNumber(String phoneNumber) {\n 91          this.phoneNumber = phoneNumber;\n 92      }\n 93  }\n","lineNumber":21,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/model/Member.java","kind":"Module","name":"javax.persistence.Column","renamed":"persistence"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/JaxRsActivator.java","message":"Replace the `javax.ws` import statement with `jakarta.ws`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import javax.ws.rs.ApplicationPath;\n 20  import javax.ws.rs.core.Application;\n 21  \n 22  /**\n 23   * A class extending {@link Application} and annotated with @ApplicationPath is the Jakarta EE \"no XML\" approach to activating\n 24   * JAX-RS.\n 25   * \u003cp\u003e\n 26   * \u003cp\u003e\n 27   * Resources are served relative to the servlet path specified in the {@link ApplicationPath} annotation.\n 28   * \u003c/p\u003e\n 29   */\n 30  @ApplicationPath(\"/rest\")\n 31  public class JaxRsActivator extends Application {\n 32      /* class body intentionally left blank */\n 33  }\n","lineNumber":19,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/JaxRsActivator.java","kind":"Module","name":"javax.ws.rs.ApplicationPath","renamed":"ws"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/JaxRsActivator.java","message":"Replace the `javax.ws` import statement with `jakarta.ws`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import javax.ws.rs.ApplicationPath;\n 20  import javax.ws.rs.core.Application;\n 21  \n 22  /**\n 23   * A class extending {@link Application} and annotated with @ApplicationPath is the Jakarta EE \"no XML\" approach to activating\n 24   * JAX-RS.\n 25   * \u003cp\u003e\n 26   * \u003cp\u003e\n 27   * Resources are served relative to the servlet path specified in the {@link ApplicationPath} annotation.\n 28   * \u003c/p\u003e\n 29   */\n 30  @ApplicationPath(\"/rest\")\n 31  public class JaxRsActivator extends Application {\n 32      /* class body intentionally left blank */\n 33  }\n","lineNumber":20,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/JaxRsActivator.java","kind":"Module","name":"javax.ws.rs.core.Application","renamed":"ws"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import java.util.HashMap;\n 20  import java.util.HashSet;\n 21  import java.util.List;\n 22  import java.util.Map;\n 23  import java.util.Set;\n 24  import java.util.logging.Logger;\n 25  \n 26  import javax.enterprise.context.RequestScoped;\n 27  import javax.inject.Inject;\n 28  import javax.persistence.NoResultException;\n 29  import javax.validation.ConstraintViolation;\n 30  import javax.validation.ConstraintViolationException;\n 31  import javax.validation.ValidationException;\n 32  import javax.validation.Validator;\n 33  import javax.ws.rs.Consumes;\n 34  import javax.ws.rs.GET;\n 35  import javax.ws.rs.POST;\n 36  import javax.ws.rs.Path;\n 37  import javax.ws.rs.PathParam;\n 38  import javax.ws.rs.Produces;\n 39  import javax.ws.rs.WebApplicationException;\n 40  import javax.ws.rs.core.MediaType;\n 41  import javax.ws.rs.core.Response;\n 42  \n 43  import org.jboss.as.quickstarts.kitchensink.data.MemberRepository;\n 44  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 45  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 46  \n 47  /**\n 48   * JAX-RS Example\n 49   * \u003cp/\u003e\n 50   * This class produces a RESTful service to read/write the contents of the members table.\n 51   */\n 52  @Path(\"/members\")\n 53  @RequestScoped\n 54  public class MemberResourceRESTService {\n 55  \n 56      @Inject\n 57      private Logger log;\n 58  \n 59      @Inject\n 60      private Validator validator;\n 61  \n 62      @Inject\n 63      private MemberRepository repository;\n 64  \n 65      @Inject\n 66      MemberRegistration registration;\n 67  \n 68      @GET\n 69      @Produces(MediaType.APPLICATION_JSON)\n 70      public List\u003cMember\u003e listAllMembers() {\n 71          return repository.findAllOrderedByName();\n 72      }\n 73  \n 74      @GET\n 75      @Path(\"/{id:[0-9][0-9]*}\")\n 76      @Produces(MediaType.APPLICATION_JSON)\n 77      public Member lookupMemberById(@PathParam(\"id\") long id) {\n 78          Member member = repository.findById(id);\n 79          if (member == null) {\n 80              throw new WebApplicationException(Response.Status.NOT_FOUND);\n 81          }\n 82          return member;\n 83      }\n 84  \n 85      /**\n 86       * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,\n 87       * or with a map of fields, and related errors.\n 88       */\n 89      @POST\n 90      @Consumes(MediaType.APPLICATION_JSON)\n 91      @Produces(MediaType.APPLICATION_JSON)\n 92      public Response createMember(Member member) {\n 93  \n 94          Response.ResponseBuilder builder = null;\n 95  \n 96          try {\n 97              // Validates member using bean validation\n 98              validateMember(member);\n 99  \n100              registration.register(member);\n101  \n102              // Create an \"ok\" response\n103              builder = Response.ok();\n104          } catch (ConstraintViolationException ce) {\n105              // Handle bean validation issues\n106              builder = createViolationResponse(ce.getConstraintViolations());\n107          } catch (ValidationException e) {\n108              // Handle the unique constrain violation\n109              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n110              responseObj.put(\"email\", \"Email taken\");\n111              builder = Response.status(Response.Status.CONFLICT).entity(responseObj);\n112          } catch (Exception e) {\n113              // Handle generic exceptions\n114              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n115              responseObj.put(\"error\", e.getMessage());\n116              builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n117          }\n118  \n119          return builder.build();\n120      }\n121  \n122      /**\n123       * \u003cp\u003e\n124       * Validates the given Member variable and throws validation exceptions based on the type of error. If the error is standard\n125       * bean validation errors then it will throw a ConstraintValidationException with the set of the constraints violated.\n126       * \u003c/p\u003e\n127       * \u003cp\u003e\n128       * If the error is caused because an existing member with the same email is registered it throws a regular validation","lineNumber":28,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","kind":"Module","name":"javax.persistence.NoResultException","renamed":"persistence"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","message":"Replace the `javax.enterprise` import statement with `jakarta.enterprise`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import java.util.HashMap;\n 20  import java.util.HashSet;\n 21  import java.util.List;\n 22  import java.util.Map;\n 23  import java.util.Set;\n 24  import java.util.logging.Logger;\n 25  \n 26  import javax.enterprise.context.RequestScoped;\n 27  import javax.inject.Inject;\n 28  import javax.persistence.NoResultException;\n 29  import javax.validation.ConstraintViolation;\n 30  import javax.validation.ConstraintViolationException;\n 31  import javax.validation.ValidationException;\n 32  import javax.validation.Validator;\n 33  import javax.ws.rs.Consumes;\n 34  import javax.ws.rs.GET;\n 35  import javax.ws.rs.POST;\n 36  import javax.ws.rs.Path;\n 37  import javax.ws.rs.PathParam;\n 38  import javax.ws.rs.Produces;\n 39  import javax.ws.rs.WebApplicationException;\n 40  import javax.ws.rs.core.MediaType;\n 41  import javax.ws.rs.core.Response;\n 42  \n 43  import org.jboss.as.quickstarts.kitchensink.data.MemberRepository;\n 44  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 45  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 46  \n 47  /**\n 48   * JAX-RS Example\n 49   * \u003cp/\u003e\n 50   * This class produces a RESTful service to read/write the contents of the members table.\n 51   */\n 52  @Path(\"/members\")\n 53  @RequestScoped\n 54  public class MemberResourceRESTService {\n 55  \n 56      @Inject\n 57      private Logger log;\n 58  \n 59      @Inject\n 60      private Validator validator;\n 61  \n 62      @Inject\n 63      private MemberRepository repository;\n 64  \n 65      @Inject\n 66      MemberRegistration registration;\n 67  \n 68      @GET\n 69      @Produces(MediaType.APPLICATION_JSON)\n 70      public List\u003cMember\u003e listAllMembers() {\n 71          return repository.findAllOrderedByName();\n 72      }\n 73  \n 74      @GET\n 75      @Path(\"/{id:[0-9][0-9]*}\")\n 76      @Produces(MediaType.APPLICATION_JSON)\n 77      public Member lookupMemberById(@PathParam(\"id\") long id) {\n 78          Member member = repository.findById(id);\n 79          if (member == null) {\n 80              throw new WebApplicationException(Response.Status.NOT_FOUND);\n 81          }\n 82          return member;\n 83      }\n 84  \n 85      /**\n 86       * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,\n 87       * or with a map of fields, and related errors.\n 88       */\n 89      @POST\n 90      @Consumes(MediaType.APPLICATION_JSON)\n 91      @Produces(MediaType.APPLICATION_JSON)\n 92      public Response createMember(Member member) {\n 93  \n 94          Response.ResponseBuilder builder = null;\n 95  \n 96          try {\n 97              // Validates member using bean validation\n 98              validateMember(member);\n 99  \n100              registration.register(member);\n101  \n102              // Create an \"ok\" response\n103              builder = Response.ok();\n104          } catch (ConstraintViolationException ce) {\n105              // Handle bean validation issues\n106              builder = createViolationResponse(ce.getConstraintViolations());\n107          } catch (ValidationException e) {\n108              // Handle the unique constrain violation\n109              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n110              responseObj.put(\"email\", \"Email taken\");\n111              builder = Response.status(Response.Status.CONFLICT).entity(responseObj);\n112          } catch (Exception e) {\n113              // Handle generic exceptions\n114              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n115              responseObj.put(\"error\", e.getMessage());\n116              builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n117          }\n118  \n119          return builder.build();\n120      }\n121  \n122      /**\n123       * \u003cp\u003e\n124       * Validates the given Member variable and throws validation exceptions based on the type of error. If the error is standard\n125       * bean validation errors then it will throw a ConstraintValidationException with the set of the constraints violated.\n126       * \u003c/p\u003e","lineNumber":26,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","kind":"Module","name":"javax.enterprise.context.RequestScoped","renamed":"enterprise"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","message":"Replace the `javax.validation` import statement with `jakarta.validation`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import java.util.HashMap;\n 20  import java.util.HashSet;\n 21  import java.util.List;\n 22  import java.util.Map;\n 23  import java.util.Set;\n 24  import java.util.logging.Logger;\n 25  \n 26  import javax.enterprise.context.RequestScoped;\n 27  import javax.inject.Inject;\n 28  import javax.persistence.NoResultException;\n 29  import javax.validation.ConstraintViolation;\n 30  import javax.validation.ConstraintViolationException;\n 31  import javax.validation.ValidationException;\n 32  import javax.validation.Validator;\n 33  import javax.ws.rs.Consumes;\n 34  import javax.ws.rs.GET;\n 35  import javax.ws.rs.POST;\n 36  import javax.ws.rs.Path;\n 37  import javax.ws.rs.PathParam;\n 38  import javax.ws.rs.Produces;\n 39  import javax.ws.rs.WebApplicationException;\n 40  import javax.ws.rs.core.MediaType;\n 41  import javax.ws.rs.core.Response;\n 42  \n 43  import org.jboss.as.quickstarts.kitchensink.data.MemberRepository;\n 44  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 45  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 46  \n 47  /**\n 48   * JAX-RS Example\n 49   * \u003cp/\u003e\n 50   * This class produces a RESTful service to read/write the contents of the members table.\n 51   */\n 52  @Path(\"/members\")\n 53  @RequestScoped\n 54  public class MemberResourceRESTService {\n 55  \n 56      @Inject\n 57      private Logger log;\n 58  \n 59      @Inject\n 60      private Validator validator;\n 61  \n 62      @Inject\n 63      private MemberRepository repository;\n 64  \n 65      @Inject\n 66      MemberRegistration registration;\n 67  \n 68      @GET\n 69      @Produces(MediaType.APPLICATION_JSON)\n 70      public List\u003cMember\u003e listAllMembers() {\n 71          return repository.findAllOrderedByName();\n 72      }\n 73  \n 74      @GET\n 75      @Path(\"/{id:[0-9][0-9]*}\")\n 76      @Produces(MediaType.APPLICATION_JSON)\n 77      public Member lookupMemberById(@PathParam(\"id\") long id) {\n 78          Member member = repository.findById(id);\n 79          if (member == null) {\n 80              throw new WebApplicationException(Response.Status.NOT_FOUND);\n 81          }\n 82          return member;\n 83      }\n 84  \n 85      /**\n 86       * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,\n 87       * or with a map of fields, and related errors.\n 88       */\n 89      @POST\n 90      @Consumes(MediaType.APPLICATION_JSON)\n 91      @Produces(MediaType.APPLICATION_JSON)\n 92      public Response createMember(Member member) {\n 93  \n 94          Response.ResponseBuilder builder = null;\n 95  \n 96          try {\n 97              // Validates member using bean validation\n 98              validateMember(member);\n 99  \n100              registration.register(member);\n101  \n102              // Create an \"ok\" response\n103              builder = Response.ok();\n104          } catch (ConstraintViolationException ce) {\n105              // Handle bean validation issues\n106              builder = createViolationResponse(ce.getConstraintViolations());\n107          } catch (ValidationException e) {\n108              // Handle the unique constrain violation\n109              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n110              responseObj.put(\"email\", \"Email taken\");\n111              builder = Response.status(Response.Status.CONFLICT).entity(responseObj);\n112          } catch (Exception e) {\n113              // Handle generic exceptions\n114              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n115              responseObj.put(\"error\", e.getMessage());\n116              builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n117          }\n118  \n119          return builder.build();\n120      }\n121  \n122      /**\n123       * \u003cp\u003e\n124       * Validates the given Member variable and throws validation exceptions based on the type of error. If the error is standard\n125       * bean validation errors then it will throw a ConstraintValidationException with the set of the constraints violated.\n126       * \u003c/p\u003e\n127       * \u003cp\u003e\n128       * If the error is caused because an existing member with the same email is registered it throws a regular validation\n129       * exception so that it can be interpreted separately.","lineNumber":29,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","kind":"Module","name":"javax.validation.ConstraintViolation","renamed":"validation"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","message":"Replace the `javax.validation` import statement with `jakarta.validation`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import java.util.HashMap;\n 20  import java.util.HashSet;\n 21  import java.util.List;\n 22  import java.util.Map;\n 23  import java.util.Set;\n 24  import java.util.logging.Logger;\n 25  \n 26  import javax.enterprise.context.RequestScoped;\n 27  import javax.inject.Inject;\n 28  import javax.persistence.NoResultException;\n 29  import javax.validation.ConstraintViolation;\n 30  import javax.validation.ConstraintViolationException;\n 31  import javax.validation.ValidationException;\n 32  import javax.validation.Validator;\n 33  import javax.ws.rs.Consumes;\n 34  import javax.ws.rs.GET;\n 35  import javax.ws.rs.POST;\n 36  import javax.ws.rs.Path;\n 37  import javax.ws.rs.PathParam;\n 38  import javax.ws.rs.Produces;\n 39  import javax.ws.rs.WebApplicationException;\n 40  import javax.ws.rs.core.MediaType;\n 41  import javax.ws.rs.core.Response;\n 42  \n 43  import org.jboss.as.quickstarts.kitchensink.data.MemberRepository;\n 44  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 45  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 46  \n 47  /**\n 48   * JAX-RS Example\n 49   * \u003cp/\u003e\n 50   * This class produces a RESTful service to read/write the contents of the members table.\n 51   */\n 52  @Path(\"/members\")\n 53  @RequestScoped\n 54  public class MemberResourceRESTService {\n 55  \n 56      @Inject\n 57      private Logger log;\n 58  \n 59      @Inject\n 60      private Validator validator;\n 61  \n 62      @Inject\n 63      private MemberRepository repository;\n 64  \n 65      @Inject\n 66      MemberRegistration registration;\n 67  \n 68      @GET\n 69      @Produces(MediaType.APPLICATION_JSON)\n 70      public List\u003cMember\u003e listAllMembers() {\n 71          return repository.findAllOrderedByName();\n 72      }\n 73  \n 74      @GET\n 75      @Path(\"/{id:[0-9][0-9]*}\")\n 76      @Produces(MediaType.APPLICATION_JSON)\n 77      public Member lookupMemberById(@PathParam(\"id\") long id) {\n 78          Member member = repository.findById(id);\n 79          if (member == null) {\n 80              throw new WebApplicationException(Response.Status.NOT_FOUND);\n 81          }\n 82          return member;\n 83      }\n 84  \n 85      /**\n 86       * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,\n 87       * or with a map of fields, and related errors.\n 88       */\n 89      @POST\n 90      @Consumes(MediaType.APPLICATION_JSON)\n 91      @Produces(MediaType.APPLICATION_JSON)\n 92      public Response createMember(Member member) {\n 93  \n 94          Response.ResponseBuilder builder = null;\n 95  \n 96          try {\n 97              // Validates member using bean validation\n 98              validateMember(member);\n 99  \n100              registration.register(member);\n101  \n102              // Create an \"ok\" response\n103              builder = Response.ok();\n104          } catch (ConstraintViolationException ce) {\n105              // Handle bean validation issues\n106              builder = createViolationResponse(ce.getConstraintViolations());\n107          } catch (ValidationException e) {\n108              // Handle the unique constrain violation\n109              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n110              responseObj.put(\"email\", \"Email taken\");\n111              builder = Response.status(Response.Status.CONFLICT).entity(responseObj);\n112          } catch (Exception e) {\n113              // Handle generic exceptions\n114              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n115              responseObj.put(\"error\", e.getMessage());\n116              builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n117          }\n118  \n119          return builder.build();\n120      }\n121  \n122      /**\n123       * \u003cp\u003e\n124       * Validates the given Member variable and throws validation exceptions based on the type of error. If the error is standard\n125       * bean validation errors then it will throw a ConstraintValidationException with the set of the constraints violated.\n126       * \u003c/p\u003e\n127       * \u003cp\u003e\n128       * If the error is caused because an existing member with the same email is registered it throws a regular validation\n129       * exception so that it can be interpreted separately.\n130       * \u003c/p\u003e\n131       *","lineNumber":31,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","kind":"Module","name":"javax.validation.ValidationException","renamed":"validation"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","message":"Replace the `javax.ws` import statement with `jakarta.ws`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import java.util.HashMap;\n 20  import java.util.HashSet;\n 21  import java.util.List;\n 22  import java.util.Map;\n 23  import java.util.Set;\n 24  import java.util.logging.Logger;\n 25  \n 26  import javax.enterprise.context.RequestScoped;\n 27  import javax.inject.Inject;\n 28  import javax.persistence.NoResultException;\n 29  import javax.validation.ConstraintViolation;\n 30  import javax.validation.ConstraintViolationException;\n 31  import javax.validation.ValidationException;\n 32  import javax.validation.Validator;\n 33  import javax.ws.rs.Consumes;\n 34  import javax.ws.rs.GET;\n 35  import javax.ws.rs.POST;\n 36  import javax.ws.rs.Path;\n 37  import javax.ws.rs.PathParam;\n 38  import javax.ws.rs.Produces;\n 39  import javax.ws.rs.WebApplicationException;\n 40  import javax.ws.rs.core.MediaType;\n 41  import javax.ws.rs.core.Response;\n 42  \n 43  import org.jboss.as.quickstarts.kitchensink.data.MemberRepository;\n 44  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 45  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 46  \n 47  /**\n 48   * JAX-RS Example\n 49   * \u003cp/\u003e\n 50   * This class produces a RESTful service to read/write the contents of the members table.\n 51   */\n 52  @Path(\"/members\")\n 53  @RequestScoped\n 54  public class MemberResourceRESTService {\n 55  \n 56      @Inject\n 57      private Logger log;\n 58  \n 59      @Inject\n 60      private Validator validator;\n 61  \n 62      @Inject\n 63      private MemberRepository repository;\n 64  \n 65      @Inject\n 66      MemberRegistration registration;\n 67  \n 68      @GET\n 69      @Produces(MediaType.APPLICATION_JSON)\n 70      public List\u003cMember\u003e listAllMembers() {\n 71          return repository.findAllOrderedByName();\n 72      }\n 73  \n 74      @GET\n 75      @Path(\"/{id:[0-9][0-9]*}\")\n 76      @Produces(MediaType.APPLICATION_JSON)\n 77      public Member lookupMemberById(@PathParam(\"id\") long id) {\n 78          Member member = repository.findById(id);\n 79          if (member == null) {\n 80              throw new WebApplicationException(Response.Status.NOT_FOUND);\n 81          }\n 82          return member;\n 83      }\n 84  \n 85      /**\n 86       * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,\n 87       * or with a map of fields, and related errors.\n 88       */\n 89      @POST\n 90      @Consumes(MediaType.APPLICATION_JSON)\n 91      @Produces(MediaType.APPLICATION_JSON)\n 92      public Response createMember(Member member) {\n 93  \n 94          Response.ResponseBuilder builder = null;\n 95  \n 96          try {\n 97              // Validates member using bean validation\n 98              validateMember(member);\n 99  \n100              registration.register(member);\n101  \n102              // Create an \"ok\" response\n103              builder = Response.ok();\n104          } catch (ConstraintViolationException ce) {\n105              // Handle bean validation issues\n106              builder = createViolationResponse(ce.getConstraintViolations());\n107          } catch (ValidationException e) {\n108              // Handle the unique constrain violation\n109              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n110              responseObj.put(\"email\", \"Email taken\");\n111              builder = Response.status(Response.Status.CONFLICT).entity(responseObj);\n112          } catch (Exception e) {\n113              // Handle generic exceptions\n114              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n115              responseObj.put(\"error\", e.getMessage());\n116              builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n117          }\n118  \n119          return builder.build();\n120      }\n121  \n122      /**\n123       * \u003cp\u003e\n124       * Validates the given Member variable and throws validation exceptions based on the type of error. If the error is standard\n125       * bean validation errors then it will throw a ConstraintValidationException with the set of the constraints violated.\n126       * \u003c/p\u003e\n127       * \u003cp\u003e\n128       * If the error is caused because an existing member with the same email is registered it throws a regular validation\n129       * exception so that it can be interpreted separately.\n130       * \u003c/p\u003e\n131       *\n132       * @param member Member to be validated\n133       * @throws ConstraintViolationException If Bean Validation errors exist\n134       * @throws ValidationException If member with the same email already exists\n135       */\n136      private void validateMember(Member member) throws ConstraintViolationException, ValidationException {\n137          // Create a bean validator and check for issues.\n138          Set\u003cConstraintViolation\u003cMember\u003e\u003e violations = validator.validate(member);\n139  ","lineNumber":39,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","kind":"Module","name":"javax.ws.rs.WebApplicationException","renamed":"ws"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","message":"Replace the `javax.validation` import statement with `jakarta.validation`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import java.util.HashMap;\n 20  import java.util.HashSet;\n 21  import java.util.List;\n 22  import java.util.Map;\n 23  import java.util.Set;\n 24  import java.util.logging.Logger;\n 25  \n 26  import javax.enterprise.context.RequestScoped;\n 27  import javax.inject.Inject;\n 28  import javax.persistence.NoResultException;\n 29  import javax.validation.ConstraintViolation;\n 30  import javax.validation.ConstraintViolationException;\n 31  import javax.validation.ValidationException;\n 32  import javax.validation.Validator;\n 33  import javax.ws.rs.Consumes;\n 34  import javax.ws.rs.GET;\n 35  import javax.ws.rs.POST;\n 36  import javax.ws.rs.Path;\n 37  import javax.ws.rs.PathParam;\n 38  import javax.ws.rs.Produces;\n 39  import javax.ws.rs.WebApplicationException;\n 40  import javax.ws.rs.core.MediaType;\n 41  import javax.ws.rs.core.Response;\n 42  \n 43  import org.jboss.as.quickstarts.kitchensink.data.MemberRepository;\n 44  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 45  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 46  \n 47  /**\n 48   * JAX-RS Example\n 49   * \u003cp/\u003e\n 50   * This class produces a RESTful service to read/write the contents of the members table.\n 51   */\n 52  @Path(\"/members\")\n 53  @RequestScoped\n 54  public class MemberResourceRESTService {\n 55  \n 56      @Inject\n 57      private Logger log;\n 58  \n 59      @Inject\n 60      private Validator validator;\n 61  \n 62      @Inject\n 63      private MemberRepository repository;\n 64  \n 65      @Inject\n 66      MemberRegistration registration;\n 67  \n 68      @GET\n 69      @Produces(MediaType.APPLICATION_JSON)\n 70      public List\u003cMember\u003e listAllMembers() {\n 71          return repository.findAllOrderedByName();\n 72      }\n 73  \n 74      @GET\n 75      @Path(\"/{id:[0-9][0-9]*}\")\n 76      @Produces(MediaType.APPLICATION_JSON)\n 77      public Member lookupMemberById(@PathParam(\"id\") long id) {\n 78          Member member = repository.findById(id);\n 79          if (member == null) {\n 80              throw new WebApplicationException(Response.Status.NOT_FOUND);\n 81          }\n 82          return member;\n 83      }\n 84  \n 85      /**\n 86       * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,\n 87       * or with a map of fields, and related errors.\n 88       */\n 89      @POST\n 90      @Consumes(MediaType.APPLICATION_JSON)\n 91      @Produces(MediaType.APPLICATION_JSON)\n 92      public Response createMember(Member member) {\n 93  \n 94          Response.ResponseBuilder builder = null;\n 95  \n 96          try {\n 97              // Validates member using bean validation\n 98              validateMember(member);\n 99  \n100              registration.register(member);\n101  \n102              // Create an \"ok\" response\n103              builder = Response.ok();\n104          } catch (ConstraintViolationException ce) {\n105              // Handle bean validation issues\n106              builder = createViolationResponse(ce.getConstraintViolations());\n107          } catch (ValidationException e) {\n108              // Handle the unique constrain violation\n109              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n110              responseObj.put(\"email\", \"Email taken\");\n111              builder = Response.status(Response.Status.CONFLICT).entity(responseObj);\n112          } catch (Exception e) {\n113              // Handle generic exceptions\n114              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n115              responseObj.put(\"error\", e.getMessage());\n116              builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n117          }\n118  \n119          return builder.build();\n120      }\n121  \n122      /**\n123       * \u003cp\u003e\n124       * Validates the given Member variable and throws validation exceptions based on the type of error. If the error is standard\n125       * bean validation errors then it will throw a ConstraintValidationException with the set of the constraints violated.\n126       * \u003c/p\u003e\n127       * \u003cp\u003e\n128       * If the error is caused because an existing member with the same email is registered it throws a regular validation\n129       * exception so that it can be interpreted separately.\n130       * \u003c/p\u003e","lineNumber":30,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","kind":"Module","name":"javax.validation.ConstraintViolationException","renamed":"validation"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","message":"Replace the `javax.validation` import statement with `jakarta.validation`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import java.util.HashMap;\n 20  import java.util.HashSet;\n 21  import java.util.List;\n 22  import java.util.Map;\n 23  import java.util.Set;\n 24  import java.util.logging.Logger;\n 25  \n 26  import javax.enterprise.context.RequestScoped;\n 27  import javax.inject.Inject;\n 28  import javax.persistence.NoResultException;\n 29  import javax.validation.ConstraintViolation;\n 30  import javax.validation.ConstraintViolationException;\n 31  import javax.validation.ValidationException;\n 32  import javax.validation.Validator;\n 33  import javax.ws.rs.Consumes;\n 34  import javax.ws.rs.GET;\n 35  import javax.ws.rs.POST;\n 36  import javax.ws.rs.Path;\n 37  import javax.ws.rs.PathParam;\n 38  import javax.ws.rs.Produces;\n 39  import javax.ws.rs.WebApplicationException;\n 40  import javax.ws.rs.core.MediaType;\n 41  import javax.ws.rs.core.Response;\n 42  \n 43  import org.jboss.as.quickstarts.kitchensink.data.MemberRepository;\n 44  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 45  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 46  \n 47  /**\n 48   * JAX-RS Example\n 49   * \u003cp/\u003e\n 50   * This class produces a RESTful service to read/write the contents of the members table.\n 51   */\n 52  @Path(\"/members\")\n 53  @RequestScoped\n 54  public class MemberResourceRESTService {\n 55  \n 56      @Inject\n 57      private Logger log;\n 58  \n 59      @Inject\n 60      private Validator validator;\n 61  \n 62      @Inject\n 63      private MemberRepository repository;\n 64  \n 65      @Inject\n 66      MemberRegistration registration;\n 67  \n 68      @GET\n 69      @Produces(MediaType.APPLICATION_JSON)\n 70      public List\u003cMember\u003e listAllMembers() {\n 71          return repository.findAllOrderedByName();\n 72      }\n 73  \n 74      @GET\n 75      @Path(\"/{id:[0-9][0-9]*}\")\n 76      @Produces(MediaType.APPLICATION_JSON)\n 77      public Member lookupMemberById(@PathParam(\"id\") long id) {\n 78          Member member = repository.findById(id);\n 79          if (member == null) {\n 80              throw new WebApplicationException(Response.Status.NOT_FOUND);\n 81          }\n 82          return member;\n 83      }\n 84  \n 85      /**\n 86       * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,\n 87       * or with a map of fields, and related errors.\n 88       */\n 89      @POST\n 90      @Consumes(MediaType.APPLICATION_JSON)\n 91      @Produces(MediaType.APPLICATION_JSON)\n 92      public Response createMember(Member member) {\n 93  \n 94          Response.ResponseBuilder builder = null;\n 95  \n 96          try {\n 97              // Validates member using bean validation\n 98              validateMember(member);\n 99  \n100              registration.register(member);\n101  \n102              // Create an \"ok\" response\n103              builder = Response.ok();\n104          } catch (ConstraintViolationException ce) {\n105              // Handle bean validation issues\n106              builder = createViolationResponse(ce.getConstraintViolations());\n107          } catch (ValidationException e) {\n108              // Handle the unique constrain violation\n109              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n110              responseObj.put(\"email\", \"Email taken\");\n111              builder = Response.status(Response.Status.CONFLICT).entity(responseObj);\n112          } catch (Exception e) {\n113              // Handle generic exceptions\n114              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n115              responseObj.put(\"error\", e.getMessage());\n116              builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n117          }\n118  \n119          return builder.build();\n120      }\n121  \n122      /**\n123       * \u003cp\u003e\n124       * Validates the given Member variable and throws validation exceptions based on the type of error. If the error is standard\n125       * bean validation errors then it will throw a ConstraintValidationException with the set of the constraints violated.\n126       * \u003c/p\u003e\n127       * \u003cp\u003e\n128       * If the error is caused because an existing member with the same email is registered it throws a regular validation\n129       * exception so that it can be interpreted separately.\n130       * \u003c/p\u003e\n131       *\n132       * @param member Member to be validated","lineNumber":32,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","kind":"Module","name":"javax.validation.Validator","renamed":"validation"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","message":"Replace the `javax.ws` import statement with `jakarta.ws`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import java.util.HashMap;\n 20  import java.util.HashSet;\n 21  import java.util.List;\n 22  import java.util.Map;\n 23  import java.util.Set;\n 24  import java.util.logging.Logger;\n 25  \n 26  import javax.enterprise.context.RequestScoped;\n 27  import javax.inject.Inject;\n 28  import javax.persistence.NoResultException;\n 29  import javax.validation.ConstraintViolation;\n 30  import javax.validation.ConstraintViolationException;\n 31  import javax.validation.ValidationException;\n 32  import javax.validation.Validator;\n 33  import javax.ws.rs.Consumes;\n 34  import javax.ws.rs.GET;\n 35  import javax.ws.rs.POST;\n 36  import javax.ws.rs.Path;\n 37  import javax.ws.rs.PathParam;\n 38  import javax.ws.rs.Produces;\n 39  import javax.ws.rs.WebApplicationException;\n 40  import javax.ws.rs.core.MediaType;\n 41  import javax.ws.rs.core.Response;\n 42  \n 43  import org.jboss.as.quickstarts.kitchensink.data.MemberRepository;\n 44  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 45  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 46  \n 47  /**\n 48   * JAX-RS Example\n 49   * \u003cp/\u003e\n 50   * This class produces a RESTful service to read/write the contents of the members table.\n 51   */\n 52  @Path(\"/members\")\n 53  @RequestScoped\n 54  public class MemberResourceRESTService {\n 55  \n 56      @Inject\n 57      private Logger log;\n 58  \n 59      @Inject\n 60      private Validator validator;\n 61  \n 62      @Inject\n 63      private MemberRepository repository;\n 64  \n 65      @Inject\n 66      MemberRegistration registration;\n 67  \n 68      @GET\n 69      @Produces(MediaType.APPLICATION_JSON)\n 70      public List\u003cMember\u003e listAllMembers() {\n 71          return repository.findAllOrderedByName();\n 72      }\n 73  \n 74      @GET\n 75      @Path(\"/{id:[0-9][0-9]*}\")\n 76      @Produces(MediaType.APPLICATION_JSON)\n 77      public Member lookupMemberById(@PathParam(\"id\") long id) {\n 78          Member member = repository.findById(id);\n 79          if (member == null) {\n 80              throw new WebApplicationException(Response.Status.NOT_FOUND);\n 81          }\n 82          return member;\n 83      }\n 84  \n 85      /**\n 86       * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,\n 87       * or with a map of fields, and related errors.\n 88       */\n 89      @POST\n 90      @Consumes(MediaType.APPLICATION_JSON)\n 91      @Produces(MediaType.APPLICATION_JSON)\n 92      public Response createMember(Member member) {\n 93  \n 94          Response.ResponseBuilder builder = null;\n 95  \n 96          try {\n 97              // Validates member using bean validation\n 98              validateMember(member);\n 99  \n100              registration.register(member);\n101  \n102              // Create an \"ok\" response\n103              builder = Response.ok();\n104          } catch (ConstraintViolationException ce) {\n105              // Handle bean validation issues\n106              builder = createViolationResponse(ce.getConstraintViolations());\n107          } catch (ValidationException e) {\n108              // Handle the unique constrain violation\n109              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n110              responseObj.put(\"email\", \"Email taken\");\n111              builder = Response.status(Response.Status.CONFLICT).entity(responseObj);\n112          } catch (Exception e) {\n113              // Handle generic exceptions\n114              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n115              responseObj.put(\"error\", e.getMessage());\n116              builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n117          }\n118  \n119          return builder.build();\n120      }\n121  \n122      /**\n123       * \u003cp\u003e\n124       * Validates the given Member variable and throws validation exceptions based on the type of error. If the error is standard\n125       * bean validation errors then it will throw a ConstraintValidationException with the set of the constraints violated.\n126       * \u003c/p\u003e\n127       * \u003cp\u003e\n128       * If the error is caused because an existing member with the same email is registered it throws a regular validation\n129       * exception so that it can be interpreted separately.\n130       * \u003c/p\u003e\n131       *\n132       * @param member Member to be validated\n133       * @throws ConstraintViolationException If Bean Validation errors exist\n134       * @throws ValidationException If member with the same email already exists\n135       */\n136      private void validateMember(Member member) throws ConstraintViolationException, ValidationException {","lineNumber":36,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","kind":"Module","name":"javax.ws.rs.Path","renamed":"ws"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","message":"Replace the `javax.ws` import statement with `jakarta.ws`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import java.util.HashMap;\n 20  import java.util.HashSet;\n 21  import java.util.List;\n 22  import java.util.Map;\n 23  import java.util.Set;\n 24  import java.util.logging.Logger;\n 25  \n 26  import javax.enterprise.context.RequestScoped;\n 27  import javax.inject.Inject;\n 28  import javax.persistence.NoResultException;\n 29  import javax.validation.ConstraintViolation;\n 30  import javax.validation.ConstraintViolationException;\n 31  import javax.validation.ValidationException;\n 32  import javax.validation.Validator;\n 33  import javax.ws.rs.Consumes;\n 34  import javax.ws.rs.GET;\n 35  import javax.ws.rs.POST;\n 36  import javax.ws.rs.Path;\n 37  import javax.ws.rs.PathParam;\n 38  import javax.ws.rs.Produces;\n 39  import javax.ws.rs.WebApplicationException;\n 40  import javax.ws.rs.core.MediaType;\n 41  import javax.ws.rs.core.Response;\n 42  \n 43  import org.jboss.as.quickstarts.kitchensink.data.MemberRepository;\n 44  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 45  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 46  \n 47  /**\n 48   * JAX-RS Example\n 49   * \u003cp/\u003e\n 50   * This class produces a RESTful service to read/write the contents of the members table.\n 51   */\n 52  @Path(\"/members\")\n 53  @RequestScoped\n 54  public class MemberResourceRESTService {\n 55  \n 56      @Inject\n 57      private Logger log;\n 58  \n 59      @Inject\n 60      private Validator validator;\n 61  \n 62      @Inject\n 63      private MemberRepository repository;\n 64  \n 65      @Inject\n 66      MemberRegistration registration;\n 67  \n 68      @GET\n 69      @Produces(MediaType.APPLICATION_JSON)\n 70      public List\u003cMember\u003e listAllMembers() {\n 71          return repository.findAllOrderedByName();\n 72      }\n 73  \n 74      @GET\n 75      @Path(\"/{id:[0-9][0-9]*}\")\n 76      @Produces(MediaType.APPLICATION_JSON)\n 77      public Member lookupMemberById(@PathParam(\"id\") long id) {\n 78          Member member = repository.findById(id);\n 79          if (member == null) {\n 80              throw new WebApplicationException(Response.Status.NOT_FOUND);\n 81          }\n 82          return member;\n 83      }\n 84  \n 85      /**\n 86       * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,\n 87       * or with a map of fields, and related errors.\n 88       */\n 89      @POST\n 90      @Consumes(MediaType.APPLICATION_JSON)\n 91      @Produces(MediaType.APPLICATION_JSON)\n 92      public Response createMember(Member member) {\n 93  \n 94          Response.ResponseBuilder builder = null;\n 95  \n 96          try {\n 97              // Validates member using bean validation\n 98              validateMember(member);\n 99  \n100              registration.register(member);\n101  \n102              // Create an \"ok\" response\n103              builder = Response.ok();\n104          } catch (ConstraintViolationException ce) {\n105              // Handle bean validation issues\n106              builder = createViolationResponse(ce.getConstraintViolations());\n107          } catch (ValidationException e) {\n108              // Handle the unique constrain violation\n109              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n110              responseObj.put(\"email\", \"Email taken\");\n111              builder = Response.status(Response.Status.CONFLICT).entity(responseObj);\n112          } catch (Exception e) {\n113              // Handle generic exceptions\n114              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n115              responseObj.put(\"error\", e.getMessage());\n116              builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n117          }\n118  \n119          return builder.build();\n120      }\n121  \n122      /**\n123       * \u003cp\u003e\n124       * Validates the given Member variable and throws validation exceptions based on the type of error. If the error is standard\n125       * bean validation errors then it will throw a ConstraintValidationException with the set of the constraints violated.\n126       * \u003c/p\u003e\n127       * \u003cp\u003e\n128       * If the error is caused because an existing member with the same email is registered it throws a regular validation\n129       * exception so that it can be interpreted separately.\n130       * \u003c/p\u003e\n131       *\n132       * @param member Member to be validated\n133       * @throws ConstraintViolationException If Bean Validation errors exist\n134       * @throws ValidationException If member with the same email already exists\n135       */\n136      private void validateMember(Member member) throws ConstraintViolationException, ValidationException {\n137          // Create a bean validator and check for issues.\n138          Set\u003cConstraintViolation\u003cMember\u003e\u003e violations = validator.validate(member);","lineNumber":38,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","kind":"Module","name":"javax.ws.rs.Produces","renamed":"ws"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","message":"Replace the `javax.inject` import statement with `jakarta.inject`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import java.util.HashMap;\n 20  import java.util.HashSet;\n 21  import java.util.List;\n 22  import java.util.Map;\n 23  import java.util.Set;\n 24  import java.util.logging.Logger;\n 25  \n 26  import javax.enterprise.context.RequestScoped;\n 27  import javax.inject.Inject;\n 28  import javax.persistence.NoResultException;\n 29  import javax.validation.ConstraintViolation;\n 30  import javax.validation.ConstraintViolationException;\n 31  import javax.validation.ValidationException;\n 32  import javax.validation.Validator;\n 33  import javax.ws.rs.Consumes;\n 34  import javax.ws.rs.GET;\n 35  import javax.ws.rs.POST;\n 36  import javax.ws.rs.Path;\n 37  import javax.ws.rs.PathParam;\n 38  import javax.ws.rs.Produces;\n 39  import javax.ws.rs.WebApplicationException;\n 40  import javax.ws.rs.core.MediaType;\n 41  import javax.ws.rs.core.Response;\n 42  \n 43  import org.jboss.as.quickstarts.kitchensink.data.MemberRepository;\n 44  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 45  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 46  \n 47  /**\n 48   * JAX-RS Example\n 49   * \u003cp/\u003e\n 50   * This class produces a RESTful service to read/write the contents of the members table.\n 51   */\n 52  @Path(\"/members\")\n 53  @RequestScoped\n 54  public class MemberResourceRESTService {\n 55  \n 56      @Inject\n 57      private Logger log;\n 58  \n 59      @Inject\n 60      private Validator validator;\n 61  \n 62      @Inject\n 63      private MemberRepository repository;\n 64  \n 65      @Inject\n 66      MemberRegistration registration;\n 67  \n 68      @GET\n 69      @Produces(MediaType.APPLICATION_JSON)\n 70      public List\u003cMember\u003e listAllMembers() {\n 71          return repository.findAllOrderedByName();\n 72      }\n 73  \n 74      @GET\n 75      @Path(\"/{id:[0-9][0-9]*}\")\n 76      @Produces(MediaType.APPLICATION_JSON)\n 77      public Member lookupMemberById(@PathParam(\"id\") long id) {\n 78          Member member = repository.findById(id);\n 79          if (member == null) {\n 80              throw new WebApplicationException(Response.Status.NOT_FOUND);\n 81          }\n 82          return member;\n 83      }\n 84  \n 85      /**\n 86       * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,\n 87       * or with a map of fields, and related errors.\n 88       */\n 89      @POST\n 90      @Consumes(MediaType.APPLICATION_JSON)\n 91      @Produces(MediaType.APPLICATION_JSON)\n 92      public Response createMember(Member member) {\n 93  \n 94          Response.ResponseBuilder builder = null;\n 95  \n 96          try {\n 97              // Validates member using bean validation\n 98              validateMember(member);\n 99  \n100              registration.register(member);\n101  \n102              // Create an \"ok\" response\n103              builder = Response.ok();\n104          } catch (ConstraintViolationException ce) {\n105              // Handle bean validation issues\n106              builder = createViolationResponse(ce.getConstraintViolations());\n107          } catch (ValidationException e) {\n108              // Handle the unique constrain violation\n109              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n110              responseObj.put(\"email\", \"Email taken\");\n111              builder = Response.status(Response.Status.CONFLICT).entity(responseObj);\n112          } catch (Exception e) {\n113              // Handle generic exceptions\n114              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n115              responseObj.put(\"error\", e.getMessage());\n116              builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n117          }\n118  \n119          return builder.build();\n120      }\n121  \n122      /**\n123       * \u003cp\u003e\n124       * Validates the given Member variable and throws validation exceptions based on the type of error. If the error is standard\n125       * bean validation errors then it will throw a ConstraintValidationException with the set of the constraints violated.\n126       * \u003c/p\u003e\n127       * \u003cp\u003e","lineNumber":27,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","kind":"Module","name":"javax.inject.Inject","renamed":"inject"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","message":"Replace the `javax.ws` import statement with `jakarta.ws`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import java.util.HashMap;\n 20  import java.util.HashSet;\n 21  import java.util.List;\n 22  import java.util.Map;\n 23  import java.util.Set;\n 24  import java.util.logging.Logger;\n 25  \n 26  import javax.enterprise.context.RequestScoped;\n 27  import javax.inject.Inject;\n 28  import javax.persistence.NoResultException;\n 29  import javax.validation.ConstraintViolation;\n 30  import javax.validation.ConstraintViolationException;\n 31  import javax.validation.ValidationException;\n 32  import javax.validation.Validator;\n 33  import javax.ws.rs.Consumes;\n 34  import javax.ws.rs.GET;\n 35  import javax.ws.rs.POST;\n 36  import javax.ws.rs.Path;\n 37  import javax.ws.rs.PathParam;\n 38  import javax.ws.rs.Produces;\n 39  import javax.ws.rs.WebApplicationException;\n 40  import javax.ws.rs.core.MediaType;\n 41  import javax.ws.rs.core.Response;\n 42  \n 43  import org.jboss.as.quickstarts.kitchensink.data.MemberRepository;\n 44  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 45  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 46  \n 47  /**\n 48   * JAX-RS Example\n 49   * \u003cp/\u003e\n 50   * This class produces a RESTful service to read/write the contents of the members table.\n 51   */\n 52  @Path(\"/members\")\n 53  @RequestScoped\n 54  public class MemberResourceRESTService {\n 55  \n 56      @Inject\n 57      private Logger log;\n 58  \n 59      @Inject\n 60      private Validator validator;\n 61  \n 62      @Inject\n 63      private MemberRepository repository;\n 64  \n 65      @Inject\n 66      MemberRegistration registration;\n 67  \n 68      @GET\n 69      @Produces(MediaType.APPLICATION_JSON)\n 70      public List\u003cMember\u003e listAllMembers() {\n 71          return repository.findAllOrderedByName();\n 72      }\n 73  \n 74      @GET\n 75      @Path(\"/{id:[0-9][0-9]*}\")\n 76      @Produces(MediaType.APPLICATION_JSON)\n 77      public Member lookupMemberById(@PathParam(\"id\") long id) {\n 78          Member member = repository.findById(id);\n 79          if (member == null) {\n 80              throw new WebApplicationException(Response.Status.NOT_FOUND);\n 81          }\n 82          return member;\n 83      }\n 84  \n 85      /**\n 86       * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,\n 87       * or with a map of fields, and related errors.\n 88       */\n 89      @POST\n 90      @Consumes(MediaType.APPLICATION_JSON)\n 91      @Produces(MediaType.APPLICATION_JSON)\n 92      public Response createMember(Member member) {\n 93  \n 94          Response.ResponseBuilder builder = null;\n 95  \n 96          try {\n 97              // Validates member using bean validation\n 98              validateMember(member);\n 99  \n100              registration.register(member);\n101  \n102              // Create an \"ok\" response\n103              builder = Response.ok();\n104          } catch (ConstraintViolationException ce) {\n105              // Handle bean validation issues\n106              builder = createViolationResponse(ce.getConstraintViolations());\n107          } catch (ValidationException e) {\n108              // Handle the unique constrain violation\n109              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n110              responseObj.put(\"email\", \"Email taken\");\n111              builder = Response.status(Response.Status.CONFLICT).entity(responseObj);\n112          } catch (Exception e) {\n113              // Handle generic exceptions\n114              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n115              responseObj.put(\"error\", e.getMessage());\n116              builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n117          }\n118  \n119          return builder.build();\n120      }\n121  \n122      /**\n123       * \u003cp\u003e\n124       * Validates the given Member variable and throws validation exceptions based on the type of error. If the error is standard\n125       * bean validation errors then it will throw a ConstraintValidationException with the set of the constraints violated.\n126       * \u003c/p\u003e\n127       * \u003cp\u003e\n128       * If the error is caused because an existing member with the same email is registered it throws a regular validation\n129       * exception so that it can be interpreted separately.\n130       * \u003c/p\u003e\n131       *\n132       * @param member Member to be validated\n133       * @throws ConstraintViolationException If Bean Validation errors exist\n134       * @throws ValidationException If member with the same email already exists\n135       */\n136      private void validateMember(Member member) throws ConstraintViolationException, ValidationException {\n137          // Create a bean validator and check for issues.\n138          Set\u003cConstraintViolation\u003cMember\u003e\u003e violations = validator.validate(member);\n139  \n140          if (!violations.isEmpty()) {","lineNumber":40,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","kind":"Module","name":"javax.ws.rs.core.MediaType","renamed":"ws"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","message":"Replace the `javax.ws` import statement with `jakarta.ws`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import java.util.HashMap;\n 20  import java.util.HashSet;\n 21  import java.util.List;\n 22  import java.util.Map;\n 23  import java.util.Set;\n 24  import java.util.logging.Logger;\n 25  \n 26  import javax.enterprise.context.RequestScoped;\n 27  import javax.inject.Inject;\n 28  import javax.persistence.NoResultException;\n 29  import javax.validation.ConstraintViolation;\n 30  import javax.validation.ConstraintViolationException;\n 31  import javax.validation.ValidationException;\n 32  import javax.validation.Validator;\n 33  import javax.ws.rs.Consumes;\n 34  import javax.ws.rs.GET;\n 35  import javax.ws.rs.POST;\n 36  import javax.ws.rs.Path;\n 37  import javax.ws.rs.PathParam;\n 38  import javax.ws.rs.Produces;\n 39  import javax.ws.rs.WebApplicationException;\n 40  import javax.ws.rs.core.MediaType;\n 41  import javax.ws.rs.core.Response;\n 42  \n 43  import org.jboss.as.quickstarts.kitchensink.data.MemberRepository;\n 44  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 45  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 46  \n 47  /**\n 48   * JAX-RS Example\n 49   * \u003cp/\u003e\n 50   * This class produces a RESTful service to read/write the contents of the members table.\n 51   */\n 52  @Path(\"/members\")\n 53  @RequestScoped\n 54  public class MemberResourceRESTService {\n 55  \n 56      @Inject\n 57      private Logger log;\n 58  \n 59      @Inject\n 60      private Validator validator;\n 61  \n 62      @Inject\n 63      private MemberRepository repository;\n 64  \n 65      @Inject\n 66      MemberRegistration registration;\n 67  \n 68      @GET\n 69      @Produces(MediaType.APPLICATION_JSON)\n 70      public List\u003cMember\u003e listAllMembers() {\n 71          return repository.findAllOrderedByName();\n 72      }\n 73  \n 74      @GET\n 75      @Path(\"/{id:[0-9][0-9]*}\")\n 76      @Produces(MediaType.APPLICATION_JSON)\n 77      public Member lookupMemberById(@PathParam(\"id\") long id) {\n 78          Member member = repository.findById(id);\n 79          if (member == null) {\n 80              throw new WebApplicationException(Response.Status.NOT_FOUND);\n 81          }\n 82          return member;\n 83      }\n 84  \n 85      /**\n 86       * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,\n 87       * or with a map of fields, and related errors.\n 88       */\n 89      @POST\n 90      @Consumes(MediaType.APPLICATION_JSON)\n 91      @Produces(MediaType.APPLICATION_JSON)\n 92      public Response createMember(Member member) {\n 93  \n 94          Response.ResponseBuilder builder = null;\n 95  \n 96          try {\n 97              // Validates member using bean validation\n 98              validateMember(member);\n 99  \n100              registration.register(member);\n101  \n102              // Create an \"ok\" response\n103              builder = Response.ok();\n104          } catch (ConstraintViolationException ce) {\n105              // Handle bean validation issues\n106              builder = createViolationResponse(ce.getConstraintViolations());\n107          } catch (ValidationException e) {\n108              // Handle the unique constrain violation\n109              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n110              responseObj.put(\"email\", \"Email taken\");\n111              builder = Response.status(Response.Status.CONFLICT).entity(responseObj);\n112          } catch (Exception e) {\n113              // Handle generic exceptions\n114              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n115              responseObj.put(\"error\", e.getMessage());\n116              builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n117          }\n118  \n119          return builder.build();\n120      }\n121  \n122      /**\n123       * \u003cp\u003e\n124       * Validates the given Member variable and throws validation exceptions based on the type of error. If the error is standard\n125       * bean validation errors then it will throw a ConstraintValidationException with the set of the constraints violated.\n126       * \u003c/p\u003e\n127       * \u003cp\u003e\n128       * If the error is caused because an existing member with the same email is registered it throws a regular validation\n129       * exception so that it can be interpreted separately.\n130       * \u003c/p\u003e\n131       *\n132       * @param member Member to be validated\n133       * @throws ConstraintViolationException If Bean Validation errors exist\n134       * @throws ValidationException If member with the same email already exists\n135       */\n136      private void validateMember(Member member) throws ConstraintViolationException, ValidationException {\n137          // Create a bean validator and check for issues.","lineNumber":37,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","kind":"Module","name":"javax.ws.rs.PathParam","renamed":"ws"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","message":"Replace the `javax.ws` import statement with `jakarta.ws`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import java.util.HashMap;\n 20  import java.util.HashSet;\n 21  import java.util.List;\n 22  import java.util.Map;\n 23  import java.util.Set;\n 24  import java.util.logging.Logger;\n 25  \n 26  import javax.enterprise.context.RequestScoped;\n 27  import javax.inject.Inject;\n 28  import javax.persistence.NoResultException;\n 29  import javax.validation.ConstraintViolation;\n 30  import javax.validation.ConstraintViolationException;\n 31  import javax.validation.ValidationException;\n 32  import javax.validation.Validator;\n 33  import javax.ws.rs.Consumes;\n 34  import javax.ws.rs.GET;\n 35  import javax.ws.rs.POST;\n 36  import javax.ws.rs.Path;\n 37  import javax.ws.rs.PathParam;\n 38  import javax.ws.rs.Produces;\n 39  import javax.ws.rs.WebApplicationException;\n 40  import javax.ws.rs.core.MediaType;\n 41  import javax.ws.rs.core.Response;\n 42  \n 43  import org.jboss.as.quickstarts.kitchensink.data.MemberRepository;\n 44  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 45  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 46  \n 47  /**\n 48   * JAX-RS Example\n 49   * \u003cp/\u003e\n 50   * This class produces a RESTful service to read/write the contents of the members table.\n 51   */\n 52  @Path(\"/members\")\n 53  @RequestScoped\n 54  public class MemberResourceRESTService {\n 55  \n 56      @Inject\n 57      private Logger log;\n 58  \n 59      @Inject\n 60      private Validator validator;\n 61  \n 62      @Inject\n 63      private MemberRepository repository;\n 64  \n 65      @Inject\n 66      MemberRegistration registration;\n 67  \n 68      @GET\n 69      @Produces(MediaType.APPLICATION_JSON)\n 70      public List\u003cMember\u003e listAllMembers() {\n 71          return repository.findAllOrderedByName();\n 72      }\n 73  \n 74      @GET\n 75      @Path(\"/{id:[0-9][0-9]*}\")\n 76      @Produces(MediaType.APPLICATION_JSON)\n 77      public Member lookupMemberById(@PathParam(\"id\") long id) {\n 78          Member member = repository.findById(id);\n 79          if (member == null) {\n 80              throw new WebApplicationException(Response.Status.NOT_FOUND);\n 81          }\n 82          return member;\n 83      }\n 84  \n 85      /**\n 86       * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,\n 87       * or with a map of fields, and related errors.\n 88       */\n 89      @POST\n 90      @Consumes(MediaType.APPLICATION_JSON)\n 91      @Produces(MediaType.APPLICATION_JSON)\n 92      public Response createMember(Member member) {\n 93  \n 94          Response.ResponseBuilder builder = null;\n 95  \n 96          try {\n 97              // Validates member using bean validation\n 98              validateMember(member);\n 99  \n100              registration.register(member);\n101  \n102              // Create an \"ok\" response\n103              builder = Response.ok();\n104          } catch (ConstraintViolationException ce) {\n105              // Handle bean validation issues\n106              builder = createViolationResponse(ce.getConstraintViolations());\n107          } catch (ValidationException e) {\n108              // Handle the unique constrain violation\n109              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n110              responseObj.put(\"email\", \"Email taken\");\n111              builder = Response.status(Response.Status.CONFLICT).entity(responseObj);\n112          } catch (Exception e) {\n113              // Handle generic exceptions\n114              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n115              responseObj.put(\"error\", e.getMessage());\n116              builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n117          }\n118  \n119          return builder.build();\n120      }\n121  \n122      /**\n123       * \u003cp\u003e\n124       * Validates the given Member variable and throws validation exceptions based on the type of error. If the error is standard\n125       * bean validation errors then it will throw a ConstraintValidationException with the set of the constraints violated.\n126       * \u003c/p\u003e\n127       * \u003cp\u003e\n128       * If the error is caused because an existing member with the same email is registered it throws a regular validation\n129       * exception so that it can be interpreted separately.\n130       * \u003c/p\u003e\n131       *\n132       * @param member Member to be validated\n133       * @throws ConstraintViolationException If Bean Validation errors exist","lineNumber":33,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","kind":"Module","name":"javax.ws.rs.Consumes","renamed":"ws"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","message":"Replace the `javax.ws` import statement with `jakarta.ws`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import java.util.HashMap;\n 20  import java.util.HashSet;\n 21  import java.util.List;\n 22  import java.util.Map;\n 23  import java.util.Set;\n 24  import java.util.logging.Logger;\n 25  \n 26  import javax.enterprise.context.RequestScoped;\n 27  import javax.inject.Inject;\n 28  import javax.persistence.NoResultException;\n 29  import javax.validation.ConstraintViolation;\n 30  import javax.validation.ConstraintViolationException;\n 31  import javax.validation.ValidationException;\n 32  import javax.validation.Validator;\n 33  import javax.ws.rs.Consumes;\n 34  import javax.ws.rs.GET;\n 35  import javax.ws.rs.POST;\n 36  import javax.ws.rs.Path;\n 37  import javax.ws.rs.PathParam;\n 38  import javax.ws.rs.Produces;\n 39  import javax.ws.rs.WebApplicationException;\n 40  import javax.ws.rs.core.MediaType;\n 41  import javax.ws.rs.core.Response;\n 42  \n 43  import org.jboss.as.quickstarts.kitchensink.data.MemberRepository;\n 44  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 45  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 46  \n 47  /**\n 48   * JAX-RS Example\n 49   * \u003cp/\u003e\n 50   * This class produces a RESTful service to read/write the contents of the members table.\n 51   */\n 52  @Path(\"/members\")\n 53  @RequestScoped\n 54  public class MemberResourceRESTService {\n 55  \n 56      @Inject\n 57      private Logger log;\n 58  \n 59      @Inject\n 60      private Validator validator;\n 61  \n 62      @Inject\n 63      private MemberRepository repository;\n 64  \n 65      @Inject\n 66      MemberRegistration registration;\n 67  \n 68      @GET\n 69      @Produces(MediaType.APPLICATION_JSON)\n 70      public List\u003cMember\u003e listAllMembers() {\n 71          return repository.findAllOrderedByName();\n 72      }\n 73  \n 74      @GET\n 75      @Path(\"/{id:[0-9][0-9]*}\")\n 76      @Produces(MediaType.APPLICATION_JSON)\n 77      public Member lookupMemberById(@PathParam(\"id\") long id) {\n 78          Member member = repository.findById(id);\n 79          if (member == null) {\n 80              throw new WebApplicationException(Response.Status.NOT_FOUND);\n 81          }\n 82          return member;\n 83      }\n 84  \n 85      /**\n 86       * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,\n 87       * or with a map of fields, and related errors.\n 88       */\n 89      @POST\n 90      @Consumes(MediaType.APPLICATION_JSON)\n 91      @Produces(MediaType.APPLICATION_JSON)\n 92      public Response createMember(Member member) {\n 93  \n 94          Response.ResponseBuilder builder = null;\n 95  \n 96          try {\n 97              // Validates member using bean validation\n 98              validateMember(member);\n 99  \n100              registration.register(member);\n101  \n102              // Create an \"ok\" response\n103              builder = Response.ok();\n104          } catch (ConstraintViolationException ce) {\n105              // Handle bean validation issues\n106              builder = createViolationResponse(ce.getConstraintViolations());\n107          } catch (ValidationException e) {\n108              // Handle the unique constrain violation\n109              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n110              responseObj.put(\"email\", \"Email taken\");\n111              builder = Response.status(Response.Status.CONFLICT).entity(responseObj);\n112          } catch (Exception e) {\n113              // Handle generic exceptions\n114              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n115              responseObj.put(\"error\", e.getMessage());\n116              builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n117          }\n118  \n119          return builder.build();\n120      }\n121  \n122      /**\n123       * \u003cp\u003e\n124       * Validates the given Member variable and throws validation exceptions based on the type of error. If the error is standard\n125       * bean validation errors then it will throw a ConstraintValidationException with the set of the constraints violated.\n126       * \u003c/p\u003e\n127       * \u003cp\u003e\n128       * If the error is caused because an existing member with the same email is registered it throws a regular validation\n129       * exception so that it can be interpreted separately.\n130       * \u003c/p\u003e\n131       *\n132       * @param member Member to be validated\n133       * @throws ConstraintViolationException If Bean Validation errors exist\n134       * @throws ValidationException If member with the same email already exists","lineNumber":34,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","kind":"Module","name":"javax.ws.rs.GET","renamed":"ws"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","message":"Replace the `javax.ws` import statement with `jakarta.ws`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import java.util.HashMap;\n 20  import java.util.HashSet;\n 21  import java.util.List;\n 22  import java.util.Map;\n 23  import java.util.Set;\n 24  import java.util.logging.Logger;\n 25  \n 26  import javax.enterprise.context.RequestScoped;\n 27  import javax.inject.Inject;\n 28  import javax.persistence.NoResultException;\n 29  import javax.validation.ConstraintViolation;\n 30  import javax.validation.ConstraintViolationException;\n 31  import javax.validation.ValidationException;\n 32  import javax.validation.Validator;\n 33  import javax.ws.rs.Consumes;\n 34  import javax.ws.rs.GET;\n 35  import javax.ws.rs.POST;\n 36  import javax.ws.rs.Path;\n 37  import javax.ws.rs.PathParam;\n 38  import javax.ws.rs.Produces;\n 39  import javax.ws.rs.WebApplicationException;\n 40  import javax.ws.rs.core.MediaType;\n 41  import javax.ws.rs.core.Response;\n 42  \n 43  import org.jboss.as.quickstarts.kitchensink.data.MemberRepository;\n 44  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 45  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 46  \n 47  /**\n 48   * JAX-RS Example\n 49   * \u003cp/\u003e\n 50   * This class produces a RESTful service to read/write the contents of the members table.\n 51   */\n 52  @Path(\"/members\")\n 53  @RequestScoped\n 54  public class MemberResourceRESTService {\n 55  \n 56      @Inject\n 57      private Logger log;\n 58  \n 59      @Inject\n 60      private Validator validator;\n 61  \n 62      @Inject\n 63      private MemberRepository repository;\n 64  \n 65      @Inject\n 66      MemberRegistration registration;\n 67  \n 68      @GET\n 69      @Produces(MediaType.APPLICATION_JSON)\n 70      public List\u003cMember\u003e listAllMembers() {\n 71          return repository.findAllOrderedByName();\n 72      }\n 73  \n 74      @GET\n 75      @Path(\"/{id:[0-9][0-9]*}\")\n 76      @Produces(MediaType.APPLICATION_JSON)\n 77      public Member lookupMemberById(@PathParam(\"id\") long id) {\n 78          Member member = repository.findById(id);\n 79          if (member == null) {\n 80              throw new WebApplicationException(Response.Status.NOT_FOUND);\n 81          }\n 82          return member;\n 83      }\n 84  \n 85      /**\n 86       * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,\n 87       * or with a map of fields, and related errors.\n 88       */\n 89      @POST\n 90      @Consumes(MediaType.APPLICATION_JSON)\n 91      @Produces(MediaType.APPLICATION_JSON)\n 92      public Response createMember(Member member) {\n 93  \n 94          Response.ResponseBuilder builder = null;\n 95  \n 96          try {\n 97              // Validates member using bean validation\n 98              validateMember(member);\n 99  \n100              registration.register(member);\n101  \n102              // Create an \"ok\" response\n103              builder = Response.ok();\n104          } catch (ConstraintViolationException ce) {\n105              // Handle bean validation issues\n106              builder = createViolationResponse(ce.getConstraintViolations());\n107          } catch (ValidationException e) {\n108              // Handle the unique constrain violation\n109              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n110              responseObj.put(\"email\", \"Email taken\");\n111              builder = Response.status(Response.Status.CONFLICT).entity(responseObj);\n112          } catch (Exception e) {\n113              // Handle generic exceptions\n114              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n115              responseObj.put(\"error\", e.getMessage());\n116              builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n117          }\n118  \n119          return builder.build();\n120      }\n121  \n122      /**\n123       * \u003cp\u003e\n124       * Validates the given Member variable and throws validation exceptions based on the type of error. If the error is standard\n125       * bean validation errors then it will throw a ConstraintValidationException with the set of the constraints violated.\n126       * \u003c/p\u003e\n127       * \u003cp\u003e\n128       * If the error is caused because an existing member with the same email is registered it throws a regular validation\n129       * exception so that it can be interpreted separately.\n130       * \u003c/p\u003e\n131       *\n132       * @param member Member to be validated\n133       * @throws ConstraintViolationException If Bean Validation errors exist\n134       * @throws ValidationException If member with the same email already exists\n135       */","lineNumber":35,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","kind":"Module","name":"javax.ws.rs.POST","renamed":"ws"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","message":"Replace the `javax.ws` import statement with `jakarta.ws`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import java.util.HashMap;\n 20  import java.util.HashSet;\n 21  import java.util.List;\n 22  import java.util.Map;\n 23  import java.util.Set;\n 24  import java.util.logging.Logger;\n 25  \n 26  import javax.enterprise.context.RequestScoped;\n 27  import javax.inject.Inject;\n 28  import javax.persistence.NoResultException;\n 29  import javax.validation.ConstraintViolation;\n 30  import javax.validation.ConstraintViolationException;\n 31  import javax.validation.ValidationException;\n 32  import javax.validation.Validator;\n 33  import javax.ws.rs.Consumes;\n 34  import javax.ws.rs.GET;\n 35  import javax.ws.rs.POST;\n 36  import javax.ws.rs.Path;\n 37  import javax.ws.rs.PathParam;\n 38  import javax.ws.rs.Produces;\n 39  import javax.ws.rs.WebApplicationException;\n 40  import javax.ws.rs.core.MediaType;\n 41  import javax.ws.rs.core.Response;\n 42  \n 43  import org.jboss.as.quickstarts.kitchensink.data.MemberRepository;\n 44  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 45  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 46  \n 47  /**\n 48   * JAX-RS Example\n 49   * \u003cp/\u003e\n 50   * This class produces a RESTful service to read/write the contents of the members table.\n 51   */\n 52  @Path(\"/members\")\n 53  @RequestScoped\n 54  public class MemberResourceRESTService {\n 55  \n 56      @Inject\n 57      private Logger log;\n 58  \n 59      @Inject\n 60      private Validator validator;\n 61  \n 62      @Inject\n 63      private MemberRepository repository;\n 64  \n 65      @Inject\n 66      MemberRegistration registration;\n 67  \n 68      @GET\n 69      @Produces(MediaType.APPLICATION_JSON)\n 70      public List\u003cMember\u003e listAllMembers() {\n 71          return repository.findAllOrderedByName();\n 72      }\n 73  \n 74      @GET\n 75      @Path(\"/{id:[0-9][0-9]*}\")\n 76      @Produces(MediaType.APPLICATION_JSON)\n 77      public Member lookupMemberById(@PathParam(\"id\") long id) {\n 78          Member member = repository.findById(id);\n 79          if (member == null) {\n 80              throw new WebApplicationException(Response.Status.NOT_FOUND);\n 81          }\n 82          return member;\n 83      }\n 84  \n 85      /**\n 86       * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,\n 87       * or with a map of fields, and related errors.\n 88       */\n 89      @POST\n 90      @Consumes(MediaType.APPLICATION_JSON)\n 91      @Produces(MediaType.APPLICATION_JSON)\n 92      public Response createMember(Member member) {\n 93  \n 94          Response.ResponseBuilder builder = null;\n 95  \n 96          try {\n 97              // Validates member using bean validation\n 98              validateMember(member);\n 99  \n100              registration.register(member);\n101  \n102              // Create an \"ok\" response\n103              builder = Response.ok();\n104          } catch (ConstraintViolationException ce) {\n105              // Handle bean validation issues\n106              builder = createViolationResponse(ce.getConstraintViolations());\n107          } catch (ValidationException e) {\n108              // Handle the unique constrain violation\n109              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n110              responseObj.put(\"email\", \"Email taken\");\n111              builder = Response.status(Response.Status.CONFLICT).entity(responseObj);\n112          } catch (Exception e) {\n113              // Handle generic exceptions\n114              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n115              responseObj.put(\"error\", e.getMessage());\n116              builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n117          }\n118  \n119          return builder.build();\n120      }\n121  \n122      /**\n123       * \u003cp\u003e\n124       * Validates the given Member variable and throws validation exceptions based on the type of error. If the error is standard\n125       * bean validation errors then it will throw a ConstraintValidationException with the set of the constraints violated.\n126       * \u003c/p\u003e\n127       * \u003cp\u003e\n128       * If the error is caused because an existing member with the same email is registered it throws a regular validation\n129       * exception so that it can be interpreted separately.\n130       * \u003c/p\u003e\n131       *\n132       * @param member Member to be validated\n133       * @throws ConstraintViolationException If Bean Validation errors exist\n134       * @throws ValidationException If member with the same email already exists\n135       */\n136      private void validateMember(Member member) throws ConstraintViolationException, ValidationException {\n137          // Create a bean validator and check for issues.\n138          Set\u003cConstraintViolation\u003cMember\u003e\u003e violations = validator.validate(member);\n139  \n140          if (!violations.isEmpty()) {\n141              throw new ConstraintViolationException(new HashSet\u003c\u003e(violations));","lineNumber":41,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","kind":"Module","name":"javax.ws.rs.core.Response","renamed":"ws"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/service/MemberRegistration.java","message":"Replace the `javax.enterprise` import statement with `jakarta.enterprise`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.service;\n 18  \n 19  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 20  \n 21  import javax.ejb.Stateless;\n 22  import javax.enterprise.event.Event;\n 23  import javax.inject.Inject;\n 24  import javax.persistence.EntityManager;\n 25  import java.util.logging.Logger;\n 26  \n 27  // The @Stateless annotation eliminates the need for manual transaction demarcation\n 28  @Stateless\n 29  public class MemberRegistration {\n 30  \n 31      @Inject\n 32      private Logger log;\n 33  \n 34      @Inject\n 35      private EntityManager em;\n 36  \n 37      @Inject\n 38      private Event\u003cMember\u003e memberEventSrc;\n 39  \n 40      public void register(Member member) throws Exception {\n 41          log.info(\"Registering \" + member.getName());\n 42          em.persist(member);\n 43          memberEventSrc.fire(member);\n 44      }\n 45  }\n","lineNumber":22,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/service/MemberRegistration.java","kind":"Module","name":"javax.enterprise.event.Event","renamed":"enterprise"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/service/MemberRegistration.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.service;\n 18  \n 19  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 20  \n 21  import javax.ejb.Stateless;\n 22  import javax.enterprise.event.Event;\n 23  import javax.inject.Inject;\n 24  import javax.persistence.EntityManager;\n 25  import java.util.logging.Logger;\n 26  \n 27  // The @Stateless annotation eliminates the need for manual transaction demarcation\n 28  @Stateless\n 29  public class MemberRegistration {\n 30  \n 31      @Inject\n 32      private Logger log;\n 33  \n 34      @Inject\n 35      private EntityManager em;\n 36  \n 37      @Inject\n 38      private Event\u003cMember\u003e memberEventSrc;\n 39  \n 40      public void register(Member member) throws Exception {\n 41          log.info(\"Registering \" + member.getName());\n 42          em.persist(member);\n 43          memberEventSrc.fire(member);\n 44      }\n 45  }\n","lineNumber":24,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/service/MemberRegistration.java","kind":"Module","name":"javax.persistence.EntityManager","renamed":"persistence"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/service/MemberRegistration.java","message":"Replace the `javax.inject` import statement with `jakarta.inject`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.service;\n 18  \n 19  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 20  \n 21  import javax.ejb.Stateless;\n 22  import javax.enterprise.event.Event;\n 23  import javax.inject.Inject;\n 24  import javax.persistence.EntityManager;\n 25  import java.util.logging.Logger;\n 26  \n 27  // The @Stateless annotation eliminates the need for manual transaction demarcation\n 28  @Stateless\n 29  public class MemberRegistration {\n 30  \n 31      @Inject\n 32      private Logger log;\n 33  \n 34      @Inject\n 35      private EntityManager em;\n 36  \n 37      @Inject\n 38      private Event\u003cMember\u003e memberEventSrc;\n 39  \n 40      public void register(Member member) throws Exception {\n 41          log.info(\"Registering \" + member.getName());\n 42          em.persist(member);\n 43          memberEventSrc.fire(member);\n 44      }\n 45  }\n","lineNumber":23,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/service/MemberRegistration.java","kind":"Module","name":"javax.inject.Inject","renamed":"inject"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/service/MemberRegistration.java","message":"Replace the `javax.ejb` import statement with `jakarta.ejb`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.service;\n 18  \n 19  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 20  \n 21  import javax.ejb.Stateless;\n 22  import javax.enterprise.event.Event;\n 23  import javax.inject.Inject;\n 24  import javax.persistence.EntityManager;\n 25  import java.util.logging.Logger;\n 26  \n 27  // The @Stateless annotation eliminates the need for manual transaction demarcation\n 28  @Stateless\n 29  public class MemberRegistration {\n 30  \n 31      @Inject\n 32      private Logger log;\n 33  \n 34      @Inject\n 35      private EntityManager em;\n 36  \n 37      @Inject\n 38      private Event\u003cMember\u003e memberEventSrc;\n 39  \n 40      public void register(Member member) throws Exception {\n 41          log.info(\"Registering \" + member.getName());\n 42          em.persist(member);\n 43          memberEventSrc.fire(member);\n 44      }\n 45  }\n","lineNumber":21,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/service/MemberRegistration.java","kind":"Module","name":"javax.ejb.Stateless","renamed":"ejb"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","message":"Replace the `javax.enterprise` import statement with `jakarta.enterprise`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.util;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.enterprise.context.RequestScoped;\n 22  import javax.enterprise.inject.Produces;\n 23  import javax.enterprise.inject.spi.InjectionPoint;\n 24  import javax.faces.context.FacesContext;\n 25  import javax.persistence.EntityManager;\n 26  import javax.persistence.PersistenceContext;\n 27  \n 28  /**\n 29   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans\n 30   *\n 31   * \u003cp\u003e\n 32   * Example injection on a managed bean field:\n 33   * \u003c/p\u003e\n 34   *\n 35   * \u003cpre\u003e\n 36   * \u0026#064;Inject\n 37   * private EntityManager em;\n 38   * \u003c/pre\u003e\n 39   */\n 40  public class Resources {\n 41      @Produces\n 42      @PersistenceContext\n 43      private EntityManager em;\n 44  \n 45      @Produces\n 46      public Logger produceLog(InjectionPoint injectionPoint) {\n 47          return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName());\n 48      }\n 49  \n 50      @Produces\n 51      @RequestScoped\n 52      public FacesContext produceFacesContext() {\n 53          return FacesContext.getCurrentInstance();\n 54      }\n 55  \n 56  }\n","lineNumber":21,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","kind":"Module","name":"javax.enterprise.context.RequestScoped","renamed":"enterprise"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","message":"Replace the `javax.faces` import statement with `jakarta.faces`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.util;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.enterprise.context.RequestScoped;\n 22  import javax.enterprise.inject.Produces;\n 23  import javax.enterprise.inject.spi.InjectionPoint;\n 24  import javax.faces.context.FacesContext;\n 25  import javax.persistence.EntityManager;\n 26  import javax.persistence.PersistenceContext;\n 27  \n 28  /**\n 29   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans\n 30   *\n 31   * \u003cp\u003e\n 32   * Example injection on a managed bean field:\n 33   * \u003c/p\u003e\n 34   *\n 35   * \u003cpre\u003e\n 36   * \u0026#064;Inject\n 37   * private EntityManager em;\n 38   * \u003c/pre\u003e\n 39   */\n 40  public class Resources {\n 41      @Produces\n 42      @PersistenceContext\n 43      private EntityManager em;\n 44  \n 45      @Produces\n 46      public Logger produceLog(InjectionPoint injectionPoint) {\n 47          return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName());\n 48      }\n 49  \n 50      @Produces\n 51      @RequestScoped\n 52      public FacesContext produceFacesContext() {\n 53          return FacesContext.getCurrentInstance();\n 54      }\n 55  \n 56  }\n","lineNumber":24,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","kind":"Module","name":"javax.faces.context.FacesContext","renamed":"faces"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","message":"Replace the `javax.enterprise` import statement with `jakarta.enterprise`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.util;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.enterprise.context.RequestScoped;\n 22  import javax.enterprise.inject.Produces;\n 23  import javax.enterprise.inject.spi.InjectionPoint;\n 24  import javax.faces.context.FacesContext;\n 25  import javax.persistence.EntityManager;\n 26  import javax.persistence.PersistenceContext;\n 27  \n 28  /**\n 29   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans\n 30   *\n 31   * \u003cp\u003e\n 32   * Example injection on a managed bean field:\n 33   * \u003c/p\u003e\n 34   *\n 35   * \u003cpre\u003e\n 36   * \u0026#064;Inject\n 37   * private EntityManager em;\n 38   * \u003c/pre\u003e\n 39   */\n 40  public class Resources {\n 41      @Produces\n 42      @PersistenceContext\n 43      private EntityManager em;\n 44  \n 45      @Produces\n 46      public Logger produceLog(InjectionPoint injectionPoint) {\n 47          return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName());\n 48      }\n 49  \n 50      @Produces\n 51      @RequestScoped\n 52      public FacesContext produceFacesContext() {\n 53          return FacesContext.getCurrentInstance();\n 54      }\n 55  \n 56  }\n","lineNumber":23,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","kind":"Module","name":"javax.enterprise.inject.spi.InjectionPoint","renamed":"enterprise"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.util;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.enterprise.context.RequestScoped;\n 22  import javax.enterprise.inject.Produces;\n 23  import javax.enterprise.inject.spi.InjectionPoint;\n 24  import javax.faces.context.FacesContext;\n 25  import javax.persistence.EntityManager;\n 26  import javax.persistence.PersistenceContext;\n 27  \n 28  /**\n 29   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans\n 30   *\n 31   * \u003cp\u003e\n 32   * Example injection on a managed bean field:\n 33   * \u003c/p\u003e\n 34   *\n 35   * \u003cpre\u003e\n 36   * \u0026#064;Inject\n 37   * private EntityManager em;\n 38   * \u003c/pre\u003e\n 39   */\n 40  public class Resources {\n 41      @Produces\n 42      @PersistenceContext\n 43      private EntityManager em;\n 44  \n 45      @Produces\n 46      public Logger produceLog(InjectionPoint injectionPoint) {\n 47          return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName());\n 48      }\n 49  \n 50      @Produces\n 51      @RequestScoped\n 52      public FacesContext produceFacesContext() {\n 53          return FacesContext.getCurrentInstance();\n 54      }\n 55  \n 56  }\n","lineNumber":26,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","kind":"Module","name":"javax.persistence.PersistenceContext","renamed":"persistence"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","message":"Replace the `javax.enterprise` import statement with `jakarta.enterprise`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.util;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.enterprise.context.RequestScoped;\n 22  import javax.enterprise.inject.Produces;\n 23  import javax.enterprise.inject.spi.InjectionPoint;\n 24  import javax.faces.context.FacesContext;\n 25  import javax.persistence.EntityManager;\n 26  import javax.persistence.PersistenceContext;\n 27  \n 28  /**\n 29   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans\n 30   *\n 31   * \u003cp\u003e\n 32   * Example injection on a managed bean field:\n 33   * \u003c/p\u003e\n 34   *\n 35   * \u003cpre\u003e\n 36   * \u0026#064;Inject\n 37   * private EntityManager em;\n 38   * \u003c/pre\u003e\n 39   */\n 40  public class Resources {\n 41      @Produces\n 42      @PersistenceContext\n 43      private EntityManager em;\n 44  \n 45      @Produces\n 46      public Logger produceLog(InjectionPoint injectionPoint) {\n 47          return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName());\n 48      }\n 49  \n 50      @Produces\n 51      @RequestScoped\n 52      public FacesContext produceFacesContext() {\n 53          return FacesContext.getCurrentInstance();\n 54      }\n 55  \n 56  }\n","lineNumber":22,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","kind":"Module","name":"javax.enterprise.inject.Produces","renamed":"enterprise"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.util;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.enterprise.context.RequestScoped;\n 22  import javax.enterprise.inject.Produces;\n 23  import javax.enterprise.inject.spi.InjectionPoint;\n 24  import javax.faces.context.FacesContext;\n 25  import javax.persistence.EntityManager;\n 26  import javax.persistence.PersistenceContext;\n 27  \n 28  /**\n 29   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans\n 30   *\n 31   * \u003cp\u003e\n 32   * Example injection on a managed bean field:\n 33   * \u003c/p\u003e\n 34   *\n 35   * \u003cpre\u003e\n 36   * \u0026#064;Inject\n 37   * private EntityManager em;\n 38   * \u003c/pre\u003e\n 39   */\n 40  public class Resources {\n 41      @Produces\n 42      @PersistenceContext\n 43      private EntityManager em;\n 44  \n 45      @Produces\n 46      public Logger produceLog(InjectionPoint injectionPoint) {\n 47          return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName());\n 48      }\n 49  \n 50      @Produces\n 51      @RequestScoped\n 52      public FacesContext produceFacesContext() {\n 53          return FacesContext.getCurrentInstance();\n 54      }\n 55  \n 56  }\n","lineNumber":25,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","kind":"Module","name":"javax.persistence.EntityManager","renamed":"persistence"}},{"uri":"file:///opt/input/source/src/test/java/org/jboss/as/quickstarts/kitchensink/test/MemberRegistrationIT.java","message":"Replace the `javax.inject` import statement with `jakarta.inject`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.test;\n 18  \n 19  import static org.junit.Assert.assertNotNull;\n 20  \n 21  import java.util.logging.Logger;\n 22  \n 23  import javax.inject.Inject;\n 24  \n 25  import org.jboss.arquillian.container.test.api.Deployment;\n 26  import org.jboss.arquillian.junit.Arquillian;\n 27  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 28  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 29  import org.jboss.as.quickstarts.kitchensink.util.Resources;\n 30  import org.jboss.shrinkwrap.api.Archive;\n 31  import org.jboss.shrinkwrap.api.ShrinkWrap;\n 32  import org.jboss.shrinkwrap.api.asset.EmptyAsset;\n 33  import org.jboss.shrinkwrap.api.spec.WebArchive;\n 34  import org.junit.Test;\n 35  import org.junit.runner.RunWith;\n 36  \n 37  @RunWith(Arquillian.class)\n 38  public class MemberRegistrationIT {\n 39      @Deployment\n 40      public static Archive\u003c?\u003e createTestArchive() {\n 41          return ShrinkWrap.create(WebArchive.class, \"test.war\")\n 42              .addClasses(Member.class, MemberRegistration.class, Resources.class)\n 43              .addAsResource(\"META-INF/test-persistence.xml\", \"META-INF/persistence.xml\")\n 44              .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\")\n 45              // Deploy our test datasource\n 46              .addAsWebInfResource(\"test-ds.xml\");\n 47      }\n 48  \n 49      @Inject\n 50      MemberRegistration memberRegistration;\n 51  \n 52      @Inject\n 53      Logger log;\n 54  \n 55      @Test\n 56      public void testRegister() throws Exception {\n 57          Member newMember = new Member();\n 58          newMember.setName(\"Jane Doe\");\n 59          newMember.setEmail(\"jane@mailinator.com\");\n 60          newMember.setPhoneNumber(\"2125551234\");\n 61          memberRegistration.register(newMember);\n 62          assertNotNull(newMember.getId());\n 63          log.info(newMember.getName() + \" was persisted with id \" + newMember.getId());\n 64      }\n 65  \n 66  }\n","lineNumber":23,"variables":{"file":"file:///opt/input/source/src/test/java/org/jboss/as/quickstarts/kitchensink/test/MemberRegistrationIT.java","kind":"Module","name":"javax.inject.Inject","renamed":"inject"}},{"uri":"file:///opt/input/source/target/generated-sources/annotations/org/jboss/as/quickstarts/kitchensink/model/Member_.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence`","codeSnip":"  1  package org.jboss.as.quickstarts.kitchensink.model;\n  2  \n  3  import javax.annotation.Generated;\n  4  import javax.persistence.metamodel.SingularAttribute;\n  5  import javax.persistence.metamodel.StaticMetamodel;\n  6  \n  7  @Generated(value = \"org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor\")\n  8  @StaticMetamodel(Member.class)\n  9  public abstract class Member_ {\n 10  \n 11  \tpublic static volatile SingularAttribute\u003cMember, String\u003e phoneNumber;\n 12  \tpublic static volatile SingularAttribute\u003cMember, String\u003e name;\n 13  \tpublic static volatile SingularAttribute\u003cMember, Long\u003e id;\n 14  \tpublic static volatile SingularAttribute\u003cMember, String\u003e email;\n 15  \n 16  \tpublic static final String PHONE_NUMBER = \"phoneNumber\";\n 17  \tpublic static final String NAME = \"name\";\n 18  \tpublic static final String ID = \"id\";\n 19  \tpublic static final String EMAIL = \"email\";\n 20  \n 21  }\n 22  \n","lineNumber":5,"variables":{"file":"file:///opt/input/source/target/generated-sources/annotations/org/jboss/as/quickstarts/kitchensink/model/Member_.java","kind":"Module","name":"javax.persistence.metamodel.StaticMetamodel","renamed":"persistence"}},{"uri":"file:///opt/input/source/target/generated-sources/annotations/org/jboss/as/quickstarts/kitchensink/model/Member_.java","message":"Replace the `javax.annotation` import statement with `jakarta.annotation`","codeSnip":"  1  package org.jboss.as.quickstarts.kitchensink.model;\n  2  \n  3  import javax.annotation.Generated;\n  4  import javax.persistence.metamodel.SingularAttribute;\n  5  import javax.persistence.metamodel.StaticMetamodel;\n  6  \n  7  @Generated(value = \"org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor\")\n  8  @StaticMetamodel(Member.class)\n  9  public abstract class Member_ {\n 10  \n 11  \tpublic static volatile SingularAttribute\u003cMember, String\u003e phoneNumber;\n 12  \tpublic static volatile SingularAttribute\u003cMember, String\u003e name;\n 13  \tpublic static volatile SingularAttribute\u003cMember, Long\u003e id;\n 14  \tpublic static volatile SingularAttribute\u003cMember, String\u003e email;\n 15  \n 16  \tpublic static final String PHONE_NUMBER = \"phoneNumber\";\n 17  \tpublic static final String NAME = \"name\";\n 18  \tpublic static final String ID = \"id\";\n 19  \tpublic static final String EMAIL = \"email\";\n 20  \n 21  }\n 22  \n","lineNumber":3,"variables":{"file":"file:///opt/input/source/target/generated-sources/annotations/org/jboss/as/quickstarts/kitchensink/model/Member_.java","kind":"Module","name":"javax.annotation.Generated","renamed":"annotation"}},{"uri":"file:///opt/input/source/target/generated-sources/annotations/org/jboss/as/quickstarts/kitchensink/model/Member_.java","message":"Replace the `javax.persistence` import statement with `jakarta.persistence`","codeSnip":"  1  package org.jboss.as.quickstarts.kitchensink.model;\n  2  \n  3  import javax.annotation.Generated;\n  4  import javax.persistence.metamodel.SingularAttribute;\n  5  import javax.persistence.metamodel.StaticMetamodel;\n  6  \n  7  @Generated(value = \"org.hibernate.jpamodelgen.JPAMetaModelEntityProcessor\")\n  8  @StaticMetamodel(Member.class)\n  9  public abstract class Member_ {\n 10  \n 11  \tpublic static volatile SingularAttribute\u003cMember, String\u003e phoneNumber;\n 12  \tpublic static volatile SingularAttribute\u003cMember, String\u003e name;\n 13  \tpublic static volatile SingularAttribute\u003cMember, Long\u003e id;\n 14  \tpublic static volatile SingularAttribute\u003cMember, String\u003e email;\n 15  \n 16  \tpublic static final String PHONE_NUMBER = \"phoneNumber\";\n 17  \tpublic static final String NAME = \"name\";\n 18  \tpublic static final String ID = \"id\";\n 19  \tpublic static final String EMAIL = \"email\";\n 20  \n 21  }\n 22  \n","lineNumber":4,"variables":{"file":"file:///opt/input/source/target/generated-sources/annotations/org/jboss/as/quickstarts/kitchensink/model/Member_.java","kind":"Module","name":"javax.persistence.metamodel.SingularAttribute","renamed":"persistence"}}],"Extras":null,"effort":1}},"unmatched":["javaee-to-jakarta-namespaces-00003","javaee-to-jakarta-namespaces-00007","javaee-to-jakarta-namespaces-00004","javaee-to-jakarta-namespaces-00010","javaee-to-jakarta-namespaces-00008","javaee-to-jakarta-namespaces-00009","javaee-to-jakarta-namespaces-00015","javaee-to-jakarta-namespaces-00011","javaee-to-jakarta-namespaces-00014","javaee-to-jakarta-namespaces-00012","javaee-to-jakarta-namespaces-00013","javaee-to-jakarta-namespaces-00005","javaee-to-jakarta-namespaces-00018","javaee-to-jakarta-namespaces-00017","javaee-to-jakarta-namespaces-00016","javaee-to-jakarta-namespaces-00024","javaee-to-jakarta-namespaces-00022","javaee-to-jakarta-namespaces-00020","javaee-to-jakarta-namespaces-00023","javaee-to-jakarta-namespaces-00019","javaee-to-jakarta-namespaces-00026","javaee-to-jakarta-namespaces-00027","javaee-to-jakarta-namespaces-00025","javaee-to-jakarta-namespaces-00031","javaee-to-jakarta-namespaces-00029","javaee-to-jakarta-namespaces-00028","javaee-to-jakarta-namespaces-00032","javaee-to-jakarta-namespaces-00035","javaee-to-jakarta-namespaces-00034","javaee-to-jakarta-namespaces-00039","javaee-to-jakarta-namespaces-00037","javaee-to-jakarta-namespaces-00038","javaee-to-jakarta-namespaces-00040","javaee-to-jakarta-namespaces-00042","javaee-to-jakarta-namespaces-00041","javaee-to-jakarta-namespaces-00045","javaee-to-jakarta-namespaces-00046","javaee-to-jakarta-namespaces-00047","javaee-to-jakarta-namespaces-00043","javaee-to-jakarta-namespaces-00044","javaee-to-jakarta-namespaces-00049","javax-to-jakarta-bootstrapping-files-00001","javax-to-jakarta-dependencies-00001","javax-to-jakarta-dependencies-00004","javax-to-jakarta-dependencies-00002","javax-to-jakarta-dependencies-00003","javaee-to-jakarta-namespaces-00051","javax-to-jakarta-dependencies-00007","javax-to-jakarta-dependencies-00008","javax-to-jakarta-dependencies-00006","javax-to-jakarta-dependencies-00005","javax-to-jakarta-properties-00001","javax-to-jakarta-servlet-00010","javax-to-jakarta-servlet-00030","javax-to-jakarta-servlet-00040","javax-to-jakarta-servlet-00041","javax-to-jakarta-servlet-00042","javax-to-jakarta-servlet-00050","javax-to-jakarta-servlet-00043","javax-to-jakarta-servlet-00020","javax-to-jakarta-servlet-00070","javax-to-jakarta-servlet-00071","javax-to-jakarta-servlet-00072","javax-to-jakarta-servlet-00080","javax-to-jakarta-servlet-00090","javax-to-jakarta-servlet-00060","javax-to-jakarta-servlet-00102","javax-to-jakarta-servlet-00101","javax-to-jakarta-servlet-00100","javax-to-jakarta-servlet-00112","javax-to-jakarta-servlet-00120","javax-to-jakarta-servlet-00121","javax-to-jakarta-servlet-00122","javax-to-jakarta-servlet-00111","javax-to-jakarta-servlet-00123","javax-to-jakarta-servlet-00110"],"skipped":["eap8-faces-00001","eap8-faces-00002","eap8-faces-00003","eap8-faces-00004","eap8-faces-00005","eap8-faces-00006","eap8-faces-00007","eap8-faces-00008","eap8-faces-00009","eap8-resteasy-00001","eap8-resteasy-00002","eap8-resteasy-00003","eap8-resteasy-00004","eap8-resteasy-00005","eap8-resteasy-00006","eap8-resteasy-00007","eap8-resteasy-00008","eap8-resteasy-00009","eap8-resteasy-00010","eap8-resteasy-00011","eap8-xml-binding-00001","eap8-xml-binding-00002","eap8-xml-binding-00003","eap8-xml-binding-00004","eap8-xml-binding-00005","eap8-xml-binding-00006","eap8-xml-binding-00007","eap8-xml-binding-00008","eap8-xml-binding-00009","eap8-ejb-00001","eap8-ejb-00002","eap8-ejb-00003","empty-beans-xml-00001","hibernate-6.2-00010","hibernate-6.2-00020","hibernate-6.2-00030","hibernate-6.2-00040","hibernate-6.2-00050","hibernate-search-6.1-00010","hibernate-search-6.1-00020","hibernate-search-6.1-00030","hibernate-search-6.1-00040","hibernate-search-6.1-00050","hibernate-search-6.1-00060","hibernate-search-6.1-00070","hibernate-search-6.1-00080","hibernate-search-6.1-00090","hibernate-search-6.1-00100","hibernate-search-6.1-00120","hibernate-search-6.1-00130","hibernate-search-6.1-00140","hibernate-search-6.1-00150","hibernate-search-6.1-00160","hibernate-search-6.1-00170","hibernate-search-6.1-00180","hibernate-search-6.1-00190","hibernate-search-00010","hibernate-search-00020","hibernate-search-00030","hibernate-search-00040","hibernate-search-00050","hibernate-search-00060","hibernate-search-00070","hibernate-search-00080","hibernate-search-00090","hibernate-search-00100","hibernate-search-00105","hibernate-search-00110","hibernate-search-00120","hibernate-search-00140","hibernate-search-00150","hibernate-search-00160","hibernate-search-00170","hibernate-search-00180","hibernate-search-00190","hibernate-search-00200","hibernate-search-00210","hibernate-search-00220","hibernate-search-00230","hibernate-search-00240","hibernate-search-00250","hibernate-search-00260","hibernate-search-00270","hibernate-search-00280","hibernate-search-00290","hibernate-search-00300","hibernate-search-00310","hibernate-search-00320","hibernate-search-00330","hibernate-search-00340","hibernate-search-00350","hibernate-search-00360","hibernate-search-00370","hibernate-search-00380","hibernate-search-00390","hibernate-search-00400","hibernate-search-00410","hibernate-search-00420","hibernate-search-00430","hibernate-search-00440","hibernate-search-00450","hibernate-search-00460","hibernate-search-00470","hibernate-search-00480","hibernate-search-00490","hibernate-search-00500","hibernate-search-00510","hibernate-search-00520","hibernate-search-00530","hibernate-search-00540","hibernate-search-00550","hibernate-search-00560","hibernate-search-00570","hibernate-search-00580","hibernate-search-00590","hibernate-search-00600","hibernate-search-00610","hibernate-search-00620","hibernate-search-00630","hibernate-search-00640","hibernate-search-00650","hibernate-search-00660","hibernate-search-00670","hibernate-search-00680","hibernate-search-00690","hibernate-search-00700","hibernate-search-00710","hibernate-search-00720","hibernate-search-00730","hibernate-search-00740","hibernate-search-00750","hibernate-search-00760","hibernate-search-00770","hibernate-search-00780","hibernate-search-00790","hibernate-search-00800","hibernate-search-00810","hibernate-search-00820","hibernate-search-00830","hibernate-search-00840","hibernate-search-00850","hibernate-search-00860","hibernate-search-00870","hibernate-search-00880","hibernate-search-00890","hibernate-search-00900","hibernate-search-00910","hibernate-search-00920","hibernate-search-00930","hibernate-search-00940","hibernate-search-00950","hibernate-search-00960","hibernate-search-00970","hibernate-search-00980","hibernate-search-00990","hibernate-search-01000","hibernate-search-01010","hibernate-search-01020","hibernate-search-01030","hibernate-search-01040","hibernate-00005","hibernate-00010","hibernate6-00020","hibernate6-00030","hibernate6-00040","hibernate6-00050","hibernate6-00060","hibernate6-00070","hibernate6-00080","hibernate6-00090","hibernate6-00100","hibernate6-00110","hibernate6-00120","hibernate6-00130","hibernate6-00140","hibernate6-00150","hibernate6-00160","hibernate6-00170","hibernate6-00180","hibernate6-00190","hibernate6-00200","hibernate6-00210","hibernate6-00220","hibernate6-00230","hibernate6-00240","hibernate6-00250","hibernate6-00251","hibernate6-00252","hibernate6-00253","hibernate6-00254","hibernate6-00255","hibernate6-00257","hibernate6-00270","jakarta-cdi-00001","jakarta-cdi-00002","jakarta-cdi-00003","jakarta-cdi-00004","jakarta-el-00010","jakarta-el-00020","jakarta-faces-00001","jakarta-json-binding-00010","jakarta-soap-00010","jakarta-soap-00020","jakarta-ws-rs-00001","jboss-dependencies-00001","jboss-dependencies-00002","jboss-dependencies-00003","jboss-dependencies-00004","jboss-dependencies-00005","jboss-dependencies-00006","jboss-dependencies-00007","jboss-dependencies-00008","jboss-dependencies-00009","jboss-dependencies-00010","jboss-dependencies-00011","jboss-dependencies-00012","jboss-dependencies-00013","jboss-dependencies-00014","jboss-dependencies-00015","jboss-dependencies-00016","jboss-dependencies-00017","jboss-dependencies-00018","jboss-dependencies-00019","jboss-dependencies-00020","jboss-dependencies-00021","jboss-dependencies-00022","jboss-dependencies-00023","jboss-dependencies-00024","jboss-dependencies-00025","jboss-dependencies-00026","jboss-dependencies-00027","jboss-dependencies-00028","jboss-dependencies-00029","jboss-dependencies-00030","jboss-dependencies-00031","keycloak-openid-00001","keycloak-openid-00010","legacy-vault-00010","login-modules-00001","picketlink-00010","picketlink-00020"]},{"name":"eapxp/thorntail","description":"This ruleset provides analysis of Maven built applications that use Thorntail Maven Plugin, which should be replaced by JBoss EAP XP Bootable JAR Maven Plugin, when migrating to JBoss EAP XP.","skipped":["eapxp_bootable_jar_maven_plugin_configuration_changes-1","remove_thorntail_yaml_configuration_files-1","replace_thorntail_boms-1","replace_thorntail_boms-2","replace_thorntail_fractions-01","replace_thorntail_fractions-02","replace_thorntail_fractions-03","replace_thorntail_fractions-04","replace_thorntail_fractions-05","replace_thorntail_fractions-06","replace_thorntail_fractions-07","replace_thorntail_fractions-08","replace_thorntail_fractions-09","replace_thorntail_fractions-10","replace_thorntail_fractions-11","replace_thorntail_fractions-12","replace_thorntail_fractions-13","replace_thorntail_fractions-14","replace_thorntail_fractions-15","replace_thorntail_fractions-16","replace_thorntail_fractions-17","replace_thorntail_fractions-18","replace_thorntail_fractions-19","replace_thorntail_fractions-20","replace_thorntail_fractions-21","replace_thorntail_fractions-22","replace_thorntail_fractions-23","replace_thorntail_fractions-24","replace_thorntail_fractions-25","replace_thorntail_fractions-26","replace_thorntail_fractions-27","replace_thorntail_fractions-28","replace_thorntail_fractions-29","replace_thorntail_fractions-30","replace_thorntail_fractions-31","replace_thorntail_fractions-32","replace_thorntail_fractions-33","replace_thorntail_fractions-34","replace_thorntail_fractions-35","replace_thorntail_fractions-36","replace_thorntail_fractions-37","replace_thorntail_fractions-38","replace_thorntail_fractions-39","replace_thorntail_fractions-40","replace_thorntail_fractions-41","replace_thorntail_fractions-42","replace_thorntail_fractions-43","replace_thorntail_fractions-44","replace_thorntail_fractions-45","replace_thorntail_fractions-46","replace_thorntail_fractions-47","replace_thorntail_fractions-48","replace_thorntail_fractions-49","replace_thorntail_fractions-50","replace_thorntail_maven_plugin-1"]},{"name":"filemappings","description":"This rule set configures the organization matching functionality, using known root-package prefixes to identify libraries and other code."},{"name":"fuse","description":"This ruleset provides analysis that may require individual attention when migrating from Sonic classes.","skipped":["sonic-catchall-00000","sonic-esb-01000","sonic-esb-02000","sonic-esb-03000","sonic-esb-04000","sonic-esb-05000","sonic-esb-06000","sonic-esb-07000","sonic-esb-08000","sonic-esb-09000","sonic-esb-10000","sonic-esb-11000","sonic-esb-12000","sonic-esb-13000","sonic-esb-14000","sonic-esb-15000","sonic-esb-16000","sonic-esb-17000","sonic-esb-18000","sonic-esb-19000","sonic-esb-20000","sonic-esb-21000","xml-sonic-esb-01000"]},{"name":"fuse-service-works/soa-p-5","description":"This ruleset provides analysis of JBoss SOA Platform 5 applications and provides information on how to migrate these to Red Hat JBoss Fuse Service Works","skipped":["soa-p-5-01000","soa-p-5-02000","soa-p-5-03000","soa-p-5-04000","soa-p-5-05000","soa-p-5-06000","soa-p-5-07000","soa-p-5-08000","soa-p-5-09000","soa-p-5-10000","soa-p-5-11000","soa-p-5-12000","soa-p-5-13000","soa-p-5-14000","soa-p-5-15000","soa-p-16000","soa-p-17000","soa-p-18000","soa-p-19000","soa-p-20000","soa-p-21000","soa-p-22000","soa-p-23000","soa-p-24000","soa-p-25000","soa-p-26000","soa-p-27000","soa-p-28000","soa-p-29000","soa-p-30000","soa-p-31000","soa-p-32000","soa-p-33000","soa-p-34000","soa-p-35000","soa-p-36000","soa-p-37000","soa-p-38000","soa-p-39000","soa-p-40000","soa-p-41000","soa-p-42000","soa-p-43000","soa-p-44000","soa-p-45000","soa-p-46000","soa-p-47000","soa-p-48000","soa-p-49000","soa-p-50000"]},{"name":"hibernate","description":"This ruleset provides analysis that may require individual attention when migrating to newer Hibernate java constructs.","skipped":["hibernate-catchall-00000","hibernate-xml-01000","hibernate-xml-02000","hibernate-xml-03000","hibernate-10100","hibernate-01000","hibernate-02000","hibernate-03000","hibernate-04000","hibernate-05000","hibernate-06000","hibernate-07000","hibernate-08000","hibernate-09000","hibernate-10000"]},{"name":"jws5","description":"This ruleset provides analysis of applications that need to change their pom dependencies to upgrade dependencies that belong to the groupId `org.apache.tomcat`","skipped":["upgrade-tomcat-dependencies-00001"]},{"name":"openjdk11/openjdk8","description":"This ruleset provides analysis with respect to API removals between OpenJDK 8 and 11.","skipped":["java-removals-00000","java-removals-00010","java-removals-00020","java-removals-00030","java-removals-00040","java-removals-00041","java-removals-00050","java-removals-00060","java-removals-00100","java-removals-00110","java-removals-00120","java-removals-00130","java-removals-00140","java-removals-00150","removed-javaee-modules-00000","removed-javaee-modules-00010","removed-javaee-modules-00020"]},{"name":"openjdk17","description":"This ruleset provides analysis regarding removed APIs in OpenJDK 18 to 21.","skipped":["deprecation-00000","deprecation-00005","deprecation-00010","deprecation-00020","deprecation-00030","dynamic-agents-00000","finalization-deprecation-00000","finalization-deprecation-00010","removed-apis-00000","removed-apis-00005","removed-apis-00010","removed-apis-00015","utf-8-by-default-00000","utf-8-by-default-00010","utf-8-by-default-00020","utf-8-by-default-00030"]},{"name":"openjdk17/openjdk11","description":"This ruleset provides analysis Security Manager classes and methods deprecated between OpenJDK 11 to 17.","skipped":["applet-api-deprecation-00000","lombok-incompatibility-00001","removed-classes-00000","removed-packages-00000","removed-packages-00010","security-manager-deprecation-00000","security-manager-deprecation-00010","security-manager-deprecation-00020","security-manager-deprecation-00030","security-manager-deprecation-00040","security-manager-deprecation-00050","security-manager-deprecation-00060","security-manager-deprecation-00070"]},{"name":"openjdk7/oraclejdk7","description":"This ruleset provides analysis with respect to the migration from OracleJDK to OpenJDK.","skipped":["oracle2openjdk-00000","oracle2openjdk-00001","oracle2openjdk-00002","oracle2openjdk-00003","oracle2openjdk-00004","oracle2openjdk-00005"]},{"name":"openliberty/websphere","description":"This ruleset identifies usage of WebSphere APIs and technologies which are not provided by Open Liberty.","skipped":["DetectJavaApplicationDeploymentJava","DetectJavaPortlet","DetectJAXRJava","DetectRemoteBundleRepositoriesJava","DetectRemoteServicesJava","DetectWSNotificationJava","DetectEJBEntityBeansXML","DetectTransactionPropagationEJBRemote","DetectJAXRPC","ActivitySessionRule","AppProfileRule","AsyncBeansSchedulerRule","BatchFeaturePackRule","DetectPolicySetAndWsSecurity","DetectWSATXML","DetectWSBAJava","DynamicCacheRule","DynamicQueryRule","I18nRule","MTOMRule","ServerName","SOAPOverJMSRule","StartupBeanRule","WebSphereSdoRule","WebSphereSchedulerRule","WebSphereServletRule","WebSphereUnavailableAPIsAppClient","WebSphereUnavailableAPIsConnectorArchitecture","WebSphereUnavailableAPIsEnterpriseJavaBeans","WebSphereUnavailableAPIsExceptions","WebSphereUnavailableAPIsExtensionRegistry","WebSphereUnavailableAPIsISC","WebSphereUnavailableAPIsLoggingAndRAS","WebSphereUnavailableAPIsManagement","WebSphereUnavailableAPIsORB","WebSphereUnavailableAPIsPMI","WebSphereUnavailableAPIsPortal","WebSphereUnavailableAPIsResourceAdapter","WebSphereUnavailableAPIsSecurity","WebSphereUnavailableAPIsSIB","WebSphereUnavailableAPIsSMF","WebSphereUnavailableAPIsTPV","WebSphereUnavailableAPIsExtHelper","WebSphereUnavailableAPIsUDDI","WebSphereUnavailableAPIsWLM","WebSphereUnavailableAPIsWSADIE","WebSphereUnavailableAPIsWSSecurityHelper","WebSphereUnavailableSPIsRRD","WebSphereUnavailableSSOCookieMethod","WebSphereUnavailableSSOTokenMethod","WOLAMissingClassesRule","WOLARule","WorkAreaRule","WSNotificationRuleJava","XMLFeaturePackRule","WebSphereWebServicesRule","WebSphereWebServicesGeneratedClassesRule"]},{"name":"openshift","description":"This ruleset detects the Java Mail API, which may be problematic when migrating an application to a cloud environment.","violations":{"local-storage-00001":{"description":"File system - Java IO\nAn application running inside a container could lose access to a file in local storage.. Recommendations. The following recommendations depend on the function of the file in local storage:. * Logging: Log to standard output and use a centralized log collector to analyze the logs.. * Caching: Use a cache backing service.. * Configuration: Store configuration settings in environment variables so that they can be updated without code changes.. * Data storage: Use a database backing service for relational data or use a persistent data storage system.. * Temporary data storage: Use the file system of a running container as a brief, single-transaction cache.","category":"mandatory","labels":["konveyor.io/target=cloud-readiness","konveyor.io/source","storage"],"incidents":[{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","message":"An application running inside a container could lose access to a file in local storage.. Recommendations. The following recommendations depend on the function of the file in local storage:. * Logging: Log to standard output and use a centralized log collector to analyze the logs.. * Caching: Use a cache backing service.. * Configuration: Store configuration settings in environment variables so that they can be updated without code changes.. * Data storage: Use a database backing service for relational data or use a persistent data storage system.. * Temporary data storage: Use the file system of a running container as a brief, single-transaction cache.","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.data;\n 18  \n 19  import javax.enterprise.context.ApplicationScoped;\n 20  import javax.inject.Inject;\n 21  import javax.persistence.EntityManager;\n 22  import javax.persistence.criteria.CriteriaBuilder;\n 23  import javax.persistence.criteria.CriteriaQuery;\n 24  import javax.persistence.criteria.Root;\n 25  import java.util.List;\n 26  \n 27  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 28  \n 29  @ApplicationScoped\n 30  public class MemberRepository {\n 31  \n 32      @Inject\n 33      private EntityManager em;\n 34  \n 35      public Member findById(Long id) {\n 36          return em.find(Member.class, id);\n 37      }\n 38  \n 39      public Member findByEmail(String email) {\n 40          CriteriaBuilder cb = em.getCriteriaBuilder();\n 41          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 42          Root\u003cMember\u003e member = criteria.from(Member.class);\n 43          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 44          // feature in JPA 2.0\n 45          // criteria.select(member).where(cb.equal(member.get(Member_.email), email));\n 46          criteria.select(member).where(cb.equal(member.get(\"email\"), email));\n 47          return em.createQuery(criteria).getSingleResult();\n 48      }\n 49  \n 50      public List\u003cMember\u003e findAllOrderedByName() {\n 51          CriteriaBuilder cb = em.getCriteriaBuilder();\n 52          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 53          Root\u003cMember\u003e member = criteria.from(Member.class);\n 54          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 55          // feature in JPA 2.0\n 56          // criteria.select(member).orderBy(cb.asc(member.get(Member_.name)));\n 57          criteria.select(member).orderBy(cb.asc(member.get(\"name\")));\n 58          return em.createQuery(criteria).getResultList();\n 59      }\n 60  }\n","lineNumber":40,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","kind":"Method","name":"findByEmail"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","message":"An application running inside a container could lose access to a file in local storage.. Recommendations. The following recommendations depend on the function of the file in local storage:. * Logging: Log to standard output and use a centralized log collector to analyze the logs.. * Caching: Use a cache backing service.. * Configuration: Store configuration settings in environment variables so that they can be updated without code changes.. * Data storage: Use a database backing service for relational data or use a persistent data storage system.. * Temporary data storage: Use the file system of a running container as a brief, single-transaction cache.","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.data;\n 18  \n 19  import javax.enterprise.context.ApplicationScoped;\n 20  import javax.inject.Inject;\n 21  import javax.persistence.EntityManager;\n 22  import javax.persistence.criteria.CriteriaBuilder;\n 23  import javax.persistence.criteria.CriteriaQuery;\n 24  import javax.persistence.criteria.Root;\n 25  import java.util.List;\n 26  \n 27  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 28  \n 29  @ApplicationScoped\n 30  public class MemberRepository {\n 31  \n 32      @Inject\n 33      private EntityManager em;\n 34  \n 35      public Member findById(Long id) {\n 36          return em.find(Member.class, id);\n 37      }\n 38  \n 39      public Member findByEmail(String email) {\n 40          CriteriaBuilder cb = em.getCriteriaBuilder();\n 41          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 42          Root\u003cMember\u003e member = criteria.from(Member.class);\n 43          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 44          // feature in JPA 2.0\n 45          // criteria.select(member).where(cb.equal(member.get(Member_.email), email));\n 46          criteria.select(member).where(cb.equal(member.get(\"email\"), email));\n 47          return em.createQuery(criteria).getSingleResult();\n 48      }\n 49  \n 50      public List\u003cMember\u003e findAllOrderedByName() {\n 51          CriteriaBuilder cb = em.getCriteriaBuilder();\n 52          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 53          Root\u003cMember\u003e member = criteria.from(Member.class);\n 54          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 55          // feature in JPA 2.0\n 56          // criteria.select(member).orderBy(cb.asc(member.get(Member_.name)));\n 57          criteria.select(member).orderBy(cb.asc(member.get(\"name\")));\n 58          return em.createQuery(criteria).getResultList();\n 59      }\n 60  }\n","lineNumber":46,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","kind":"Method","name":"findByEmail"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","message":"An application running inside a container could lose access to a file in local storage.. Recommendations. The following recommendations depend on the function of the file in local storage:. * Logging: Log to standard output and use a centralized log collector to analyze the logs.. * Caching: Use a cache backing service.. * Configuration: Store configuration settings in environment variables so that they can be updated without code changes.. * Data storage: Use a database backing service for relational data or use a persistent data storage system.. * Temporary data storage: Use the file system of a running container as a brief, single-transaction cache.","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.data;\n 18  \n 19  import javax.enterprise.context.ApplicationScoped;\n 20  import javax.inject.Inject;\n 21  import javax.persistence.EntityManager;\n 22  import javax.persistence.criteria.CriteriaBuilder;\n 23  import javax.persistence.criteria.CriteriaQuery;\n 24  import javax.persistence.criteria.Root;\n 25  import java.util.List;\n 26  \n 27  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 28  \n 29  @ApplicationScoped\n 30  public class MemberRepository {\n 31  \n 32      @Inject\n 33      private EntityManager em;\n 34  \n 35      public Member findById(Long id) {\n 36          return em.find(Member.class, id);\n 37      }\n 38  \n 39      public Member findByEmail(String email) {\n 40          CriteriaBuilder cb = em.getCriteriaBuilder();\n 41          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 42          Root\u003cMember\u003e member = criteria.from(Member.class);\n 43          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 44          // feature in JPA 2.0\n 45          // criteria.select(member).where(cb.equal(member.get(Member_.email), email));\n 46          criteria.select(member).where(cb.equal(member.get(\"email\"), email));\n 47          return em.createQuery(criteria).getSingleResult();\n 48      }\n 49  \n 50      public List\u003cMember\u003e findAllOrderedByName() {\n 51          CriteriaBuilder cb = em.getCriteriaBuilder();\n 52          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 53          Root\u003cMember\u003e member = criteria.from(Member.class);\n 54          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 55          // feature in JPA 2.0\n 56          // criteria.select(member).orderBy(cb.asc(member.get(Member_.name)));\n 57          criteria.select(member).orderBy(cb.asc(member.get(\"name\")));\n 58          return em.createQuery(criteria).getResultList();\n 59      }\n 60  }\n","lineNumber":47,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","kind":"Method","name":"findByEmail"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","message":"An application running inside a container could lose access to a file in local storage.. Recommendations. The following recommendations depend on the function of the file in local storage:. * Logging: Log to standard output and use a centralized log collector to analyze the logs.. * Caching: Use a cache backing service.. * Configuration: Store configuration settings in environment variables so that they can be updated without code changes.. * Data storage: Use a database backing service for relational data or use a persistent data storage system.. * Temporary data storage: Use the file system of a running container as a brief, single-transaction cache.","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.data;\n 18  \n 19  import javax.enterprise.context.ApplicationScoped;\n 20  import javax.inject.Inject;\n 21  import javax.persistence.EntityManager;\n 22  import javax.persistence.criteria.CriteriaBuilder;\n 23  import javax.persistence.criteria.CriteriaQuery;\n 24  import javax.persistence.criteria.Root;\n 25  import java.util.List;\n 26  \n 27  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 28  \n 29  @ApplicationScoped\n 30  public class MemberRepository {\n 31  \n 32      @Inject\n 33      private EntityManager em;\n 34  \n 35      public Member findById(Long id) {\n 36          return em.find(Member.class, id);\n 37      }\n 38  \n 39      public Member findByEmail(String email) {\n 40          CriteriaBuilder cb = em.getCriteriaBuilder();\n 41          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 42          Root\u003cMember\u003e member = criteria.from(Member.class);\n 43          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 44          // feature in JPA 2.0\n 45          // criteria.select(member).where(cb.equal(member.get(Member_.email), email));\n 46          criteria.select(member).where(cb.equal(member.get(\"email\"), email));\n 47          return em.createQuery(criteria).getSingleResult();\n 48      }\n 49  \n 50      public List\u003cMember\u003e findAllOrderedByName() {\n 51          CriteriaBuilder cb = em.getCriteriaBuilder();\n 52          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 53          Root\u003cMember\u003e member = criteria.from(Member.class);\n 54          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 55          // feature in JPA 2.0\n 56          // criteria.select(member).orderBy(cb.asc(member.get(Member_.name)));\n 57          criteria.select(member).orderBy(cb.asc(member.get(\"name\")));\n 58          return em.createQuery(criteria).getResultList();\n 59      }\n 60  }\n","lineNumber":51,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","kind":"Method","name":"findAllOrderedByName"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","message":"An application running inside a container could lose access to a file in local storage.. Recommendations. The following recommendations depend on the function of the file in local storage:. * Logging: Log to standard output and use a centralized log collector to analyze the logs.. * Caching: Use a cache backing service.. * Configuration: Store configuration settings in environment variables so that they can be updated without code changes.. * Data storage: Use a database backing service for relational data or use a persistent data storage system.. * Temporary data storage: Use the file system of a running container as a brief, single-transaction cache.","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.data;\n 18  \n 19  import javax.enterprise.context.ApplicationScoped;\n 20  import javax.inject.Inject;\n 21  import javax.persistence.EntityManager;\n 22  import javax.persistence.criteria.CriteriaBuilder;\n 23  import javax.persistence.criteria.CriteriaQuery;\n 24  import javax.persistence.criteria.Root;\n 25  import java.util.List;\n 26  \n 27  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 28  \n 29  @ApplicationScoped\n 30  public class MemberRepository {\n 31  \n 32      @Inject\n 33      private EntityManager em;\n 34  \n 35      public Member findById(Long id) {\n 36          return em.find(Member.class, id);\n 37      }\n 38  \n 39      public Member findByEmail(String email) {\n 40          CriteriaBuilder cb = em.getCriteriaBuilder();\n 41          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 42          Root\u003cMember\u003e member = criteria.from(Member.class);\n 43          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 44          // feature in JPA 2.0\n 45          // criteria.select(member).where(cb.equal(member.get(Member_.email), email));\n 46          criteria.select(member).where(cb.equal(member.get(\"email\"), email));\n 47          return em.createQuery(criteria).getSingleResult();\n 48      }\n 49  \n 50      public List\u003cMember\u003e findAllOrderedByName() {\n 51          CriteriaBuilder cb = em.getCriteriaBuilder();\n 52          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 53          Root\u003cMember\u003e member = criteria.from(Member.class);\n 54          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 55          // feature in JPA 2.0\n 56          // criteria.select(member).orderBy(cb.asc(member.get(Member_.name)));\n 57          criteria.select(member).orderBy(cb.asc(member.get(\"name\")));\n 58          return em.createQuery(criteria).getResultList();\n 59      }\n 60  }\n","lineNumber":57,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","kind":"Method","name":"findAllOrderedByName"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","message":"An application running inside a container could lose access to a file in local storage.. Recommendations. The following recommendations depend on the function of the file in local storage:. * Logging: Log to standard output and use a centralized log collector to analyze the logs.. * Caching: Use a cache backing service.. * Configuration: Store configuration settings in environment variables so that they can be updated without code changes.. * Data storage: Use a database backing service for relational data or use a persistent data storage system.. * Temporary data storage: Use the file system of a running container as a brief, single-transaction cache.","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.data;\n 18  \n 19  import javax.enterprise.context.ApplicationScoped;\n 20  import javax.inject.Inject;\n 21  import javax.persistence.EntityManager;\n 22  import javax.persistence.criteria.CriteriaBuilder;\n 23  import javax.persistence.criteria.CriteriaQuery;\n 24  import javax.persistence.criteria.Root;\n 25  import java.util.List;\n 26  \n 27  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 28  \n 29  @ApplicationScoped\n 30  public class MemberRepository {\n 31  \n 32      @Inject\n 33      private EntityManager em;\n 34  \n 35      public Member findById(Long id) {\n 36          return em.find(Member.class, id);\n 37      }\n 38  \n 39      public Member findByEmail(String email) {\n 40          CriteriaBuilder cb = em.getCriteriaBuilder();\n 41          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 42          Root\u003cMember\u003e member = criteria.from(Member.class);\n 43          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 44          // feature in JPA 2.0\n 45          // criteria.select(member).where(cb.equal(member.get(Member_.email), email));\n 46          criteria.select(member).where(cb.equal(member.get(\"email\"), email));\n 47          return em.createQuery(criteria).getSingleResult();\n 48      }\n 49  \n 50      public List\u003cMember\u003e findAllOrderedByName() {\n 51          CriteriaBuilder cb = em.getCriteriaBuilder();\n 52          CriteriaQuery\u003cMember\u003e criteria = cb.createQuery(Member.class);\n 53          Root\u003cMember\u003e member = criteria.from(Member.class);\n 54          // Swap criteria statements if you would like to try out type-safe criteria queries, a new\n 55          // feature in JPA 2.0\n 56          // criteria.select(member).orderBy(cb.asc(member.get(Member_.name)));\n 57          criteria.select(member).orderBy(cb.asc(member.get(\"name\")));\n 58          return em.createQuery(criteria).getResultList();\n 59      }\n 60  }\n","lineNumber":58,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberRepository.java","kind":"Method","name":"findAllOrderedByName"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","message":"An application running inside a container could lose access to a file in local storage.. Recommendations. The following recommendations depend on the function of the file in local storage:. * Logging: Log to standard output and use a centralized log collector to analyze the logs.. * Caching: Use a cache backing service.. * Configuration: Store configuration settings in environment variables so that they can be updated without code changes.. * Data storage: Use a database backing service for relational data or use a persistent data storage system.. * Temporary data storage: Use the file system of a running container as a brief, single-transaction cache.","codeSnip":"  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import java.util.HashMap;\n 20  import java.util.HashSet;\n 21  import java.util.List;\n 22  import java.util.Map;\n 23  import java.util.Set;\n 24  import java.util.logging.Logger;\n 25  \n 26  import javax.enterprise.context.RequestScoped;\n 27  import javax.inject.Inject;\n 28  import javax.persistence.NoResultException;\n 29  import javax.validation.ConstraintViolation;\n 30  import javax.validation.ConstraintViolationException;\n 31  import javax.validation.ValidationException;\n 32  import javax.validation.Validator;\n 33  import javax.ws.rs.Consumes;\n 34  import javax.ws.rs.GET;\n 35  import javax.ws.rs.POST;\n 36  import javax.ws.rs.Path;\n 37  import javax.ws.rs.PathParam;\n 38  import javax.ws.rs.Produces;\n 39  import javax.ws.rs.WebApplicationException;\n 40  import javax.ws.rs.core.MediaType;\n 41  import javax.ws.rs.core.Response;\n 42  \n 43  import org.jboss.as.quickstarts.kitchensink.data.MemberRepository;\n 44  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 45  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 46  \n 47  /**\n 48   * JAX-RS Example\n 49   * \u003cp/\u003e\n 50   * This class produces a RESTful service to read/write the contents of the members table.\n 51   */\n 52  @Path(\"/members\")\n 53  @RequestScoped\n 54  public class MemberResourceRESTService {\n 55  \n 56      @Inject\n 57      private Logger log;\n 58  \n 59      @Inject\n 60      private Validator validator;\n 61  \n 62      @Inject\n 63      private MemberRepository repository;\n 64  \n 65      @Inject\n 66      MemberRegistration registration;\n 67  \n 68      @GET\n 69      @Produces(MediaType.APPLICATION_JSON)\n 70      public List\u003cMember\u003e listAllMembers() {\n 71          return repository.findAllOrderedByName();\n 72      }\n 73  \n 74      @GET\n 75      @Path(\"/{id:[0-9][0-9]*}\")\n 76      @Produces(MediaType.APPLICATION_JSON)\n 77      public Member lookupMemberById(@PathParam(\"id\") long id) {\n 78          Member member = repository.findById(id);\n 79          if (member == null) {\n 80              throw new WebApplicationException(Response.Status.NOT_FOUND);\n 81          }\n 82          return member;\n 83      }\n 84  \n 85      /**\n 86       * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,\n 87       * or with a map of fields, and related errors.\n 88       */\n 89      @POST\n 90      @Consumes(MediaType.APPLICATION_JSON)\n 91      @Produces(MediaType.APPLICATION_JSON)\n 92      public Response createMember(Member member) {\n 93  \n 94          Response.ResponseBuilder builder = null;\n 95  \n 96          try {\n 97              // Validates member using bean validation\n 98              validateMember(member);\n 99  \n100              registration.register(member);\n101  \n102              // Create an \"ok\" response\n103              builder = Response.ok();\n104          } catch (ConstraintViolationException ce) {\n105              // Handle bean validation issues\n106              builder = createViolationResponse(ce.getConstraintViolations());\n107          } catch (ValidationException e) {\n108              // Handle the unique constrain violation\n109              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n110              responseObj.put(\"email\", \"Email taken\");\n111              builder = Response.status(Response.Status.CONFLICT).entity(responseObj);\n112          } catch (Exception e) {\n113              // Handle generic exceptions\n114              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n115              responseObj.put(\"error\", e.getMessage());\n116              builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n117          }\n118  \n119          return builder.build();\n120      }\n121  \n122      /**\n123       * \u003cp\u003e\n124       * Validates the given Member variable and throws validation exceptions based on the type of error. If the error is standard\n125       * bean validation errors then it will throw a ConstraintValidationException with the set of the constraints violated.\n126       * \u003c/p\u003e\n127       * \u003cp\u003e\n128       * If the error is caused because an existing member with the same email is registered it throws a regular validation\n129       * exception so that it can be interpreted separately.\n130       * \u003c/p\u003e\n131       *\n132       * @param member Member to be validated\n133       * @throws ConstraintViolationException If Bean Validation errors exist\n134       * @throws ValidationException If member with the same email already exists\n135       */\n136      private void validateMember(Member member) throws ConstraintViolationException, ValidationException {\n137          // Create a bean validator and check for issues.\n138          Set\u003cConstraintViolation\u003cMember\u003e\u003e violations = validator.validate(member);\n139  \n140          if (!violations.isEmpty()) {\n141              throw new ConstraintViolationException(new HashSet\u003c\u003e(violations));\n142          }\n143  \n144          // Check the uniqueness of the email address\n145          if (emailAlreadyExists(member.getEmail())) {\n146              throw new ValidationException(\"Unique Email Violation\");\n147          }\n148      }\n149  \n150      /**\n151       * Creates a JAX-RS \"Bad Request\" response including a map of all violation fields, and their message. This can then be used\n152       * by clients to show violations.\n153       *\n154       * @param violations A set of violations that needs to be reported\n155       * @return JAX-RS response containing all violations\n156       */\n157      private Response.ResponseBuilder createViolationResponse(Set\u003cConstraintViolation\u003c?\u003e\u003e violations) {\n158          log.fine(\"Validation completed. violations found: \" + violations.size());\n159  \n160          Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n161  \n162          for (ConstraintViolation\u003c?\u003e violation : violations) {\n163              responseObj.put(violation.getPropertyPath().toString(), violation.getMessage());\n164          }\n165  \n166          return Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n167      }\n168  \n169      /**\n170       * Checks if a member with the same email address is already registered. This is the only way to easily capture the\n171       * \"@UniqueConstraint(columnNames = \"email\")\" constraint from the Member class.\n172       *\n173       * @param email The email to check\n174       * @return True if the email already exists, and false otherwise\n175       */\n176      public boolean emailAlreadyExists(String email) {\n177          Member member = null;\n178          try {\n179              member = repository.findByEmail(email);\n180          } catch (NoResultException e) {\n181              // ignore\n182          }\n183          return member != null;\n184      }\n185  }\n","lineNumber":106,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","kind":"Method","name":"createMember"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","message":"An application running inside a container could lose access to a file in local storage.. Recommendations. The following recommendations depend on the function of the file in local storage:. * Logging: Log to standard output and use a centralized log collector to analyze the logs.. * Caching: Use a cache backing service.. * Configuration: Store configuration settings in environment variables so that they can be updated without code changes.. * Data storage: Use a database backing service for relational data or use a persistent data storage system.. * Temporary data storage: Use the file system of a running container as a brief, single-transaction cache.","codeSnip":" 63      private MemberRepository repository;\n 64  \n 65      @Inject\n 66      MemberRegistration registration;\n 67  \n 68      @GET\n 69      @Produces(MediaType.APPLICATION_JSON)\n 70      public List\u003cMember\u003e listAllMembers() {\n 71          return repository.findAllOrderedByName();\n 72      }\n 73  \n 74      @GET\n 75      @Path(\"/{id:[0-9][0-9]*}\")\n 76      @Produces(MediaType.APPLICATION_JSON)\n 77      public Member lookupMemberById(@PathParam(\"id\") long id) {\n 78          Member member = repository.findById(id);\n 79          if (member == null) {\n 80              throw new WebApplicationException(Response.Status.NOT_FOUND);\n 81          }\n 82          return member;\n 83      }\n 84  \n 85      /**\n 86       * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,\n 87       * or with a map of fields, and related errors.\n 88       */\n 89      @POST\n 90      @Consumes(MediaType.APPLICATION_JSON)\n 91      @Produces(MediaType.APPLICATION_JSON)\n 92      public Response createMember(Member member) {\n 93  \n 94          Response.ResponseBuilder builder = null;\n 95  \n 96          try {\n 97              // Validates member using bean validation\n 98              validateMember(member);\n 99  \n100              registration.register(member);\n101  \n102              // Create an \"ok\" response\n103              builder = Response.ok();\n104          } catch (ConstraintViolationException ce) {\n105              // Handle bean validation issues\n106              builder = createViolationResponse(ce.getConstraintViolations());\n107          } catch (ValidationException e) {\n108              // Handle the unique constrain violation\n109              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n110              responseObj.put(\"email\", \"Email taken\");\n111              builder = Response.status(Response.Status.CONFLICT).entity(responseObj);\n112          } catch (Exception e) {\n113              // Handle generic exceptions\n114              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n115              responseObj.put(\"error\", e.getMessage());\n116              builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n117          }\n118  \n119          return builder.build();\n120      }\n121  \n122      /**\n123       * \u003cp\u003e\n124       * Validates the given Member variable and throws validation exceptions based on the type of error. If the error is standard\n125       * bean validation errors then it will throw a ConstraintValidationException with the set of the constraints violated.\n126       * \u003c/p\u003e\n127       * \u003cp\u003e\n128       * If the error is caused because an existing member with the same email is registered it throws a regular validation\n129       * exception so that it can be interpreted separately.\n130       * \u003c/p\u003e\n131       *\n132       * @param member Member to be validated\n133       * @throws ConstraintViolationException If Bean Validation errors exist\n134       * @throws ValidationException If member with the same email already exists\n135       */\n136      private void validateMember(Member member) throws ConstraintViolationException, ValidationException {\n137          // Create a bean validator and check for issues.\n138          Set\u003cConstraintViolation\u003cMember\u003e\u003e violations = validator.validate(member);\n139  \n140          if (!violations.isEmpty()) {\n141              throw new ConstraintViolationException(new HashSet\u003c\u003e(violations));\n142          }\n143  \n144          // Check the uniqueness of the email address\n145          if (emailAlreadyExists(member.getEmail())) {\n146              throw new ValidationException(\"Unique Email Violation\");\n147          }\n148      }\n149  \n150      /**\n151       * Creates a JAX-RS \"Bad Request\" response including a map of all violation fields, and their message. This can then be used\n152       * by clients to show violations.\n153       *\n154       * @param violations A set of violations that needs to be reported\n155       * @return JAX-RS response containing all violations\n156       */\n157      private Response.ResponseBuilder createViolationResponse(Set\u003cConstraintViolation\u003c?\u003e\u003e violations) {\n158          log.fine(\"Validation completed. violations found: \" + violations.size());\n159  \n160          Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n161  \n162          for (ConstraintViolation\u003c?\u003e violation : violations) {\n163              responseObj.put(violation.getPropertyPath().toString(), violation.getMessage());\n164          }\n165  \n166          return Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n167      }\n168  \n169      /**\n170       * Checks if a member with the same email address is already registered. This is the only way to easily capture the\n171       * \"@UniqueConstraint(columnNames = \"email\")\" constraint from the Member class.\n172       *\n173       * @param email The email to check\n174       * @return True if the email already exists, and false otherwise\n175       */\n176      public boolean emailAlreadyExists(String email) {\n177          Member member = null;\n178          try {\n179              member = repository.findByEmail(email);\n180          } catch (NoResultException e) {\n181              // ignore\n182          }\n183          return member != null;\n184      }\n185  }\n","lineNumber":163,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","kind":"Method","name":"createViolationResponse"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","message":"An application running inside a container could lose access to a file in local storage.. Recommendations. The following recommendations depend on the function of the file in local storage:. * Logging: Log to standard output and use a centralized log collector to analyze the logs.. * Caching: Use a cache backing service.. * Configuration: Store configuration settings in environment variables so that they can be updated without code changes.. * Data storage: Use a database backing service for relational data or use a persistent data storage system.. * Temporary data storage: Use the file system of a running container as a brief, single-transaction cache.","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.util;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.enterprise.context.RequestScoped;\n 22  import javax.enterprise.inject.Produces;\n 23  import javax.enterprise.inject.spi.InjectionPoint;\n 24  import javax.faces.context.FacesContext;\n 25  import javax.persistence.EntityManager;\n 26  import javax.persistence.PersistenceContext;\n 27  \n 28  /**\n 29   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans\n 30   *\n 31   * \u003cp\u003e\n 32   * Example injection on a managed bean field:\n 33   * \u003c/p\u003e\n 34   *\n 35   * \u003cpre\u003e\n 36   * \u0026#064;Inject\n 37   * private EntityManager em;\n 38   * \u003c/pre\u003e\n 39   */\n 40  public class Resources {\n 41      @Produces\n 42      @PersistenceContext\n 43      private EntityManager em;\n 44  \n 45      @Produces\n 46      public Logger produceLog(InjectionPoint injectionPoint) {\n 47          return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName());\n 48      }\n 49  \n 50      @Produces\n 51      @RequestScoped\n 52      public FacesContext produceFacesContext() {\n 53          return FacesContext.getCurrentInstance();\n 54      }\n 55  \n 56  }\n","lineNumber":47,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","kind":"Method","name":"produceLog"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","message":"An application running inside a container could lose access to a file in local storage.. Recommendations. The following recommendations depend on the function of the file in local storage:. * Logging: Log to standard output and use a centralized log collector to analyze the logs.. * Caching: Use a cache backing service.. * Configuration: Store configuration settings in environment variables so that they can be updated without code changes.. * Data storage: Use a database backing service for relational data or use a persistent data storage system.. * Temporary data storage: Use the file system of a running container as a brief, single-transaction cache.","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.util;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.enterprise.context.RequestScoped;\n 22  import javax.enterprise.inject.Produces;\n 23  import javax.enterprise.inject.spi.InjectionPoint;\n 24  import javax.faces.context.FacesContext;\n 25  import javax.persistence.EntityManager;\n 26  import javax.persistence.PersistenceContext;\n 27  \n 28  /**\n 29   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans\n 30   *\n 31   * \u003cp\u003e\n 32   * Example injection on a managed bean field:\n 33   * \u003c/p\u003e\n 34   *\n 35   * \u003cpre\u003e\n 36   * \u0026#064;Inject\n 37   * private EntityManager em;\n 38   * \u003c/pre\u003e\n 39   */\n 40  public class Resources {\n 41      @Produces\n 42      @PersistenceContext\n 43      private EntityManager em;\n 44  \n 45      @Produces\n 46      public Logger produceLog(InjectionPoint injectionPoint) {\n 47          return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName());\n 48      }\n 49  \n 50      @Produces\n 51      @RequestScoped\n 52      public FacesContext produceFacesContext() {\n 53          return FacesContext.getCurrentInstance();\n 54      }\n 55  \n 56  }\n","lineNumber":53,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","kind":"Method","name":"produceFacesContext"}}],"links":[{"url":"https://12factor.net/logs","title":"Twelve-Factor App: Logs"},{"url":"https://docs.openshift.com/container-platform/4.5/logging/cluster-logging.html","title":"OpenShift Container Platform: Understanding cluster logging"},{"url":"https://12factor.net/backing-services","title":"Twelve-Factor App: Backing services"},{"url":"https://12factor.net/config","title":"Twelve-Factor App: Config"},{"url":"https://docs.openshift.com/container-platform/4.5/builds/creating-build-inputs.html#builds-input-secrets-configmaps_creating-build-inputs","title":"OpenShift Container Platform: Input secrets and ConfigMaps"},{"url":"https://docs.openshift.com/container-platform/4.5/storage/understanding-persistent-storage.html","title":"OpenShift Container Platform: Understanding persistent storage"}],"Extras":null,"effort":1}},"unmatched":["embedded-cache-libraries-01000","embedded-cache-libraries-02000","embedded-cache-libraries-03000","embedded-cache-libraries-04000","embedded-cache-libraries-05000","embedded-cache-libraries-06000","embedded-cache-libraries-07000","embedded-cache-libraries-08000","embedded-cache-libraries-09000","embedded-cache-libraries-10000","embedded-cache-libraries-11000","embedded-cache-libraries-12000","embedded-cache-libraries-13000","embedded-cache-libraries-14000","embedded-cache-libraries-15000","embedded-cache-libraries-16000","java-rmi-00000","java-rmi-00001","logging-0000","logging-0001","java-rmi-00000","local-storage-00002","java-corba-00000","local-storage-00006","local-storage-00005","java-rpc-00000","jni-native-code-00001","logging-0001","mail-00000","jni-native-code-00000","session-00001","socket-communication-00000","socket-communication-00001","jca-00000","localhost-ws-00003","localhost-jdbc-00002","logging-0000","local-storage-00004","localhost-http-00001","session-00000"]},{"name":"os/windows","description":"This is a ruleset for Windows operating system specific rules while migrating to Linux operating system.","skipped":["os-specific-00001","os-specific-00002"]},{"name":"quarkus/springboot","description":"This ruleset gives hints to migrate from Spring Scheduled to Quarkus spring-scheduled extension","violations":{"cdi-to-quarkus-00030":{"description":"`beans.xml` descriptor content is ignored\n`beans.xml` descriptor content is ignored and it could be removed from the application.. Refer to the guide referenced below to check the supported CDI feature in Quarkus.","category":"potential","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///opt/input/source/src/main/webapp/WEB-INF/beans.xml","message":"`beans.xml` descriptor content is ignored and it could be removed from the application.. Refer to the guide referenced below to check the supported CDI feature in Quarkus.","variables":{"data":"beans","innerText":"\n","matchingXML":""}}],"Extras":null,"effort":3},"cdi-to-quarkus-00040":{"description":"Producer annotation no longer required\nIn Quarkus, you can skip the @Produces annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier... This field could be accessed using a `@Named` getter method instead.","category":"potential","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java","message":"In Quarkus, you can skip the @Produces annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier... This field could be accessed using a `@Named` getter method instead.","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.controller;\n 18  \n 19  import javax.annotation.PostConstruct;\n 20  import javax.enterprise.inject.Model;\n 21  import javax.enterprise.inject.Produces;\n 22  import javax.faces.application.FacesMessage;\n 23  import javax.faces.context.FacesContext;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  \n 27  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 28  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 29  \n 30  // The @Model stereotype is a convenience mechanism to make this a request-scoped bean that has an\n 31  // EL name\n 32  // Read more about the @Model stereotype in this FAQ:\n 33  // http://www.cdi-spec.org/faq/#accordion6\n 34  @Model\n 35  public class MemberController {\n 36  \n 37      @Inject\n 38      private FacesContext facesContext;\n 39  \n 40      @Inject\n 41      private MemberRegistration memberRegistration;\n 42  \n 43      @Produces\n 44      @Named\n 45      private Member newMember;\n 46  \n 47      @PostConstruct\n 48      public void initNewMember() {\n 49          newMember = new Member();\n 50      }\n 51  \n 52      public void register() throws Exception {\n 53          try {\n 54              memberRegistration.register(newMember);\n 55              FacesMessage m = new FacesMessage(FacesMessage.SEVERITY_INFO, \"Registered!\", \"Registration successful\");\n 56              facesContext.addMessage(null, m);\n 57              initNewMember();\n 58          } catch (Exception e) {\n 59              String errorMessage = getRootErrorMessage(e);\n 60              FacesMessage m = new FacesMessage(FacesMessage.SEVERITY_ERROR, errorMessage, \"Registration unsuccessful\");\n 61              facesContext.addMessage(null, m);\n 62          }\n 63      }\n 64  \n 65      private String getRootErrorMessage(Exception e) {\n 66          // Default to general error message that registration failed.\n 67          String errorMessage = \"Registration failed. See server log for more information\";\n 68          if (e == null) {\n 69              // This shouldn't happen, but return the default messages\n 70              return errorMessage;\n 71          }\n 72  \n 73          // Start with the exception and recurse to find the root cause\n 74          Throwable t = e;\n 75          while (t != null) {\n 76              // Get the message from the Throwable class instance\n 77              errorMessage = t.getLocalizedMessage();\n 78              t = t.getCause();\n 79          }\n 80          // This is the root cause message\n 81          return errorMessage;\n 82      }\n 83  \n 84  }\n","lineNumber":43,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/controller/MemberController.java","kind":"Field","name":"Produces"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberListProducer.java","message":"In Quarkus, you can skip the @Produces annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier... This field could be accessed using a `@Named` getter method instead.","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.data;\n 18  \n 19  import javax.annotation.PostConstruct;\n 20  import javax.enterprise.context.RequestScoped;\n 21  import javax.enterprise.event.Observes;\n 22  import javax.enterprise.event.Reception;\n 23  import javax.enterprise.inject.Produces;\n 24  import javax.inject.Inject;\n 25  import javax.inject.Named;\n 26  import java.util.List;\n 27  \n 28  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 29  \n 30  @RequestScoped\n 31  public class MemberListProducer {\n 32  \n 33      @Inject\n 34      private MemberRepository memberRepository;\n 35  \n 36      private List\u003cMember\u003e members;\n 37  \n 38      // @Named provides access the return value via the EL variable name \"members\" in the UI (e.g.\n 39      // Facelets or JSP view)\n 40      @Produces\n 41      @Named\n 42      public List\u003cMember\u003e getMembers() {\n 43          return members;\n 44      }\n 45  \n 46      public void onMemberListChanged(@Observes(notifyObserver = Reception.IF_EXISTS) final Member member) {\n 47          retrieveAllMembersOrderedByName();\n 48      }\n 49  \n 50      @PostConstruct\n 51      public void retrieveAllMembersOrderedByName() {\n 52          members = memberRepository.findAllOrderedByName();\n 53      }\n 54  }\n","lineNumber":40,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/data/MemberListProducer.java","kind":"Method","name":"Produces"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","message":"In Quarkus, you can skip the @Produces annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier... This field could be accessed using a `@Named` getter method instead.","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import java.util.HashMap;\n 20  import java.util.HashSet;\n 21  import java.util.List;\n 22  import java.util.Map;\n 23  import java.util.Set;\n 24  import java.util.logging.Logger;\n 25  \n 26  import javax.enterprise.context.RequestScoped;\n 27  import javax.inject.Inject;\n 28  import javax.persistence.NoResultException;\n 29  import javax.validation.ConstraintViolation;\n 30  import javax.validation.ConstraintViolationException;\n 31  import javax.validation.ValidationException;\n 32  import javax.validation.Validator;\n 33  import javax.ws.rs.Consumes;\n 34  import javax.ws.rs.GET;\n 35  import javax.ws.rs.POST;\n 36  import javax.ws.rs.Path;\n 37  import javax.ws.rs.PathParam;\n 38  import javax.ws.rs.Produces;\n 39  import javax.ws.rs.WebApplicationException;\n 40  import javax.ws.rs.core.MediaType;\n 41  import javax.ws.rs.core.Response;\n 42  \n 43  import org.jboss.as.quickstarts.kitchensink.data.MemberRepository;\n 44  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 45  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 46  \n 47  /**\n 48   * JAX-RS Example\n 49   * \u003cp/\u003e\n 50   * This class produces a RESTful service to read/write the contents of the members table.\n 51   */\n 52  @Path(\"/members\")\n 53  @RequestScoped\n 54  public class MemberResourceRESTService {\n 55  \n 56      @Inject\n 57      private Logger log;\n 58  \n 59      @Inject\n 60      private Validator validator;\n 61  \n 62      @Inject\n 63      private MemberRepository repository;\n 64  \n 65      @Inject\n 66      MemberRegistration registration;\n 67  \n 68      @GET\n 69      @Produces(MediaType.APPLICATION_JSON)\n 70      public List\u003cMember\u003e listAllMembers() {\n 71          return repository.findAllOrderedByName();\n 72      }\n 73  \n 74      @GET\n 75      @Path(\"/{id:[0-9][0-9]*}\")\n 76      @Produces(MediaType.APPLICATION_JSON)\n 77      public Member lookupMemberById(@PathParam(\"id\") long id) {\n 78          Member member = repository.findById(id);\n 79          if (member == null) {\n 80              throw new WebApplicationException(Response.Status.NOT_FOUND);\n 81          }\n 82          return member;\n 83      }\n 84  \n 85      /**\n 86       * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,\n 87       * or with a map of fields, and related errors.\n 88       */\n 89      @POST\n 90      @Consumes(MediaType.APPLICATION_JSON)\n 91      @Produces(MediaType.APPLICATION_JSON)\n 92      public Response createMember(Member member) {\n 93  \n 94          Response.ResponseBuilder builder = null;\n 95  \n 96          try {\n 97              // Validates member using bean validation\n 98              validateMember(member);\n 99  \n100              registration.register(member);\n101  \n102              // Create an \"ok\" response\n103              builder = Response.ok();\n104          } catch (ConstraintViolationException ce) {\n105              // Handle bean validation issues\n106              builder = createViolationResponse(ce.getConstraintViolations());\n107          } catch (ValidationException e) {\n108              // Handle the unique constrain violation\n109              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n110              responseObj.put(\"email\", \"Email taken\");\n111              builder = Response.status(Response.Status.CONFLICT).entity(responseObj);\n112          } catch (Exception e) {\n113              // Handle generic exceptions\n114              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n115              responseObj.put(\"error\", e.getMessage());\n116              builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n117          }\n118  \n119          return builder.build();\n120      }\n121  \n122      /**\n123       * \u003cp\u003e\n124       * Validates the given Member variable and throws validation exceptions based on the type of error. If the error is standard\n125       * bean validation errors then it will throw a ConstraintValidationException with the set of the constraints violated.\n126       * \u003c/p\u003e\n127       * \u003cp\u003e\n128       * If the error is caused because an existing member with the same email is registered it throws a regular validation\n129       * exception so that it can be interpreted separately.\n130       * \u003c/p\u003e\n131       *\n132       * @param member Member to be validated\n133       * @throws ConstraintViolationException If Bean Validation errors exist\n134       * @throws ValidationException If member with the same email already exists\n135       */\n136      private void validateMember(Member member) throws ConstraintViolationException, ValidationException {\n137          // Create a bean validator and check for issues.\n138          Set\u003cConstraintViolation\u003cMember\u003e\u003e violations = validator.validate(member);\n139  \n140          if (!violations.isEmpty()) {\n141              throw new ConstraintViolationException(new HashSet\u003c\u003e(violations));\n142          }\n143  \n144          // Check the uniqueness of the email address\n145          if (emailAlreadyExists(member.getEmail())) {\n146              throw new ValidationException(\"Unique Email Violation\");\n147          }\n148      }\n149  \n150      /**\n151       * Creates a JAX-RS \"Bad Request\" response including a map of all violation fields, and their message. This can then be used\n152       * by clients to show violations.\n153       *\n154       * @param violations A set of violations that needs to be reported\n155       * @return JAX-RS response containing all violations\n156       */\n157      private Response.ResponseBuilder createViolationResponse(Set\u003cConstraintViolation\u003c?\u003e\u003e violations) {\n158          log.fine(\"Validation completed. violations found: \" + violations.size());\n159  \n160          Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n161  \n162          for (ConstraintViolation\u003c?\u003e violation : violations) {\n163              responseObj.put(violation.getPropertyPath().toString(), violation.getMessage());\n164          }\n165  \n166          return Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n167      }\n168  \n169      /**","lineNumber":69,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","kind":"Method","name":"GET"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","message":"In Quarkus, you can skip the @Produces annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier... This field could be accessed using a `@Named` getter method instead.","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import java.util.HashMap;\n 20  import java.util.HashSet;\n 21  import java.util.List;\n 22  import java.util.Map;\n 23  import java.util.Set;\n 24  import java.util.logging.Logger;\n 25  \n 26  import javax.enterprise.context.RequestScoped;\n 27  import javax.inject.Inject;\n 28  import javax.persistence.NoResultException;\n 29  import javax.validation.ConstraintViolation;\n 30  import javax.validation.ConstraintViolationException;\n 31  import javax.validation.ValidationException;\n 32  import javax.validation.Validator;\n 33  import javax.ws.rs.Consumes;\n 34  import javax.ws.rs.GET;\n 35  import javax.ws.rs.POST;\n 36  import javax.ws.rs.Path;\n 37  import javax.ws.rs.PathParam;\n 38  import javax.ws.rs.Produces;\n 39  import javax.ws.rs.WebApplicationException;\n 40  import javax.ws.rs.core.MediaType;\n 41  import javax.ws.rs.core.Response;\n 42  \n 43  import org.jboss.as.quickstarts.kitchensink.data.MemberRepository;\n 44  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 45  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 46  \n 47  /**\n 48   * JAX-RS Example\n 49   * \u003cp/\u003e\n 50   * This class produces a RESTful service to read/write the contents of the members table.\n 51   */\n 52  @Path(\"/members\")\n 53  @RequestScoped\n 54  public class MemberResourceRESTService {\n 55  \n 56      @Inject\n 57      private Logger log;\n 58  \n 59      @Inject\n 60      private Validator validator;\n 61  \n 62      @Inject\n 63      private MemberRepository repository;\n 64  \n 65      @Inject\n 66      MemberRegistration registration;\n 67  \n 68      @GET\n 69      @Produces(MediaType.APPLICATION_JSON)\n 70      public List\u003cMember\u003e listAllMembers() {\n 71          return repository.findAllOrderedByName();\n 72      }\n 73  \n 74      @GET\n 75      @Path(\"/{id:[0-9][0-9]*}\")\n 76      @Produces(MediaType.APPLICATION_JSON)\n 77      public Member lookupMemberById(@PathParam(\"id\") long id) {\n 78          Member member = repository.findById(id);\n 79          if (member == null) {\n 80              throw new WebApplicationException(Response.Status.NOT_FOUND);\n 81          }\n 82          return member;\n 83      }\n 84  \n 85      /**\n 86       * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,\n 87       * or with a map of fields, and related errors.\n 88       */\n 89      @POST\n 90      @Consumes(MediaType.APPLICATION_JSON)\n 91      @Produces(MediaType.APPLICATION_JSON)\n 92      public Response createMember(Member member) {\n 93  \n 94          Response.ResponseBuilder builder = null;\n 95  \n 96          try {\n 97              // Validates member using bean validation\n 98              validateMember(member);\n 99  \n100              registration.register(member);\n101  \n102              // Create an \"ok\" response\n103              builder = Response.ok();\n104          } catch (ConstraintViolationException ce) {\n105              // Handle bean validation issues\n106              builder = createViolationResponse(ce.getConstraintViolations());\n107          } catch (ValidationException e) {\n108              // Handle the unique constrain violation\n109              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n110              responseObj.put(\"email\", \"Email taken\");\n111              builder = Response.status(Response.Status.CONFLICT).entity(responseObj);\n112          } catch (Exception e) {\n113              // Handle generic exceptions\n114              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n115              responseObj.put(\"error\", e.getMessage());\n116              builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n117          }\n118  \n119          return builder.build();\n120      }\n121  \n122      /**\n123       * \u003cp\u003e\n124       * Validates the given Member variable and throws validation exceptions based on the type of error. If the error is standard\n125       * bean validation errors then it will throw a ConstraintValidationException with the set of the constraints violated.\n126       * \u003c/p\u003e\n127       * \u003cp\u003e\n128       * If the error is caused because an existing member with the same email is registered it throws a regular validation\n129       * exception so that it can be interpreted separately.\n130       * \u003c/p\u003e\n131       *\n132       * @param member Member to be validated\n133       * @throws ConstraintViolationException If Bean Validation errors exist\n134       * @throws ValidationException If member with the same email already exists\n135       */\n136      private void validateMember(Member member) throws ConstraintViolationException, ValidationException {\n137          // Create a bean validator and check for issues.\n138          Set\u003cConstraintViolation\u003cMember\u003e\u003e violations = validator.validate(member);\n139  \n140          if (!violations.isEmpty()) {\n141              throw new ConstraintViolationException(new HashSet\u003c\u003e(violations));\n142          }\n143  \n144          // Check the uniqueness of the email address\n145          if (emailAlreadyExists(member.getEmail())) {\n146              throw new ValidationException(\"Unique Email Violation\");\n147          }\n148      }\n149  \n150      /**\n151       * Creates a JAX-RS \"Bad Request\" response including a map of all violation fields, and their message. This can then be used\n152       * by clients to show violations.\n153       *\n154       * @param violations A set of violations that needs to be reported\n155       * @return JAX-RS response containing all violations\n156       */\n157      private Response.ResponseBuilder createViolationResponse(Set\u003cConstraintViolation\u003c?\u003e\u003e violations) {\n158          log.fine(\"Validation completed. violations found: \" + violations.size());\n159  \n160          Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n161  \n162          for (ConstraintViolation\u003c?\u003e violation : violations) {\n163              responseObj.put(violation.getPropertyPath().toString(), violation.getMessage());\n164          }\n165  \n166          return Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n167      }\n168  \n169      /**\n170       * Checks if a member with the same email address is already registered. This is the only way to easily capture the\n171       * \"@UniqueConstraint(columnNames = \"email\")\" constraint from the Member class.\n172       *\n173       * @param email The email to check\n174       * @return True if the email already exists, and false otherwise\n175       */\n176      public boolean emailAlreadyExists(String email) {","lineNumber":76,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","kind":"Method","name":"GET"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","message":"In Quarkus, you can skip the @Produces annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier... This field could be accessed using a `@Named` getter method instead.","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import java.util.HashMap;\n 20  import java.util.HashSet;\n 21  import java.util.List;\n 22  import java.util.Map;\n 23  import java.util.Set;\n 24  import java.util.logging.Logger;\n 25  \n 26  import javax.enterprise.context.RequestScoped;\n 27  import javax.inject.Inject;\n 28  import javax.persistence.NoResultException;\n 29  import javax.validation.ConstraintViolation;\n 30  import javax.validation.ConstraintViolationException;\n 31  import javax.validation.ValidationException;\n 32  import javax.validation.Validator;\n 33  import javax.ws.rs.Consumes;\n 34  import javax.ws.rs.GET;\n 35  import javax.ws.rs.POST;\n 36  import javax.ws.rs.Path;\n 37  import javax.ws.rs.PathParam;\n 38  import javax.ws.rs.Produces;\n 39  import javax.ws.rs.WebApplicationException;\n 40  import javax.ws.rs.core.MediaType;\n 41  import javax.ws.rs.core.Response;\n 42  \n 43  import org.jboss.as.quickstarts.kitchensink.data.MemberRepository;\n 44  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 45  import org.jboss.as.quickstarts.kitchensink.service.MemberRegistration;\n 46  \n 47  /**\n 48   * JAX-RS Example\n 49   * \u003cp/\u003e\n 50   * This class produces a RESTful service to read/write the contents of the members table.\n 51   */\n 52  @Path(\"/members\")\n 53  @RequestScoped\n 54  public class MemberResourceRESTService {\n 55  \n 56      @Inject\n 57      private Logger log;\n 58  \n 59      @Inject\n 60      private Validator validator;\n 61  \n 62      @Inject\n 63      private MemberRepository repository;\n 64  \n 65      @Inject\n 66      MemberRegistration registration;\n 67  \n 68      @GET\n 69      @Produces(MediaType.APPLICATION_JSON)\n 70      public List\u003cMember\u003e listAllMembers() {\n 71          return repository.findAllOrderedByName();\n 72      }\n 73  \n 74      @GET\n 75      @Path(\"/{id:[0-9][0-9]*}\")\n 76      @Produces(MediaType.APPLICATION_JSON)\n 77      public Member lookupMemberById(@PathParam(\"id\") long id) {\n 78          Member member = repository.findById(id);\n 79          if (member == null) {\n 80              throw new WebApplicationException(Response.Status.NOT_FOUND);\n 81          }\n 82          return member;\n 83      }\n 84  \n 85      /**\n 86       * Creates a new member from the values provided. Performs validation, and will return a JAX-RS response with either 200 ok,\n 87       * or with a map of fields, and related errors.\n 88       */\n 89      @POST\n 90      @Consumes(MediaType.APPLICATION_JSON)\n 91      @Produces(MediaType.APPLICATION_JSON)\n 92      public Response createMember(Member member) {\n 93  \n 94          Response.ResponseBuilder builder = null;\n 95  \n 96          try {\n 97              // Validates member using bean validation\n 98              validateMember(member);\n 99  \n100              registration.register(member);\n101  \n102              // Create an \"ok\" response\n103              builder = Response.ok();\n104          } catch (ConstraintViolationException ce) {\n105              // Handle bean validation issues\n106              builder = createViolationResponse(ce.getConstraintViolations());\n107          } catch (ValidationException e) {\n108              // Handle the unique constrain violation\n109              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n110              responseObj.put(\"email\", \"Email taken\");\n111              builder = Response.status(Response.Status.CONFLICT).entity(responseObj);\n112          } catch (Exception e) {\n113              // Handle generic exceptions\n114              Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n115              responseObj.put(\"error\", e.getMessage());\n116              builder = Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n117          }\n118  \n119          return builder.build();\n120      }\n121  \n122      /**\n123       * \u003cp\u003e\n124       * Validates the given Member variable and throws validation exceptions based on the type of error. If the error is standard\n125       * bean validation errors then it will throw a ConstraintValidationException with the set of the constraints violated.\n126       * \u003c/p\u003e\n127       * \u003cp\u003e\n128       * If the error is caused because an existing member with the same email is registered it throws a regular validation\n129       * exception so that it can be interpreted separately.\n130       * \u003c/p\u003e\n131       *\n132       * @param member Member to be validated\n133       * @throws ConstraintViolationException If Bean Validation errors exist\n134       * @throws ValidationException If member with the same email already exists\n135       */\n136      private void validateMember(Member member) throws ConstraintViolationException, ValidationException {\n137          // Create a bean validator and check for issues.\n138          Set\u003cConstraintViolation\u003cMember\u003e\u003e violations = validator.validate(member);\n139  \n140          if (!violations.isEmpty()) {\n141              throw new ConstraintViolationException(new HashSet\u003c\u003e(violations));\n142          }\n143  \n144          // Check the uniqueness of the email address\n145          if (emailAlreadyExists(member.getEmail())) {\n146              throw new ValidationException(\"Unique Email Violation\");\n147          }\n148      }\n149  \n150      /**\n151       * Creates a JAX-RS \"Bad Request\" response including a map of all violation fields, and their message. This can then be used\n152       * by clients to show violations.\n153       *\n154       * @param violations A set of violations that needs to be reported\n155       * @return JAX-RS response containing all violations\n156       */\n157      private Response.ResponseBuilder createViolationResponse(Set\u003cConstraintViolation\u003c?\u003e\u003e violations) {\n158          log.fine(\"Validation completed. violations found: \" + violations.size());\n159  \n160          Map\u003cString, String\u003e responseObj = new HashMap\u003c\u003e();\n161  \n162          for (ConstraintViolation\u003c?\u003e violation : violations) {\n163              responseObj.put(violation.getPropertyPath().toString(), violation.getMessage());\n164          }\n165  \n166          return Response.status(Response.Status.BAD_REQUEST).entity(responseObj);\n167      }\n168  \n169      /**\n170       * Checks if a member with the same email address is already registered. This is the only way to easily capture the\n171       * \"@UniqueConstraint(columnNames = \"email\")\" constraint from the Member class.\n172       *\n173       * @param email The email to check\n174       * @return True if the email already exists, and false otherwise\n175       */\n176      public boolean emailAlreadyExists(String email) {\n177          Member member = null;\n178          try {\n179              member = repository.findByEmail(email);\n180          } catch (NoResultException e) {\n181              // ignore\n182          }\n183          return member != null;\n184      }\n185  }\n","lineNumber":91,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/MemberResourceRESTService.java","kind":"Method","name":"POST"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","message":"In Quarkus, you can skip the @Produces annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier... This field could be accessed using a `@Named` getter method instead.","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.util;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.enterprise.context.RequestScoped;\n 22  import javax.enterprise.inject.Produces;\n 23  import javax.enterprise.inject.spi.InjectionPoint;\n 24  import javax.faces.context.FacesContext;\n 25  import javax.persistence.EntityManager;\n 26  import javax.persistence.PersistenceContext;\n 27  \n 28  /**\n 29   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans\n 30   *\n 31   * \u003cp\u003e\n 32   * Example injection on a managed bean field:\n 33   * \u003c/p\u003e\n 34   *\n 35   * \u003cpre\u003e\n 36   * \u0026#064;Inject\n 37   * private EntityManager em;\n 38   * \u003c/pre\u003e\n 39   */\n 40  public class Resources {\n 41      @Produces\n 42      @PersistenceContext\n 43      private EntityManager em;\n 44  \n 45      @Produces\n 46      public Logger produceLog(InjectionPoint injectionPoint) {\n 47          return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName());\n 48      }\n 49  \n 50      @Produces\n 51      @RequestScoped\n 52      public FacesContext produceFacesContext() {\n 53          return FacesContext.getCurrentInstance();\n 54      }\n 55  \n 56  }\n","lineNumber":41,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","kind":"Field","name":"Produces"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","message":"In Quarkus, you can skip the @Produces annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier... This field could be accessed using a `@Named` getter method instead.","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.util;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.enterprise.context.RequestScoped;\n 22  import javax.enterprise.inject.Produces;\n 23  import javax.enterprise.inject.spi.InjectionPoint;\n 24  import javax.faces.context.FacesContext;\n 25  import javax.persistence.EntityManager;\n 26  import javax.persistence.PersistenceContext;\n 27  \n 28  /**\n 29   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans\n 30   *\n 31   * \u003cp\u003e\n 32   * Example injection on a managed bean field:\n 33   * \u003c/p\u003e\n 34   *\n 35   * \u003cpre\u003e\n 36   * \u0026#064;Inject\n 37   * private EntityManager em;\n 38   * \u003c/pre\u003e\n 39   */\n 40  public class Resources {\n 41      @Produces\n 42      @PersistenceContext\n 43      private EntityManager em;\n 44  \n 45      @Produces\n 46      public Logger produceLog(InjectionPoint injectionPoint) {\n 47          return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName());\n 48      }\n 49  \n 50      @Produces\n 51      @RequestScoped\n 52      public FacesContext produceFacesContext() {\n 53          return FacesContext.getCurrentInstance();\n 54      }\n 55  \n 56  }\n","lineNumber":45,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","kind":"Method","name":"Produces"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","message":"In Quarkus, you can skip the @Produces annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier... This field could be accessed using a `@Named` getter method instead.","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.util;\n 18  \n 19  import java.util.logging.Logger;\n 20  \n 21  import javax.enterprise.context.RequestScoped;\n 22  import javax.enterprise.inject.Produces;\n 23  import javax.enterprise.inject.spi.InjectionPoint;\n 24  import javax.faces.context.FacesContext;\n 25  import javax.persistence.EntityManager;\n 26  import javax.persistence.PersistenceContext;\n 27  \n 28  /**\n 29   * This class uses CDI to alias Jakarta EE resources, such as the persistence context, to CDI beans\n 30   *\n 31   * \u003cp\u003e\n 32   * Example injection on a managed bean field:\n 33   * \u003c/p\u003e\n 34   *\n 35   * \u003cpre\u003e\n 36   * \u0026#064;Inject\n 37   * private EntityManager em;\n 38   * \u003c/pre\u003e\n 39   */\n 40  public class Resources {\n 41      @Produces\n 42      @PersistenceContext\n 43      private EntityManager em;\n 44  \n 45      @Produces\n 46      public Logger produceLog(InjectionPoint injectionPoint) {\n 47          return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName());\n 48      }\n 49  \n 50      @Produces\n 51      @RequestScoped\n 52      public FacesContext produceFacesContext() {\n 53          return FacesContext.getCurrentInstance();\n 54      }\n 55  \n 56  }\n","lineNumber":50,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/util/Resources.java","kind":"Method","name":"Produces"}}],"links":[{"url":"https://quarkus.io/guides/cdi-reference#simplified-producer-method-declaration","title":"Quarkus Simplified Producer Method Declaration"}],"Extras":null,"effort":1},"cdi-to-quarkus-00050":{"description":"Stateless annotation can be replaced with scope\nStateless EJBs can be converted to a cdi bean by replacing the `@Stateless` annotation with a scope eg `@ApplicationScoped`","category":"potential","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/service/MemberRegistration.java","message":"Stateless EJBs can be converted to a cdi bean by replacing the `@Stateless` annotation with a scope eg `@ApplicationScoped`","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.service;\n 18  \n 19  import org.jboss.as.quickstarts.kitchensink.model.Member;\n 20  \n 21  import javax.ejb.Stateless;\n 22  import javax.enterprise.event.Event;\n 23  import javax.inject.Inject;\n 24  import javax.persistence.EntityManager;\n 25  import java.util.logging.Logger;\n 26  \n 27  // The @Stateless annotation eliminates the need for manual transaction demarcation\n 28  @Stateless\n 29  public class MemberRegistration {\n 30  \n 31      @Inject\n 32      private Logger log;\n 33  \n 34      @Inject\n 35      private EntityManager em;\n 36  \n 37      @Inject\n 38      private Event\u003cMember\u003e memberEventSrc;\n 39  \n 40      public void register(Member member) throws Exception {\n 41          log.info(\"Registering \" + member.getName());\n 42          em.persist(member);\n 43          memberEventSrc.fire(member);\n 44      }\n 45  }\n","lineNumber":28,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/service/MemberRegistration.java","kind":"Class","name":"Stateless"}}],"links":[{"url":"https://quarkus.io/guides/cdi-reference","title":"Quarkus CDI reference"}],"Extras":null,"effort":1},"javaee-faces-to-quarkus-00000":{"description":"Replace JSF Dependency with MyFaces\nJSF Dependencies with groupId `org.jboss.spec.javax.faces` should be replaced with. ```. \u003c!-- Quarkus MyFaces dependencies --\u003e. \u003cdependency\u003e. \u003cgroupId\u003eorg.apache.myfaces.core.extensions.quarkus\u003c/groupId\u003e. \u003cartifactId\u003emyfaces-quarkus\u003c/artifactId\u003e. \u003cversion\u003e4.0.1\u003c/version\u003e. \u003c/dependency\u003e. \u003c!-- Quarkus Faces utilities and components extensions --\u003e. \u003cdependency\u003e. \u003cgroupId\u003eio.quarkiverse.primefaces\u003c/groupId\u003e. \u003cartifactId\u003equarkus-primefaces\u003c/artifactId\u003e. \u003cversion\u003e3.13.1\u003c/version\u003e. \u003c/dependency\u003e. \u003cdependency\u003e. \u003cgroupId\u003eio.quarkiverse.omnifaces\u003c/groupId\u003e. \u003cartifactId\u003equarkus-omnifaces\u003c/artifactId\u003e. \u003cversion\u003e4.2.0\u003c/version\u003e. \u003c/dependency\u003e. ```","category":"mandatory","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///opt/input/source/pom.xml","message":"JSF Dependencies with groupId `org.jboss.spec.javax.faces` should be replaced with. ```. \u003c!-- Quarkus MyFaces dependencies --\u003e. \u003cdependency\u003e. \u003cgroupId\u003eorg.apache.myfaces.core.extensions.quarkus\u003c/groupId\u003e. \u003cartifactId\u003emyfaces-quarkus\u003c/artifactId\u003e. \u003cversion\u003e4.0.1\u003c/version\u003e. \u003c/dependency\u003e. \u003c!-- Quarkus Faces utilities and components extensions --\u003e. \u003cdependency\u003e. \u003cgroupId\u003eio.quarkiverse.primefaces\u003c/groupId\u003e. \u003cartifactId\u003equarkus-primefaces\u003c/artifactId\u003e. \u003cversion\u003e3.13.1\u003c/version\u003e. \u003c/dependency\u003e. \u003cdependency\u003e. \u003cgroupId\u003eio.quarkiverse.omnifaces\u003c/groupId\u003e. \u003cartifactId\u003equarkus-omnifaces\u003c/artifactId\u003e. \u003cversion\u003e4.2.0\u003c/version\u003e. \u003c/dependency\u003e. ```","codeSnip":" 45          \u003c!-- First declare the APIs we depend on and need for compilation. All\n 46              of them are provided by JBoss EAP --\u003e\n 47  \n 48          \u003c!-- Import the CDI API, we use provided scope as the API is included in\n 49              JBoss EAP --\u003e\n 50          \u003cdependency\u003e\n 51              \u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\n 52              \u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\n 53              \u003cscope\u003eprovided\u003c/scope\u003e\n 54          \u003c/dependency\u003e\n 55  \n 56          \u003c!-- Needed for running tests (you may also use TestNG) --\u003e\n 57          \u003cdependency\u003e\n 58              \u003cgroupId\u003ejunit\u003c/groupId\u003e\n 59              \u003cartifactId\u003ejunit\u003c/artifactId\u003e\n 60              \u003cscope\u003etest\u003c/scope\u003e\n 61          \u003c/dependency\u003e\n 62  \n 63          \u003c!-- Now we declare any tools needed --\u003e\n 64  \n 65          \u003c!-- Annotation processor to generate the JPA metamodel classes for\n 66              typesafe criteria queries --\u003e\n 67          \u003cdependency\u003e\n 68              \u003cgroupId\u003eorg.hibernate\u003c/groupId\u003e\n 69              \u003cartifactId\u003ehibernate-jpamodelgen\u003c/artifactId\u003e\n 70              \u003cscope\u003eprovided\u003c/scope\u003e\n 71          \u003c/dependency\u003e\n 72          \u003c!-- Jakarta Activation needed for JPA model generation --\u003e\n 73          \u003cdependency\u003e\n 74              \u003cgroupId\u003ecom.sun.activation\u003c/groupId\u003e\n 75              \u003cartifactId\u003ejakarta.activation\u003c/artifactId\u003e\n 76              \u003cscope\u003eprovided\u003c/scope\u003e\n 77          \u003c/dependency\u003e\n 78  \n 79          \u003c!-- Bean Validation Implementation \n 80               Provides portable constraints such as @Email \n 81               Hibernate Validator is shipped in JBoss EAP --\u003e\n 82          \u003cdependency\u003e\n 83              \u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\n 84              \u003cartifactId\u003ehibernate-validator\u003c/artifactId\u003e\n 85              \u003cscope\u003eprovided\u003c/scope\u003e\n 86          \u003c/dependency\u003e\n 87          \u003c!-- hibernate-validator dependencies excluded on server dependency management yet required --\u003e\n 88          \u003cdependency\u003e\n 89              \u003cgroupId\u003ejakarta.validation\u003c/groupId\u003e\n 90              \u003cartifactId\u003ejakarta.validation-api\u003c/artifactId\u003e\n 91              \u003cscope\u003eprovided\u003c/scope\u003e\n 92          \u003c/dependency\u003e\n 93  \n 94          \u003c!-- Annotation processor that raising compilation errors whenever constraint\n 95              annotations are incorrectly used. --\u003e\n 96          \u003cdependency\u003e\n 97              \u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\n 98              \u003cartifactId\u003ehibernate-validator-annotation-processor\u003c/artifactId\u003e\n 99              \u003cscope\u003eprovided\u003c/scope\u003e\n100          \u003c/dependency\u003e\n101  \n102          \u003c!-- Import the JPA API, we use provided scope as the API is included in\n103              JBoss EAP --\u003e\n104          \u003cdependency\u003e\n105              \u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\n106              \u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\n107              \u003cscope\u003eprovided\u003c/scope\u003e\n108          \u003c/dependency\u003e\n109  \n110          \u003c!-- Optional, but highly recommended --\u003e\n111          \u003c!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA)\n112              JPA from JUnit/TestNG --\u003e\n113          \u003cdependency\u003e\n114              \u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\n115              \u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\n116              \u003cscope\u003etest\u003c/scope\u003e\n117          \u003c/dependency\u003e\n118  \n119          \u003cdependency\u003e\n120              \u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\n121              \u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\n122              \u003cscope\u003etest\u003c/scope\u003e\n123          \u003c/dependency\u003e\n124  \n125          \u003c!-- Import the Common Annotations API (JSR-250), we use provided scope\n126              as the API is included in JBoss EAP --\u003e\n127          \u003cdependency\u003e\n128              \u003cgroupId\u003eorg.jboss.spec.javax.annotation\u003c/groupId\u003e\n129              \u003cartifactId\u003ejboss-annotations-api_1.3_spec\u003c/artifactId\u003e\n130              \u003cscope\u003eprovided\u003c/scope\u003e\n131          \u003c/dependency\u003e\n132  \n133          \u003c!-- Import the EJB API, we use provided scope as the API is included in\n134              JBoss EAP --\u003e\n135          \u003cdependency\u003e\n136              \u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\n137              \u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\n138              \u003cscope\u003eprovided\u003c/scope\u003e\n139          \u003c/dependency\u003e\n140  \n141          \u003c!-- Import the JSF API, we use provided scope as the API is included in\n142              JBoss EAP --\u003e\n143          \u003cdependency\u003e\n144              \u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\n145              \u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\n146              \u003cscope\u003eprovided\u003c/scope\u003e\n147          \u003c/dependency\u003e\n148  \n149          \u003c!-- Import the JAX-RS API, we use provided scope as the API is included\n150              in JBoss EAP --\u003e\n151          \u003cdependency\u003e\n152              \u003cgroupId\u003eorg.jboss.spec.javax.ws.rs\u003c/groupId\u003e\n153              \u003cartifactId\u003ejboss-jaxrs-api_2.1_spec\u003c/artifactId\u003e\n154              \u003cscope\u003eprovided\u003c/scope\u003e\n155          \u003c/dependency\u003e\n156  \n157          \u003cdependency\u003e\n158              \u003cgroupId\u003eorg.jboss.spec.javax.xml.bind\u003c/groupId\u003e\n159              \u003cartifactId\u003ejboss-jaxb-api_2.3_spec\u003c/artifactId\u003e\n160              \u003cscope\u003eprovided\u003c/scope\u003e\n161          \u003c/dependency\u003e\n162  \n163      \u003c/dependencies\u003e\n164  \n165      \u003cbuild\u003e\n166          \u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\n167          \u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\n168      \u003c/build\u003e\n169  \u003c/project\u003e\n","lineNumber":144,"variables":{"data":"dependency","innerText":"\n            org.jboss.spec.javax.faces\n            jboss-jsf-api_2.3_spec\n            provided\n        ","matchingXML":"\u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e"}}],"links":[{"url":"https://myfaces.apache.org/#/coregettingstarted?id=quarkus","title":"Apache MyFaces: Getting Started on Quarkus"}],"Extras":null,"effort":1},"javaee-pom-to-quarkus-00000":{"description":"The expected project artifact's extension is `jar`\n","category":"mandatory","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///opt/input/source/pom.xml","message":"The project artifact's current extension (i.e. `\u003cpackaging\u003e` tag value) is `` but the expected value should be `jar`","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"\u003e\n 19      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n 20      \u003cparent\u003e\n 21          \u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\n 22          \u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\n 23          \u003c!--\n 24          Maintain separation between the artifact id and the version to help prevent\n 25          merge conflicts between commits changing the GA and those changing the V.\n 26          --\u003e\n 27          \u003cversion\u003e7.4.0.GA\u003c/version\u003e\n 28          \u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\n 29      \u003c/parent\u003e\n 30      \u003cartifactId\u003ekitchensink\u003c/artifactId\u003e\n 31      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 32      \u003cname\u003eQuickstart: kitchensink\u003c/name\u003e\n 33      \u003cdescription\u003eA starter Jakarta EE web application project for use in JBoss EAP\u003c/description\u003e\n 34  \n 35      \u003clicenses\u003e\n 36          \u003clicense\u003e\n 37              \u003cname\u003eApache License, Version 2.0\u003c/name\u003e\n 38              \u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\n 39              \u003cdistribution\u003erepo\u003c/distribution\u003e\n 40          \u003c/license\u003e\n 41      \u003c/licenses\u003e\n 42  \n 43      \u003cdependencies\u003e\n 44  \n 45          \u003c!-- First declare the APIs we depend on and need for compilation. All\n 46              of them are provided by JBoss EAP --\u003e\n 47  \n 48          \u003c!-- Import the CDI API, we use provided scope as the API is included in\n 49              JBoss EAP --\u003e\n 50          \u003cdependency\u003e\n 51              \u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\n 52              \u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\n 53              \u003cscope\u003eprovided\u003c/scope\u003e\n 54          \u003c/dependency\u003e\n 55  \n 56          \u003c!-- Needed for running tests (you may also use TestNG) --\u003e\n 57          \u003cdependency\u003e\n 58              \u003cgroupId\u003ejunit\u003c/groupId\u003e\n 59              \u003cartifactId\u003ejunit\u003c/artifactId\u003e\n 60              \u003cscope\u003etest\u003c/scope\u003e\n 61          \u003c/dependency\u003e\n 62  \n 63          \u003c!-- Now we declare any tools needed --\u003e\n 64  \n 65          \u003c!-- Annotation processor to generate the JPA metamodel classes for\n 66              typesafe criteria queries --\u003e\n 67          \u003cdependency\u003e\n 68              \u003cgroupId\u003eorg.hibernate\u003c/groupId\u003e\n 69              \u003cartifactId\u003ehibernate-jpamodelgen\u003c/artifactId\u003e\n 70              \u003cscope\u003eprovided\u003c/scope\u003e\n 71          \u003c/dependency\u003e\n 72          \u003c!-- Jakarta Activation needed for JPA model generation --\u003e\n 73          \u003cdependency\u003e\n 74              \u003cgroupId\u003ecom.sun.activation\u003c/groupId\u003e\n 75              \u003cartifactId\u003ejakarta.activation\u003c/artifactId\u003e\n 76              \u003cscope\u003eprovided\u003c/scope\u003e\n 77          \u003c/dependency\u003e\n 78  \n 79          \u003c!-- Bean Validation Implementation \n 80               Provides portable constraints such as @Email \n 81               Hibernate Validator is shipped in JBoss EAP --\u003e\n 82          \u003cdependency\u003e\n 83              \u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\n 84              \u003cartifactId\u003ehibernate-validator\u003c/artifactId\u003e\n 85              \u003cscope\u003eprovided\u003c/scope\u003e\n 86          \u003c/dependency\u003e\n 87          \u003c!-- hibernate-validator dependencies excluded on server dependency management yet required --\u003e\n 88          \u003cdependency\u003e\n 89              \u003cgroupId\u003ejakarta.validation\u003c/groupId\u003e\n 90              \u003cartifactId\u003ejakarta.validation-api\u003c/artifactId\u003e\n 91              \u003cscope\u003eprovided\u003c/scope\u003e\n 92          \u003c/dependency\u003e\n 93  \n 94          \u003c!-- Annotation processor that raising compilation errors whenever constraint\n 95              annotations are incorrectly used. --\u003e\n 96          \u003cdependency\u003e\n 97              \u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\n 98              \u003cartifactId\u003ehibernate-validator-annotation-processor\u003c/artifactId\u003e\n 99              \u003cscope\u003eprovided\u003c/scope\u003e\n100          \u003c/dependency\u003e\n101  \n102          \u003c!-- Import the JPA API, we use provided scope as the API is included in\n103              JBoss EAP --\u003e\n104          \u003cdependency\u003e\n105              \u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\n106              \u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\n107              \u003cscope\u003eprovided\u003c/scope\u003e\n108          \u003c/dependency\u003e\n109  \n110          \u003c!-- Optional, but highly recommended --\u003e\n111          \u003c!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA)\n112              JPA from JUnit/TestNG --\u003e\n113          \u003cdependency\u003e","lineNumber":12,"variables":{"data":"war","innerText":"war","matchingXML":""}}],"links":[{"url":"https://quarkus.io/guides/maven-tooling#build-tool-maven","title":"Quarkus - Guide"}],"Extras":null,"effort":1},"javaee-pom-to-quarkus-00010":{"description":"Adopt Quarkus BOM\n","category":"mandatory","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///opt/input/source/pom.xml","message":"Use the Quarkus BOM to omit the version of the different Quarkus dependencies.. Add the following sections to the `pom.xml` file:. ```xml. \u003cproperties\u003e. \u003cquarkus.platform.artifact-id\u003equarkus-bom\u003c/quarkus.platform.artifact-id\u003e. \u003cquarkus.platform.group-id\u003eio.quarkus.platform\u003c/quarkus.platform.group-id\u003e. \u003cquarkus.platform.version\u003e3.1.0.Final\u003c/quarkus.platform.version\u003e. \u003c/properties\u003e. \u003cdependencyManagement\u003e. \u003cdependencies\u003e. \u003cdependency\u003e. \u003cgroupId\u003e$\u003c/groupId\u003e. \u003cartifactId\u003e$\u003c/artifactId\u003e. \u003cversion\u003e$\u003c/version\u003e. \u003ctype\u003epom\u003c/type\u003e. \u003cscope\u003eimport\u003c/scope\u003e. \u003c/dependency\u003e. \u003c/dependencies\u003e. \u003c/dependencyManagement\u003e. ```. Check the latest Quarkus version available from the `Quarkus - Releases` link below.","variables":{"data":"project","innerText":"\n    4.0.0\n    \n        org.jboss.eap.quickstarts\n        quickstart-parent\n        \n        7.4.0.GA\n        ../pom.xml\n    \n    kitchensink\n    war\n    Quickstart: kitchensink\n    A starter Jakarta EE web application project for use in JBoss EAP\n\n    \n        \n            Apache License, Version 2.0\n            http://www.apache.org/licenses/LICENSE-2.0.html\n            repo\n        \n    \n\n    \n\n        \n\n        \n        \n            jakarta.enterprise\n            jakarta.enterprise.cdi-api\n            provided\n        \n\n        \n        \n            junit\n            junit\n            test\n        \n\n        \n\n        \n        \n            org.hibernate\n            hibernate-jpamodelgen\n            provided\n        \n        \n        \n            com.sun.activation\n            jakarta.activation\n            provided\n        \n\n        \n        \n            org.hibernate.validator\n            hibernate-validator\n            provided\n        \n        \n        \n            jakarta.validation\n            jakarta.validation-api\n            provided\n        \n\n        \n        \n            org.hibernate.validator\n            hibernate-validator-annotation-processor\n            provided\n        \n\n        \n        \n            jakarta.persistence\n            jakarta.persistence-api\n            provided\n        \n\n        \n        \n        \n            org.jboss.arquillian.junit\n            arquillian-junit-container\n            test\n        \n\n        \n            org.jboss.arquillian.protocol\n            arquillian-protocol-servlet\n            test\n        \n\n        \n        \n            org.jboss.spec.javax.annotation\n            jboss-annotations-api_1.3_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.ejb\n            jboss-ejb-api_3.2_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.faces\n            jboss-jsf-api_2.3_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.ws.rs\n            jboss-jaxrs-api_2.1_spec\n            provided\n        \n\n        \n            org.jboss.spec.javax.xml.bind\n            jboss-jaxb-api_2.3_spec\n            provided\n        \n\n    \n\n    \n        \n        ${project.artifactId}\n    \n","matchingXML":"\u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\u003cparent\u003e\u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\u003c!--\n        Maintain separation between the artifact id and the version to help prevent\n        merge conflicts between commits changing the GA and those changing the V.\n        --\u003e\u003cversion\u003e7.4.0.GA\u003c/version\u003e\u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\u003c/parent\u003e\u003cartifactId\u003ekitchensink\u003c/artifactId\u003e\u003cpackaging\u003ewar\u003c/packaging\u003e\u003cname\u003eQuickstart: kitchensink\u003c/name\u003e\u003cdescription\u003eA starter Jakarta EE web application project for use in JBoss EAP\u003c/description\u003e\u003clicenses\u003e\u003clicense\u003e\u003cname\u003eApache License, Version 2.0\u003c/name\u003e\u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\u003cdistribution\u003erepo\u003c/distribution\u003e\u003c/license\u003e\u003c/licenses\u003e\u003cdependencies\u003e\u003c!-- First declare the APIs we depend on and need for compilation. All\n            of them are provided by JBoss EAP --\u003e\u003c!-- Import the CDI API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Needed for running tests (you may also use TestNG) --\u003e\u003cdependency\u003e\u003cgroupId\u003ejunit\u003c/groupId\u003e\u003cartifactId\u003ejunit\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Now we declare any tools needed --\u003e\u003c!-- Annotation processor to generate the JPA metamodel classes for\n            typesafe criteria queries --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.hibernate\u003c/groupId\u003e\u003cartifactId\u003ehibernate-jpamodelgen\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Jakarta Activation needed for JPA model generation --\u003e\u003cdependency\u003e\u003cgroupId\u003ecom.sun.activation\u003c/groupId\u003e\u003cartifactId\u003ejakarta.activation\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Bean Validation Implementation \n             Provides portable constraints such as @Email \n             Hibernate Validator is shipped in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\u003cartifactId\u003ehibernate-validator\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- hibernate-validator dependencies excluded on server dependency management yet required --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.validation\u003c/groupId\u003e\u003cartifactId\u003ejakarta.validation-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Annotation processor that raising compilation errors whenever constraint\n            annotations are incorrectly used. --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\u003cartifactId\u003ehibernate-validator-annotation-processor\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JPA API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Optional, but highly recommended --\u003e\u003c!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA)\n            JPA from JUnit/TestNG --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the Common Annotations API (JSR-250), we use provided scope\n            as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.annotation\u003c/groupId\u003e\u003cartifactId\u003ejboss-annotations-api_1.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the EJB API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JSF API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JAX-RS API, we use provided scope as the API is included\n            in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.ws.rs\u003c/groupId\u003e\u003cartifactId\u003ejboss-jaxrs-api_2.1_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.xml.bind\u003c/groupId\u003e\u003cartifactId\u003ejboss-jaxb-api_2.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c/dependencies\u003e\u003cbuild\u003e\u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\u003c/build\u003e"}}],"links":[{"url":"https://quarkus.io/guides/maven-tooling#build-tool-maven","title":"Quarkus - Guide"},{"url":"https://quarkus.io/blog/tag/release/","title":"Quarkus - Releases"}],"Extras":null,"effort":1},"javaee-pom-to-quarkus-00020":{"description":"Adopt Quarkus Maven plugin\n","category":"mandatory","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///opt/input/source/pom.xml","message":"Use the Quarkus Maven plugin adding the following sections to the `pom.xml` file:. ```xml. \u003cproperties\u003e. \u003cquarkus.platform.group-id\u003eio.quarkus.platform\u003c/quarkus.platform.group-id\u003e. \u003cquarkus.platform.version\u003e3.1.0.Final\u003c/quarkus.platform.version\u003e. \u003c/properties\u003e. \u003cbuild\u003e. \u003cplugins\u003e. \u003cplugin\u003e. \u003cgroupId\u003e$\u003c/groupId\u003e. \u003cartifactId\u003equarkus-maven-plugin\u003c/artifactId\u003e. \u003cversion\u003e$\u003c/version\u003e. \u003cextensions\u003etrue\u003c/extensions\u003e. \u003cexecutions\u003e. \u003cexecution\u003e. \u003cgoals\u003e. \u003cgoal\u003ebuild\u003c/goal\u003e. \u003cgoal\u003egenerate-code\u003c/goal\u003e. \u003cgoal\u003egenerate-code-tests\u003c/goal\u003e. \u003c/goals\u003e. \u003c/execution\u003e. \u003c/executions\u003e. \u003c/plugin\u003e. \u003c/plugins\u003e. \u003c/build\u003e. ```","variables":{"data":"project","innerText":"\n    4.0.0\n    \n        org.jboss.eap.quickstarts\n        quickstart-parent\n        \n        7.4.0.GA\n        ../pom.xml\n    \n    kitchensink\n    war\n    Quickstart: kitchensink\n    A starter Jakarta EE web application project for use in JBoss EAP\n\n    \n        \n            Apache License, Version 2.0\n            http://www.apache.org/licenses/LICENSE-2.0.html\n            repo\n        \n    \n\n    \n\n        \n\n        \n        \n            jakarta.enterprise\n            jakarta.enterprise.cdi-api\n            provided\n        \n\n        \n        \n            junit\n            junit\n            test\n        \n\n        \n\n        \n        \n            org.hibernate\n            hibernate-jpamodelgen\n            provided\n        \n        \n        \n            com.sun.activation\n            jakarta.activation\n            provided\n        \n\n        \n        \n            org.hibernate.validator\n            hibernate-validator\n            provided\n        \n        \n        \n            jakarta.validation\n            jakarta.validation-api\n            provided\n        \n\n        \n        \n            org.hibernate.validator\n            hibernate-validator-annotation-processor\n            provided\n        \n\n        \n        \n            jakarta.persistence\n            jakarta.persistence-api\n            provided\n        \n\n        \n        \n        \n            org.jboss.arquillian.junit\n            arquillian-junit-container\n            test\n        \n\n        \n            org.jboss.arquillian.protocol\n            arquillian-protocol-servlet\n            test\n        \n\n        \n        \n            org.jboss.spec.javax.annotation\n            jboss-annotations-api_1.3_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.ejb\n            jboss-ejb-api_3.2_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.faces\n            jboss-jsf-api_2.3_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.ws.rs\n            jboss-jaxrs-api_2.1_spec\n            provided\n        \n\n        \n            org.jboss.spec.javax.xml.bind\n            jboss-jaxb-api_2.3_spec\n            provided\n        \n\n    \n\n    \n        \n        ${project.artifactId}\n    \n","matchingXML":"\u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\u003cparent\u003e\u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\u003c!--\n        Maintain separation between the artifact id and the version to help prevent\n        merge conflicts between commits changing the GA and those changing the V.\n        --\u003e\u003cversion\u003e7.4.0.GA\u003c/version\u003e\u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\u003c/parent\u003e\u003cartifactId\u003ekitchensink\u003c/artifactId\u003e\u003cpackaging\u003ewar\u003c/packaging\u003e\u003cname\u003eQuickstart: kitchensink\u003c/name\u003e\u003cdescription\u003eA starter Jakarta EE web application project for use in JBoss EAP\u003c/description\u003e\u003clicenses\u003e\u003clicense\u003e\u003cname\u003eApache License, Version 2.0\u003c/name\u003e\u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\u003cdistribution\u003erepo\u003c/distribution\u003e\u003c/license\u003e\u003c/licenses\u003e\u003cdependencies\u003e\u003c!-- First declare the APIs we depend on and need for compilation. All\n            of them are provided by JBoss EAP --\u003e\u003c!-- Import the CDI API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Needed for running tests (you may also use TestNG) --\u003e\u003cdependency\u003e\u003cgroupId\u003ejunit\u003c/groupId\u003e\u003cartifactId\u003ejunit\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Now we declare any tools needed --\u003e\u003c!-- Annotation processor to generate the JPA metamodel classes for\n            typesafe criteria queries --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.hibernate\u003c/groupId\u003e\u003cartifactId\u003ehibernate-jpamodelgen\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Jakarta Activation needed for JPA model generation --\u003e\u003cdependency\u003e\u003cgroupId\u003ecom.sun.activation\u003c/groupId\u003e\u003cartifactId\u003ejakarta.activation\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Bean Validation Implementation \n             Provides portable constraints such as @Email \n             Hibernate Validator is shipped in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\u003cartifactId\u003ehibernate-validator\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- hibernate-validator dependencies excluded on server dependency management yet required --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.validation\u003c/groupId\u003e\u003cartifactId\u003ejakarta.validation-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Annotation processor that raising compilation errors whenever constraint\n            annotations are incorrectly used. --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\u003cartifactId\u003ehibernate-validator-annotation-processor\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JPA API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Optional, but highly recommended --\u003e\u003c!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA)\n            JPA from JUnit/TestNG --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the Common Annotations API (JSR-250), we use provided scope\n            as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.annotation\u003c/groupId\u003e\u003cartifactId\u003ejboss-annotations-api_1.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the EJB API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JSF API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JAX-RS API, we use provided scope as the API is included\n            in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.ws.rs\u003c/groupId\u003e\u003cartifactId\u003ejboss-jaxrs-api_2.1_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.xml.bind\u003c/groupId\u003e\u003cartifactId\u003ejboss-jaxb-api_2.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c/dependencies\u003e\u003cbuild\u003e\u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\u003c/build\u003e"}}],"links":[{"url":"https://quarkus.io/guides/maven-tooling#build-tool-maven","title":"Quarkus - Guide"}],"Extras":null,"effort":1},"javaee-pom-to-quarkus-00030":{"description":"Adopt Maven Compiler plugin\n","category":"mandatory","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///opt/input/source/pom.xml","message":"Use the Maven Compiler plugin adding the following sections to the `pom.xml` file:. ```xml. \u003cproperties\u003e. \u003ccompiler-plugin.version\u003e3.10.1\u003c/compiler-plugin.version\u003e. \u003cmaven.compiler.release\u003e11\u003c/maven.compiler.release\u003e. \u003c/properties\u003e. \u003cbuild\u003e. \u003cplugins\u003e. \u003cplugin\u003e. \u003cartifactId\u003emaven-compiler-plugin\u003c/artifactId\u003e. \u003cversion\u003e$\u003c/version\u003e. \u003cconfiguration\u003e. \u003ccompilerArgs\u003e. \u003carg\u003e-parameters\u003c/arg\u003e. \u003c/compilerArgs\u003e. \u003c/configuration\u003e. \u003c/plugin\u003e. \u003c/plugins\u003e. \u003c/build\u003e. ```","variables":{"data":"project","innerText":"\n    4.0.0\n    \n        org.jboss.eap.quickstarts\n        quickstart-parent\n        \n        7.4.0.GA\n        ../pom.xml\n    \n    kitchensink\n    war\n    Quickstart: kitchensink\n    A starter Jakarta EE web application project for use in JBoss EAP\n\n    \n        \n            Apache License, Version 2.0\n            http://www.apache.org/licenses/LICENSE-2.0.html\n            repo\n        \n    \n\n    \n\n        \n\n        \n        \n            jakarta.enterprise\n            jakarta.enterprise.cdi-api\n            provided\n        \n\n        \n        \n            junit\n            junit\n            test\n        \n\n        \n\n        \n        \n            org.hibernate\n            hibernate-jpamodelgen\n            provided\n        \n        \n        \n            com.sun.activation\n            jakarta.activation\n            provided\n        \n\n        \n        \n            org.hibernate.validator\n            hibernate-validator\n            provided\n        \n        \n        \n            jakarta.validation\n            jakarta.validation-api\n            provided\n        \n\n        \n        \n            org.hibernate.validator\n            hibernate-validator-annotation-processor\n            provided\n        \n\n        \n        \n            jakarta.persistence\n            jakarta.persistence-api\n            provided\n        \n\n        \n        \n        \n            org.jboss.arquillian.junit\n            arquillian-junit-container\n            test\n        \n\n        \n            org.jboss.arquillian.protocol\n            arquillian-protocol-servlet\n            test\n        \n\n        \n        \n            org.jboss.spec.javax.annotation\n            jboss-annotations-api_1.3_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.ejb\n            jboss-ejb-api_3.2_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.faces\n            jboss-jsf-api_2.3_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.ws.rs\n            jboss-jaxrs-api_2.1_spec\n            provided\n        \n\n        \n            org.jboss.spec.javax.xml.bind\n            jboss-jaxb-api_2.3_spec\n            provided\n        \n\n    \n\n    \n        \n        ${project.artifactId}\n    \n","matchingXML":"\u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\u003cparent\u003e\u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\u003c!--\n        Maintain separation between the artifact id and the version to help prevent\n        merge conflicts between commits changing the GA and those changing the V.\n        --\u003e\u003cversion\u003e7.4.0.GA\u003c/version\u003e\u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\u003c/parent\u003e\u003cartifactId\u003ekitchensink\u003c/artifactId\u003e\u003cpackaging\u003ewar\u003c/packaging\u003e\u003cname\u003eQuickstart: kitchensink\u003c/name\u003e\u003cdescription\u003eA starter Jakarta EE web application project for use in JBoss EAP\u003c/description\u003e\u003clicenses\u003e\u003clicense\u003e\u003cname\u003eApache License, Version 2.0\u003c/name\u003e\u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\u003cdistribution\u003erepo\u003c/distribution\u003e\u003c/license\u003e\u003c/licenses\u003e\u003cdependencies\u003e\u003c!-- First declare the APIs we depend on and need for compilation. All\n            of them are provided by JBoss EAP --\u003e\u003c!-- Import the CDI API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Needed for running tests (you may also use TestNG) --\u003e\u003cdependency\u003e\u003cgroupId\u003ejunit\u003c/groupId\u003e\u003cartifactId\u003ejunit\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Now we declare any tools needed --\u003e\u003c!-- Annotation processor to generate the JPA metamodel classes for\n            typesafe criteria queries --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.hibernate\u003c/groupId\u003e\u003cartifactId\u003ehibernate-jpamodelgen\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Jakarta Activation needed for JPA model generation --\u003e\u003cdependency\u003e\u003cgroupId\u003ecom.sun.activation\u003c/groupId\u003e\u003cartifactId\u003ejakarta.activation\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Bean Validation Implementation \n             Provides portable constraints such as @Email \n             Hibernate Validator is shipped in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\u003cartifactId\u003ehibernate-validator\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- hibernate-validator dependencies excluded on server dependency management yet required --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.validation\u003c/groupId\u003e\u003cartifactId\u003ejakarta.validation-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Annotation processor that raising compilation errors whenever constraint\n            annotations are incorrectly used. --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\u003cartifactId\u003ehibernate-validator-annotation-processor\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JPA API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Optional, but highly recommended --\u003e\u003c!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA)\n            JPA from JUnit/TestNG --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the Common Annotations API (JSR-250), we use provided scope\n            as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.annotation\u003c/groupId\u003e\u003cartifactId\u003ejboss-annotations-api_1.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the EJB API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JSF API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JAX-RS API, we use provided scope as the API is included\n            in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.ws.rs\u003c/groupId\u003e\u003cartifactId\u003ejboss-jaxrs-api_2.1_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.xml.bind\u003c/groupId\u003e\u003cartifactId\u003ejboss-jaxb-api_2.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c/dependencies\u003e\u003cbuild\u003e\u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\u003c/build\u003e"}}],"links":[{"url":"https://quarkus.io/guides/maven-tooling#build-tool-maven","title":"Quarkus - Guide"}],"Extras":null,"effort":1},"javaee-pom-to-quarkus-00040":{"description":"Adopt Maven Surefire plugin\n","category":"mandatory","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///opt/input/source/pom.xml","message":"Use the Maven Surefire plugin adding the following sections to the `pom.xml` file:. ```xml. \u003cproperties\u003e. \u003csurefire-plugin.version\u003e3.0.0\u003c/compiler-plugin.version\u003e. \u003c/properties\u003e. \u003cbuild\u003e. \u003cplugins\u003e. \u003cplugin\u003e. \u003cartifactId\u003emaven-surefire-plugin\u003c/artifactId\u003e. \u003cversion\u003e$\u003c/version\u003e. \u003cconfiguration\u003e. \u003csystemPropertyVariables\u003e. \u003cjava.util.logging.manager\u003eorg.jboss.logmanager.LogManager\u003c/java.util.logging.manager\u003e. \u003cmaven.home\u003e$\u003c/maven.home\u003e. \u003c/systemPropertyVariables\u003e. \u003c/configuration\u003e. \u003c/plugin\u003e. \u003c/plugins\u003e. \u003c/build\u003e. ```","variables":{"data":"project","innerText":"\n    4.0.0\n    \n        org.jboss.eap.quickstarts\n        quickstart-parent\n        \n        7.4.0.GA\n        ../pom.xml\n    \n    kitchensink\n    war\n    Quickstart: kitchensink\n    A starter Jakarta EE web application project for use in JBoss EAP\n\n    \n        \n            Apache License, Version 2.0\n            http://www.apache.org/licenses/LICENSE-2.0.html\n            repo\n        \n    \n\n    \n\n        \n\n        \n        \n            jakarta.enterprise\n            jakarta.enterprise.cdi-api\n            provided\n        \n\n        \n        \n            junit\n            junit\n            test\n        \n\n        \n\n        \n        \n            org.hibernate\n            hibernate-jpamodelgen\n            provided\n        \n        \n        \n            com.sun.activation\n            jakarta.activation\n            provided\n        \n\n        \n        \n            org.hibernate.validator\n            hibernate-validator\n            provided\n        \n        \n        \n            jakarta.validation\n            jakarta.validation-api\n            provided\n        \n\n        \n        \n            org.hibernate.validator\n            hibernate-validator-annotation-processor\n            provided\n        \n\n        \n        \n            jakarta.persistence\n            jakarta.persistence-api\n            provided\n        \n\n        \n        \n        \n            org.jboss.arquillian.junit\n            arquillian-junit-container\n            test\n        \n\n        \n            org.jboss.arquillian.protocol\n            arquillian-protocol-servlet\n            test\n        \n\n        \n        \n            org.jboss.spec.javax.annotation\n            jboss-annotations-api_1.3_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.ejb\n            jboss-ejb-api_3.2_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.faces\n            jboss-jsf-api_2.3_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.ws.rs\n            jboss-jaxrs-api_2.1_spec\n            provided\n        \n\n        \n            org.jboss.spec.javax.xml.bind\n            jboss-jaxb-api_2.3_spec\n            provided\n        \n\n    \n\n    \n        \n        ${project.artifactId}\n    \n","matchingXML":"\u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\u003cparent\u003e\u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\u003c!--\n        Maintain separation between the artifact id and the version to help prevent\n        merge conflicts between commits changing the GA and those changing the V.\n        --\u003e\u003cversion\u003e7.4.0.GA\u003c/version\u003e\u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\u003c/parent\u003e\u003cartifactId\u003ekitchensink\u003c/artifactId\u003e\u003cpackaging\u003ewar\u003c/packaging\u003e\u003cname\u003eQuickstart: kitchensink\u003c/name\u003e\u003cdescription\u003eA starter Jakarta EE web application project for use in JBoss EAP\u003c/description\u003e\u003clicenses\u003e\u003clicense\u003e\u003cname\u003eApache License, Version 2.0\u003c/name\u003e\u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\u003cdistribution\u003erepo\u003c/distribution\u003e\u003c/license\u003e\u003c/licenses\u003e\u003cdependencies\u003e\u003c!-- First declare the APIs we depend on and need for compilation. All\n            of them are provided by JBoss EAP --\u003e\u003c!-- Import the CDI API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Needed for running tests (you may also use TestNG) --\u003e\u003cdependency\u003e\u003cgroupId\u003ejunit\u003c/groupId\u003e\u003cartifactId\u003ejunit\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Now we declare any tools needed --\u003e\u003c!-- Annotation processor to generate the JPA metamodel classes for\n            typesafe criteria queries --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.hibernate\u003c/groupId\u003e\u003cartifactId\u003ehibernate-jpamodelgen\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Jakarta Activation needed for JPA model generation --\u003e\u003cdependency\u003e\u003cgroupId\u003ecom.sun.activation\u003c/groupId\u003e\u003cartifactId\u003ejakarta.activation\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Bean Validation Implementation \n             Provides portable constraints such as @Email \n             Hibernate Validator is shipped in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\u003cartifactId\u003ehibernate-validator\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- hibernate-validator dependencies excluded on server dependency management yet required --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.validation\u003c/groupId\u003e\u003cartifactId\u003ejakarta.validation-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Annotation processor that raising compilation errors whenever constraint\n            annotations are incorrectly used. --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\u003cartifactId\u003ehibernate-validator-annotation-processor\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JPA API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Optional, but highly recommended --\u003e\u003c!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA)\n            JPA from JUnit/TestNG --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the Common Annotations API (JSR-250), we use provided scope\n            as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.annotation\u003c/groupId\u003e\u003cartifactId\u003ejboss-annotations-api_1.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the EJB API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JSF API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JAX-RS API, we use provided scope as the API is included\n            in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.ws.rs\u003c/groupId\u003e\u003cartifactId\u003ejboss-jaxrs-api_2.1_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.xml.bind\u003c/groupId\u003e\u003cartifactId\u003ejboss-jaxb-api_2.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c/dependencies\u003e\u003cbuild\u003e\u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\u003c/build\u003e"}}],"links":[{"url":"https://quarkus.io/guides/maven-tooling#build-tool-maven","title":"Quarkus - Guide"}],"Extras":null,"effort":1},"javaee-pom-to-quarkus-00050":{"description":"Adopt Maven Failsafe plugin\n","category":"mandatory","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///opt/input/source/pom.xml","message":"Use the Maven Failsafe plugin adding the following sections to the `pom.xml` file:. ```xml. \u003cproperties\u003e. \u003csurefire-plugin.version\u003e3.0.0\u003c/compiler-plugin.version\u003e. \u003c/properties\u003e. \u003cbuild\u003e. \u003cplugins\u003e. \u003cplugin\u003e. \u003cartifactId\u003emaven-failsafe-plugin\u003c/artifactId\u003e. \u003cversion\u003e$\u003c/version\u003e. \u003cexecutions\u003e. \u003cexecution\u003e. \u003cgoals\u003e. \u003cgoals\u003eintegration-test\u003c/goal\u003e. \u003cgoals\u003everify\u003c/goal\u003e. \u003c/goals\u003e. \u003cconfiguration\u003e. \u003csystemPropertyVariables\u003e. \u003cnative.image.path\u003e$/$-runner\u003c/native.image.path\u003e. \u003cjava.util.logging.manager\u003eorg.jboss.logmanager.LogManager\u003c/java.util.logging.manager\u003e. \u003cmaven.home\u003e$\u003c/maven.home\u003e. \u003c/systemPropertyVariables\u003e. \u003c/configuration\u003e. \u003c/execution\u003e. \u003c/executions\u003e. \u003c/plugin\u003e. \u003c/plugins\u003e. \u003c/build\u003e. ```","variables":{"data":"project","innerText":"\n    4.0.0\n    \n        org.jboss.eap.quickstarts\n        quickstart-parent\n        \n        7.4.0.GA\n        ../pom.xml\n    \n    kitchensink\n    war\n    Quickstart: kitchensink\n    A starter Jakarta EE web application project for use in JBoss EAP\n\n    \n        \n            Apache License, Version 2.0\n            http://www.apache.org/licenses/LICENSE-2.0.html\n            repo\n        \n    \n\n    \n\n        \n\n        \n        \n            jakarta.enterprise\n            jakarta.enterprise.cdi-api\n            provided\n        \n\n        \n        \n            junit\n            junit\n            test\n        \n\n        \n\n        \n        \n            org.hibernate\n            hibernate-jpamodelgen\n            provided\n        \n        \n        \n            com.sun.activation\n            jakarta.activation\n            provided\n        \n\n        \n        \n            org.hibernate.validator\n            hibernate-validator\n            provided\n        \n        \n        \n            jakarta.validation\n            jakarta.validation-api\n            provided\n        \n\n        \n        \n            org.hibernate.validator\n            hibernate-validator-annotation-processor\n            provided\n        \n\n        \n        \n            jakarta.persistence\n            jakarta.persistence-api\n            provided\n        \n\n        \n        \n        \n            org.jboss.arquillian.junit\n            arquillian-junit-container\n            test\n        \n\n        \n            org.jboss.arquillian.protocol\n            arquillian-protocol-servlet\n            test\n        \n\n        \n        \n            org.jboss.spec.javax.annotation\n            jboss-annotations-api_1.3_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.ejb\n            jboss-ejb-api_3.2_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.faces\n            jboss-jsf-api_2.3_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.ws.rs\n            jboss-jaxrs-api_2.1_spec\n            provided\n        \n\n        \n            org.jboss.spec.javax.xml.bind\n            jboss-jaxb-api_2.3_spec\n            provided\n        \n\n    \n\n    \n        \n        ${project.artifactId}\n    \n","matchingXML":"\u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\u003cparent\u003e\u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\u003c!--\n        Maintain separation between the artifact id and the version to help prevent\n        merge conflicts between commits changing the GA and those changing the V.\n        --\u003e\u003cversion\u003e7.4.0.GA\u003c/version\u003e\u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\u003c/parent\u003e\u003cartifactId\u003ekitchensink\u003c/artifactId\u003e\u003cpackaging\u003ewar\u003c/packaging\u003e\u003cname\u003eQuickstart: kitchensink\u003c/name\u003e\u003cdescription\u003eA starter Jakarta EE web application project for use in JBoss EAP\u003c/description\u003e\u003clicenses\u003e\u003clicense\u003e\u003cname\u003eApache License, Version 2.0\u003c/name\u003e\u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\u003cdistribution\u003erepo\u003c/distribution\u003e\u003c/license\u003e\u003c/licenses\u003e\u003cdependencies\u003e\u003c!-- First declare the APIs we depend on and need for compilation. All\n            of them are provided by JBoss EAP --\u003e\u003c!-- Import the CDI API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Needed for running tests (you may also use TestNG) --\u003e\u003cdependency\u003e\u003cgroupId\u003ejunit\u003c/groupId\u003e\u003cartifactId\u003ejunit\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Now we declare any tools needed --\u003e\u003c!-- Annotation processor to generate the JPA metamodel classes for\n            typesafe criteria queries --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.hibernate\u003c/groupId\u003e\u003cartifactId\u003ehibernate-jpamodelgen\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Jakarta Activation needed for JPA model generation --\u003e\u003cdependency\u003e\u003cgroupId\u003ecom.sun.activation\u003c/groupId\u003e\u003cartifactId\u003ejakarta.activation\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Bean Validation Implementation \n             Provides portable constraints such as @Email \n             Hibernate Validator is shipped in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\u003cartifactId\u003ehibernate-validator\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- hibernate-validator dependencies excluded on server dependency management yet required --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.validation\u003c/groupId\u003e\u003cartifactId\u003ejakarta.validation-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Annotation processor that raising compilation errors whenever constraint\n            annotations are incorrectly used. --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\u003cartifactId\u003ehibernate-validator-annotation-processor\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JPA API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Optional, but highly recommended --\u003e\u003c!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA)\n            JPA from JUnit/TestNG --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the Common Annotations API (JSR-250), we use provided scope\n            as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.annotation\u003c/groupId\u003e\u003cartifactId\u003ejboss-annotations-api_1.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the EJB API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JSF API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JAX-RS API, we use provided scope as the API is included\n            in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.ws.rs\u003c/groupId\u003e\u003cartifactId\u003ejboss-jaxrs-api_2.1_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.xml.bind\u003c/groupId\u003e\u003cartifactId\u003ejboss-jaxb-api_2.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c/dependencies\u003e\u003cbuild\u003e\u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\u003c/build\u003e"}}],"links":[{"url":"https://quarkus.io/guides/maven-tooling#build-tool-maven","title":"Quarkus - Guide"}],"Extras":null,"effort":1},"javaee-pom-to-quarkus-00060":{"description":"Add Maven profile to run the Quarkus native build\nLeverage a Maven profile to run the Quarkus native build adding the following section to the `pom.xml` file:. ```xml. \u003cprofiles\u003e. \u003cprofile\u003e. \u003cid\u003enative\u003c/id\u003e. \u003cactivation\u003e. \u003cproperty\u003e. \u003cname\u003enative\u003c/name\u003e. \u003c/property\u003e. \u003c/activation\u003e. \u003cproperties\u003e. \u003cskipITs\u003efalse\u003c/skipITs\u003e. \u003cquarkus.package.type\u003enative\u003c/quarkus.package.type\u003e. \u003c/properties\u003e. \u003c/profile\u003e. \u003c/profiles\u003e. ```","category":"mandatory","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///opt/input/source/pom.xml","message":"Leverage a Maven profile to run the Quarkus native build adding the following section to the `pom.xml` file:. ```xml. \u003cprofiles\u003e. \u003cprofile\u003e. \u003cid\u003enative\u003c/id\u003e. \u003cactivation\u003e. \u003cproperty\u003e. \u003cname\u003enative\u003c/name\u003e. \u003c/property\u003e. \u003c/activation\u003e. \u003cproperties\u003e. \u003cskipITs\u003efalse\u003c/skipITs\u003e. \u003cquarkus.package.type\u003enative\u003c/quarkus.package.type\u003e. \u003c/properties\u003e. \u003c/profile\u003e. \u003c/profiles\u003e. ```","variables":{"data":"project","innerText":"\n    4.0.0\n    \n        org.jboss.eap.quickstarts\n        quickstart-parent\n        \n        7.4.0.GA\n        ../pom.xml\n    \n    kitchensink\n    war\n    Quickstart: kitchensink\n    A starter Jakarta EE web application project for use in JBoss EAP\n\n    \n        \n            Apache License, Version 2.0\n            http://www.apache.org/licenses/LICENSE-2.0.html\n            repo\n        \n    \n\n    \n\n        \n\n        \n        \n            jakarta.enterprise\n            jakarta.enterprise.cdi-api\n            provided\n        \n\n        \n        \n            junit\n            junit\n            test\n        \n\n        \n\n        \n        \n            org.hibernate\n            hibernate-jpamodelgen\n            provided\n        \n        \n        \n            com.sun.activation\n            jakarta.activation\n            provided\n        \n\n        \n        \n            org.hibernate.validator\n            hibernate-validator\n            provided\n        \n        \n        \n            jakarta.validation\n            jakarta.validation-api\n            provided\n        \n\n        \n        \n            org.hibernate.validator\n            hibernate-validator-annotation-processor\n            provided\n        \n\n        \n        \n            jakarta.persistence\n            jakarta.persistence-api\n            provided\n        \n\n        \n        \n        \n            org.jboss.arquillian.junit\n            arquillian-junit-container\n            test\n        \n\n        \n            org.jboss.arquillian.protocol\n            arquillian-protocol-servlet\n            test\n        \n\n        \n        \n            org.jboss.spec.javax.annotation\n            jboss-annotations-api_1.3_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.ejb\n            jboss-ejb-api_3.2_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.faces\n            jboss-jsf-api_2.3_spec\n            provided\n        \n\n        \n        \n            org.jboss.spec.javax.ws.rs\n            jboss-jaxrs-api_2.1_spec\n            provided\n        \n\n        \n            org.jboss.spec.javax.xml.bind\n            jboss-jaxb-api_2.3_spec\n            provided\n        \n\n    \n\n    \n        \n        ${project.artifactId}\n    \n","matchingXML":"\u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\u003cparent\u003e\u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\u003c!--\n        Maintain separation between the artifact id and the version to help prevent\n        merge conflicts between commits changing the GA and those changing the V.\n        --\u003e\u003cversion\u003e7.4.0.GA\u003c/version\u003e\u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\u003c/parent\u003e\u003cartifactId\u003ekitchensink\u003c/artifactId\u003e\u003cpackaging\u003ewar\u003c/packaging\u003e\u003cname\u003eQuickstart: kitchensink\u003c/name\u003e\u003cdescription\u003eA starter Jakarta EE web application project for use in JBoss EAP\u003c/description\u003e\u003clicenses\u003e\u003clicense\u003e\u003cname\u003eApache License, Version 2.0\u003c/name\u003e\u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\u003cdistribution\u003erepo\u003c/distribution\u003e\u003c/license\u003e\u003c/licenses\u003e\u003cdependencies\u003e\u003c!-- First declare the APIs we depend on and need for compilation. All\n            of them are provided by JBoss EAP --\u003e\u003c!-- Import the CDI API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Needed for running tests (you may also use TestNG) --\u003e\u003cdependency\u003e\u003cgroupId\u003ejunit\u003c/groupId\u003e\u003cartifactId\u003ejunit\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Now we declare any tools needed --\u003e\u003c!-- Annotation processor to generate the JPA metamodel classes for\n            typesafe criteria queries --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.hibernate\u003c/groupId\u003e\u003cartifactId\u003ehibernate-jpamodelgen\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Jakarta Activation needed for JPA model generation --\u003e\u003cdependency\u003e\u003cgroupId\u003ecom.sun.activation\u003c/groupId\u003e\u003cartifactId\u003ejakarta.activation\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Bean Validation Implementation \n             Provides portable constraints such as @Email \n             Hibernate Validator is shipped in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\u003cartifactId\u003ehibernate-validator\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- hibernate-validator dependencies excluded on server dependency management yet required --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.validation\u003c/groupId\u003e\u003cartifactId\u003ejakarta.validation-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Annotation processor that raising compilation errors whenever constraint\n            annotations are incorrectly used. --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\u003cartifactId\u003ehibernate-validator-annotation-processor\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JPA API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Optional, but highly recommended --\u003e\u003c!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA)\n            JPA from JUnit/TestNG --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\u003cscope\u003etest\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the Common Annotations API (JSR-250), we use provided scope\n            as the API is included in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.annotation\u003c/groupId\u003e\u003cartifactId\u003ejboss-annotations-api_1.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the EJB API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JSF API, we use provided scope as the API is included in\n            JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c!-- Import the JAX-RS API, we use provided scope as the API is included\n            in JBoss EAP --\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.ws.rs\u003c/groupId\u003e\u003cartifactId\u003ejboss-jaxrs-api_2.1_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003cdependency\u003e\u003cgroupId\u003eorg.jboss.spec.javax.xml.bind\u003c/groupId\u003e\u003cartifactId\u003ejboss-jaxb-api_2.3_spec\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e\u003c/dependency\u003e\u003c/dependencies\u003e\u003cbuild\u003e\u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\u003c/build\u003e"}}],"links":[{"url":"https://quarkus.io/guides/maven-tooling#build-tool-maven","title":"Quarkus - Guide"}],"Extras":null,"effort":1},"javaee-pom-to-quarkus-00070":{"description":"Configure Quarkus hibernate-orm\nConfigure Quarkus 'hibernate-orm` and jakarta persistence.. Add the `quarkus-hibernate-orm` section and one for your preferred jdbc solution to the `pom.xml` file, eg for postgres:. ```. \u003c!-- Hibernate ORM specific dependencies --\u003e. \u003cdependency\u003e. \u003cgroupId\u003eio.quarkus\u003c/groupId\u003e. \u003cartifactId\u003equarkus-hibernate-orm\u003c/artifactId\u003e. \u003c/dependency\u003e. \u003c!-- JDBC driver dependencies --\u003e. \u003cdependency\u003e. \u003cgroupId\u003eio.quarkus\u003c/groupId\u003e. \u003cartifactId\u003equarkus-jdbc-postgresql\u003c/artifactId\u003e. \u003c/dependency\u003e. ```","category":"mandatory","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///opt/input/source/pom.xml","message":"Configure Quarkus 'hibernate-orm` and jakarta persistence.. Add the `quarkus-hibernate-orm` section and one for your preferred jdbc solution to the `pom.xml` file, eg for postgres:. ```. \u003c!-- Hibernate ORM specific dependencies --\u003e. \u003cdependency\u003e. \u003cgroupId\u003eio.quarkus\u003c/groupId\u003e. \u003cartifactId\u003equarkus-hibernate-orm\u003c/artifactId\u003e. \u003c/dependency\u003e. \u003c!-- JDBC driver dependencies --\u003e. \u003cdependency\u003e. \u003cgroupId\u003eio.quarkus\u003c/groupId\u003e. \u003cartifactId\u003equarkus-jdbc-postgresql\u003c/artifactId\u003e. \u003c/dependency\u003e. ```","codeSnip":"  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"\u003e\n 19      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n 20      \u003cparent\u003e\n 21          \u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\n 22          \u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\n 23          \u003c!--\n 24          Maintain separation between the artifact id and the version to help prevent\n 25          merge conflicts between commits changing the GA and those changing the V.\n 26          --\u003e\n 27          \u003cversion\u003e7.4.0.GA\u003c/version\u003e\n 28          \u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\n 29      \u003c/parent\u003e\n 30      \u003cartifactId\u003ekitchensink\u003c/artifactId\u003e\n 31      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 32      \u003cname\u003eQuickstart: kitchensink\u003c/name\u003e\n 33      \u003cdescription\u003eA starter Jakarta EE web application project for use in JBoss EAP\u003c/description\u003e\n 34  \n 35      \u003clicenses\u003e\n 36          \u003clicense\u003e\n 37              \u003cname\u003eApache License, Version 2.0\u003c/name\u003e\n 38              \u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\n 39              \u003cdistribution\u003erepo\u003c/distribution\u003e\n 40          \u003c/license\u003e\n 41      \u003c/licenses\u003e\n 42  \n 43      \u003cdependencies\u003e\n 44  \n 45          \u003c!-- First declare the APIs we depend on and need for compilation. All\n 46              of them are provided by JBoss EAP --\u003e\n 47  \n 48          \u003c!-- Import the CDI API, we use provided scope as the API is included in\n 49              JBoss EAP --\u003e\n 50          \u003cdependency\u003e\n 51              \u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\n 52              \u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\n 53              \u003cscope\u003eprovided\u003c/scope\u003e\n 54          \u003c/dependency\u003e\n 55  \n 56          \u003c!-- Needed for running tests (you may also use TestNG) --\u003e\n 57          \u003cdependency\u003e\n 58              \u003cgroupId\u003ejunit\u003c/groupId\u003e\n 59              \u003cartifactId\u003ejunit\u003c/artifactId\u003e\n 60              \u003cscope\u003etest\u003c/scope\u003e\n 61          \u003c/dependency\u003e\n 62  \n 63          \u003c!-- Now we declare any tools needed --\u003e\n 64  \n 65          \u003c!-- Annotation processor to generate the JPA metamodel classes for\n 66              typesafe criteria queries --\u003e\n 67          \u003cdependency\u003e\n 68              \u003cgroupId\u003eorg.hibernate\u003c/groupId\u003e\n 69              \u003cartifactId\u003ehibernate-jpamodelgen\u003c/artifactId\u003e\n 70              \u003cscope\u003eprovided\u003c/scope\u003e\n 71          \u003c/dependency\u003e\n 72          \u003c!-- Jakarta Activation needed for JPA model generation --\u003e\n 73          \u003cdependency\u003e\n 74              \u003cgroupId\u003ecom.sun.activation\u003c/groupId\u003e\n 75              \u003cartifactId\u003ejakarta.activation\u003c/artifactId\u003e\n 76              \u003cscope\u003eprovided\u003c/scope\u003e\n 77          \u003c/dependency\u003e\n 78  \n 79          \u003c!-- Bean Validation Implementation \n 80               Provides portable constraints such as @Email \n 81               Hibernate Validator is shipped in JBoss EAP --\u003e\n 82          \u003cdependency\u003e\n 83              \u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\n 84              \u003cartifactId\u003ehibernate-validator\u003c/artifactId\u003e\n 85              \u003cscope\u003eprovided\u003c/scope\u003e\n 86          \u003c/dependency\u003e\n 87          \u003c!-- hibernate-validator dependencies excluded on server dependency management yet required --\u003e\n 88          \u003cdependency\u003e\n 89              \u003cgroupId\u003ejakarta.validation\u003c/groupId\u003e\n 90              \u003cartifactId\u003ejakarta.validation-api\u003c/artifactId\u003e\n 91              \u003cscope\u003eprovided\u003c/scope\u003e\n 92          \u003c/dependency\u003e\n 93  \n 94          \u003c!-- Annotation processor that raising compilation errors whenever constraint\n 95              annotations are incorrectly used. --\u003e\n 96          \u003cdependency\u003e\n 97              \u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\n 98              \u003cartifactId\u003ehibernate-validator-annotation-processor\u003c/artifactId\u003e\n 99              \u003cscope\u003eprovided\u003c/scope\u003e\n100          \u003c/dependency\u003e\n101  \n102          \u003c!-- Import the JPA API, we use provided scope as the API is included in\n103              JBoss EAP --\u003e\n104          \u003cdependency\u003e\n105              \u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\n106              \u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\n107              \u003cscope\u003eprovided\u003c/scope\u003e\n108          \u003c/dependency\u003e\n109  \n110          \u003c!-- Optional, but highly recommended --\u003e\n111          \u003c!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA)\n112              JPA from JUnit/TestNG --\u003e\n113          \u003cdependency\u003e\n114              \u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\n115              \u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\n116              \u003cscope\u003etest\u003c/scope\u003e\n117          \u003c/dependency\u003e\n118  \n119          \u003cdependency\u003e\n120              \u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\n121              \u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\n122              \u003cscope\u003etest\u003c/scope\u003e\n123          \u003c/dependency\u003e\n124  \n125          \u003c!-- Import the Common Annotations API (JSR-250), we use provided scope\n126              as the API is included in JBoss EAP --\u003e\n127          \u003cdependency\u003e\n128              \u003cgroupId\u003eorg.jboss.spec.javax.annotation\u003c/groupId\u003e\n129              \u003cartifactId\u003ejboss-annotations-api_1.3_spec\u003c/artifactId\u003e\n130              \u003cscope\u003eprovided\u003c/scope\u003e\n131          \u003c/dependency\u003e\n132  \n133          \u003c!-- Import the EJB API, we use provided scope as the API is included in\n134              JBoss EAP --\u003e\n135          \u003cdependency\u003e\n136              \u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\n137              \u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\n138              \u003cscope\u003eprovided\u003c/scope\u003e\n139          \u003c/dependency\u003e\n140  \n141          \u003c!-- Import the JSF API, we use provided scope as the API is included in\n142              JBoss EAP --\u003e\n143          \u003cdependency\u003e\n144              \u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\n145              \u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\n146              \u003cscope\u003eprovided\u003c/scope\u003e\n147          \u003c/dependency\u003e\n148  \n149          \u003c!-- Import the JAX-RS API, we use provided scope as the API is included\n150              in JBoss EAP --\u003e\n151          \u003cdependency\u003e\n152              \u003cgroupId\u003eorg.jboss.spec.javax.ws.rs\u003c/groupId\u003e\n153              \u003cartifactId\u003ejboss-jaxrs-api_2.1_spec\u003c/artifactId\u003e\n154              \u003cscope\u003eprovided\u003c/scope\u003e\n155          \u003c/dependency\u003e\n156  \n157          \u003cdependency\u003e\n158              \u003cgroupId\u003eorg.jboss.spec.javax.xml.bind\u003c/groupId\u003e\n159              \u003cartifactId\u003ejboss-jaxb-api_2.3_spec\u003c/artifactId\u003e\n160              \u003cscope\u003eprovided\u003c/scope\u003e\n161          \u003c/dependency\u003e\n162  \n163      \u003c/dependencies\u003e\n164  \n165      \u003cbuild\u003e\n166          \u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\n167          \u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\n168      \u003c/build\u003e\n169  \u003c/project\u003e\n","lineNumber":105,"variables":{"data":"dependency","innerText":"\n            jakarta.persistence\n            jakarta.persistence-api\n            provided\n        ","matchingXML":"\u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\u003cscope\u003eprovided\u003c/scope\u003e"}},{"uri":"file:///opt/input/source/pom.xml","message":"Configure Quarkus 'hibernate-orm` and jakarta persistence.. Add the `quarkus-hibernate-orm` section and one for your preferred jdbc solution to the `pom.xml` file, eg for postgres:. ```. \u003c!-- Hibernate ORM specific dependencies --\u003e. \u003cdependency\u003e. \u003cgroupId\u003eio.quarkus\u003c/groupId\u003e. \u003cartifactId\u003equarkus-hibernate-orm\u003c/artifactId\u003e. \u003c/dependency\u003e. \u003c!-- JDBC driver dependencies --\u003e. \u003cdependency\u003e. \u003cgroupId\u003eio.quarkus\u003c/groupId\u003e. \u003cartifactId\u003equarkus-jdbc-postgresql\u003c/artifactId\u003e. \u003c/dependency\u003e. ```","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"\u003e\n 19      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n 20      \u003cparent\u003e\n 21          \u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\n 22          \u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\n 23          \u003c!--\n 24          Maintain separation between the artifact id and the version to help prevent\n 25          merge conflicts between commits changing the GA and those changing the V.\n 26          --\u003e\n 27          \u003cversion\u003e7.4.0.GA\u003c/version\u003e\n 28          \u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\n 29      \u003c/parent\u003e\n 30      \u003cartifactId\u003ekitchensink\u003c/artifactId\u003e\n 31      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 32      \u003cname\u003eQuickstart: kitchensink\u003c/name\u003e\n 33      \u003cdescription\u003eA starter Jakarta EE web application project for use in JBoss EAP\u003c/description\u003e\n 34  \n 35      \u003clicenses\u003e\n 36          \u003clicense\u003e\n 37              \u003cname\u003eApache License, Version 2.0\u003c/name\u003e\n 38              \u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\n 39              \u003cdistribution\u003erepo\u003c/distribution\u003e\n 40          \u003c/license\u003e\n 41      \u003c/licenses\u003e\n 42  \n 43      \u003cdependencies\u003e\n 44  \n 45          \u003c!-- First declare the APIs we depend on and need for compilation. All\n 46              of them are provided by JBoss EAP --\u003e\n 47  \n 48          \u003c!-- Import the CDI API, we use provided scope as the API is included in\n 49              JBoss EAP --\u003e\n 50          \u003cdependency\u003e\n 51              \u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\n 52              \u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\n 53              \u003cscope\u003eprovided\u003c/scope\u003e\n 54          \u003c/dependency\u003e\n 55  \n 56          \u003c!-- Needed for running tests (you may also use TestNG) --\u003e\n 57          \u003cdependency\u003e\n 58              \u003cgroupId\u003ejunit\u003c/groupId\u003e\n 59              \u003cartifactId\u003ejunit\u003c/artifactId\u003e\n 60              \u003cscope\u003etest\u003c/scope\u003e\n 61          \u003c/dependency\u003e\n 62  \n 63          \u003c!-- Now we declare any tools needed --\u003e\n 64  \n 65          \u003c!-- Annotation processor to generate the JPA metamodel classes for\n 66              typesafe criteria queries --\u003e\n 67          \u003cdependency\u003e\n 68              \u003cgroupId\u003eorg.hibernate\u003c/groupId\u003e\n 69              \u003cartifactId\u003ehibernate-jpamodelgen\u003c/artifactId\u003e\n 70              \u003cscope\u003eprovided\u003c/scope\u003e\n 71          \u003c/dependency\u003e\n 72          \u003c!-- Jakarta Activation needed for JPA model generation --\u003e\n 73          \u003cdependency\u003e\n 74              \u003cgroupId\u003ecom.sun.activation\u003c/groupId\u003e\n 75              \u003cartifactId\u003ejakarta.activation\u003c/artifactId\u003e\n 76              \u003cscope\u003eprovided\u003c/scope\u003e\n 77          \u003c/dependency\u003e\n 78  \n 79          \u003c!-- Bean Validation Implementation \n 80               Provides portable constraints such as @Email \n 81               Hibernate Validator is shipped in JBoss EAP --\u003e\n 82          \u003cdependency\u003e\n 83              \u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\n 84              \u003cartifactId\u003ehibernate-validator\u003c/artifactId\u003e\n 85              \u003cscope\u003eprovided\u003c/scope\u003e\n 86          \u003c/dependency\u003e\n 87          \u003c!-- hibernate-validator dependencies excluded on server dependency management yet required --\u003e\n 88          \u003cdependency\u003e\n 89              \u003cgroupId\u003ejakarta.validation\u003c/groupId\u003e\n 90              \u003cartifactId\u003ejakarta.validation-api\u003c/artifactId\u003e\n 91              \u003cscope\u003eprovided\u003c/scope\u003e\n 92          \u003c/dependency\u003e\n 93  \n 94          \u003c!-- Annotation processor that raising compilation errors whenever constraint\n 95              annotations are incorrectly used. --\u003e\n 96          \u003cdependency\u003e\n 97              \u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\n 98              \u003cartifactId\u003ehibernate-validator-annotation-processor\u003c/artifactId\u003e\n 99              \u003cscope\u003eprovided\u003c/scope\u003e\n100          \u003c/dependency\u003e\n101  \n102          \u003c!-- Import the JPA API, we use provided scope as the API is included in\n103              JBoss EAP --\u003e\n104          \u003cdependency\u003e\n105              \u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\n106              \u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\n107              \u003cscope\u003eprovided\u003c/scope\u003e\n108          \u003c/dependency\u003e\n109  \n110          \u003c!-- Optional, but highly recommended --\u003e\n111          \u003c!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA)\n112              JPA from JUnit/TestNG --\u003e\n113          \u003cdependency\u003e\n114              \u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\n115              \u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\n116              \u003cscope\u003etest\u003c/scope\u003e\n117          \u003c/dependency\u003e\n118  \n119          \u003cdependency\u003e\n120              \u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\n121              \u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\n122              \u003cscope\u003etest\u003c/scope\u003e\n123          \u003c/dependency\u003e\n124  \n125          \u003c!-- Import the Common Annotations API (JSR-250), we use provided scope\n126              as the API is included in JBoss EAP --\u003e\n127          \u003cdependency\u003e\n128              \u003cgroupId\u003eorg.jboss.spec.javax.annotation\u003c/groupId\u003e\n129              \u003cartifactId\u003ejboss-annotations-api_1.3_spec\u003c/artifactId\u003e\n130              \u003cscope\u003eprovided\u003c/scope\u003e\n131          \u003c/dependency\u003e\n132  \n133          \u003c!-- Import the EJB API, we use provided scope as the API is included in\n134              JBoss EAP --\u003e\n135          \u003cdependency\u003e\n136              \u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\n137              \u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\n138              \u003cscope\u003eprovided\u003c/scope\u003e\n139          \u003c/dependency\u003e\n140  \n141          \u003c!-- Import the JSF API, we use provided scope as the API is included in\n142              JBoss EAP --\u003e\n143          \u003cdependency\u003e\n144              \u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\n145              \u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\n146              \u003cscope\u003eprovided\u003c/scope\u003e\n147          \u003c/dependency\u003e\n148  \n149          \u003c!-- Import the JAX-RS API, we use provided scope as the API is included\n150              in JBoss EAP --\u003e\n151          \u003cdependency\u003e\n152              \u003cgroupId\u003eorg.jboss.spec.javax.ws.rs\u003c/groupId\u003e\n153              \u003cartifactId\u003ejboss-jaxrs-api_2.1_spec\u003c/artifactId\u003e\n154              \u003cscope\u003eprovided\u003c/scope\u003e\n155          \u003c/dependency\u003e\n156  \n157          \u003cdependency\u003e\n158              \u003cgroupId\u003eorg.jboss.spec.javax.xml.bind\u003c/groupId\u003e\n159              \u003cartifactId\u003ejboss-jaxb-api_2.3_spec\u003c/artifactId\u003e\n160              \u003cscope\u003eprovided\u003c/scope\u003e\n161          \u003c/dependency\u003e\n162  \n163      \u003c/dependencies\u003e\n164  \n165      \u003cbuild\u003e\n166          \u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\n167          \u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\n168      \u003c/build\u003e\n169  \u003c/project\u003e","lineNumber":68,"variables":{"data":"groupId","innerText":"org.hibernate","matchingXML":"org.hibernate"}},{"uri":"file:///opt/input/source/pom.xml","message":"Configure Quarkus 'hibernate-orm` and jakarta persistence.. Add the `quarkus-hibernate-orm` section and one for your preferred jdbc solution to the `pom.xml` file, eg for postgres:. ```. \u003c!-- Hibernate ORM specific dependencies --\u003e. \u003cdependency\u003e. \u003cgroupId\u003eio.quarkus\u003c/groupId\u003e. \u003cartifactId\u003equarkus-hibernate-orm\u003c/artifactId\u003e. \u003c/dependency\u003e. \u003c!-- JDBC driver dependencies --\u003e. \u003cdependency\u003e. \u003cgroupId\u003eio.quarkus\u003c/groupId\u003e. \u003cartifactId\u003equarkus-jdbc-postgresql\u003c/artifactId\u003e. \u003c/dependency\u003e. ```","codeSnip":"  1  \u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\n  2  \u003c!--\n  3      JBoss, Home of Professional Open Source\n  4      Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  5      contributors by the @authors tag. See the copyright.txt in the\n  6      distribution for a full listing of individual contributors.\n  7  \n  8      Licensed under the Apache License, Version 2.0 (the \"License\");\n  9      you may not use this file except in compliance with the License.\n 10      You may obtain a copy of the License at\n 11      http://www.apache.org/licenses/LICENSE-2.0\n 12      Unless required by applicable law or agreed to in writing, software\n 13      distributed under the License is distributed on an \"AS IS\" BASIS,\n 14      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 15      See the License for the specific language governing permissions and\n 16      limitations under the License.\n 17  --\u003e\n 18  \u003cproject xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"\u003e\n 19      \u003cmodelVersion\u003e4.0.0\u003c/modelVersion\u003e\n 20      \u003cparent\u003e\n 21          \u003cgroupId\u003eorg.jboss.eap.quickstarts\u003c/groupId\u003e\n 22          \u003cartifactId\u003equickstart-parent\u003c/artifactId\u003e\n 23          \u003c!--\n 24          Maintain separation between the artifact id and the version to help prevent\n 25          merge conflicts between commits changing the GA and those changing the V.\n 26          --\u003e\n 27          \u003cversion\u003e7.4.0.GA\u003c/version\u003e\n 28          \u003crelativePath\u003e../pom.xml\u003c/relativePath\u003e\n 29      \u003c/parent\u003e\n 30      \u003cartifactId\u003ekitchensink\u003c/artifactId\u003e\n 31      \u003cpackaging\u003ewar\u003c/packaging\u003e\n 32      \u003cname\u003eQuickstart: kitchensink\u003c/name\u003e\n 33      \u003cdescription\u003eA starter Jakarta EE web application project for use in JBoss EAP\u003c/description\u003e\n 34  \n 35      \u003clicenses\u003e\n 36          \u003clicense\u003e\n 37              \u003cname\u003eApache License, Version 2.0\u003c/name\u003e\n 38              \u003curl\u003ehttp://www.apache.org/licenses/LICENSE-2.0.html\u003c/url\u003e\n 39              \u003cdistribution\u003erepo\u003c/distribution\u003e\n 40          \u003c/license\u003e\n 41      \u003c/licenses\u003e\n 42  \n 43      \u003cdependencies\u003e\n 44  \n 45          \u003c!-- First declare the APIs we depend on and need for compilation. All\n 46              of them are provided by JBoss EAP --\u003e\n 47  \n 48          \u003c!-- Import the CDI API, we use provided scope as the API is included in\n 49              JBoss EAP --\u003e\n 50          \u003cdependency\u003e\n 51              \u003cgroupId\u003ejakarta.enterprise\u003c/groupId\u003e\n 52              \u003cartifactId\u003ejakarta.enterprise.cdi-api\u003c/artifactId\u003e\n 53              \u003cscope\u003eprovided\u003c/scope\u003e\n 54          \u003c/dependency\u003e\n 55  \n 56          \u003c!-- Needed for running tests (you may also use TestNG) --\u003e\n 57          \u003cdependency\u003e\n 58              \u003cgroupId\u003ejunit\u003c/groupId\u003e\n 59              \u003cartifactId\u003ejunit\u003c/artifactId\u003e\n 60              \u003cscope\u003etest\u003c/scope\u003e\n 61          \u003c/dependency\u003e\n 62  \n 63          \u003c!-- Now we declare any tools needed --\u003e\n 64  \n 65          \u003c!-- Annotation processor to generate the JPA metamodel classes for\n 66              typesafe criteria queries --\u003e\n 67          \u003cdependency\u003e\n 68              \u003cgroupId\u003eorg.hibernate\u003c/groupId\u003e\n 69              \u003cartifactId\u003ehibernate-jpamodelgen\u003c/artifactId\u003e\n 70              \u003cscope\u003eprovided\u003c/scope\u003e\n 71          \u003c/dependency\u003e\n 72          \u003c!-- Jakarta Activation needed for JPA model generation --\u003e\n 73          \u003cdependency\u003e\n 74              \u003cgroupId\u003ecom.sun.activation\u003c/groupId\u003e\n 75              \u003cartifactId\u003ejakarta.activation\u003c/artifactId\u003e\n 76              \u003cscope\u003eprovided\u003c/scope\u003e\n 77          \u003c/dependency\u003e\n 78  \n 79          \u003c!-- Bean Validation Implementation \n 80               Provides portable constraints such as @Email \n 81               Hibernate Validator is shipped in JBoss EAP --\u003e\n 82          \u003cdependency\u003e\n 83              \u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\n 84              \u003cartifactId\u003ehibernate-validator\u003c/artifactId\u003e\n 85              \u003cscope\u003eprovided\u003c/scope\u003e\n 86          \u003c/dependency\u003e\n 87          \u003c!-- hibernate-validator dependencies excluded on server dependency management yet required --\u003e\n 88          \u003cdependency\u003e\n 89              \u003cgroupId\u003ejakarta.validation\u003c/groupId\u003e\n 90              \u003cartifactId\u003ejakarta.validation-api\u003c/artifactId\u003e\n 91              \u003cscope\u003eprovided\u003c/scope\u003e\n 92          \u003c/dependency\u003e\n 93  \n 94          \u003c!-- Annotation processor that raising compilation errors whenever constraint\n 95              annotations are incorrectly used. --\u003e\n 96          \u003cdependency\u003e\n 97              \u003cgroupId\u003eorg.hibernate.validator\u003c/groupId\u003e\n 98              \u003cartifactId\u003ehibernate-validator-annotation-processor\u003c/artifactId\u003e\n 99              \u003cscope\u003eprovided\u003c/scope\u003e\n100          \u003c/dependency\u003e\n101  \n102          \u003c!-- Import the JPA API, we use provided scope as the API is included in\n103              JBoss EAP --\u003e\n104          \u003cdependency\u003e\n105              \u003cgroupId\u003ejakarta.persistence\u003c/groupId\u003e\n106              \u003cartifactId\u003ejakarta.persistence-api\u003c/artifactId\u003e\n107              \u003cscope\u003eprovided\u003c/scope\u003e\n108          \u003c/dependency\u003e\n109  \n110          \u003c!-- Optional, but highly recommended --\u003e\n111          \u003c!-- Arquillian allows you to test enterprise code such as EJBs and Transactional(JTA)\n112              JPA from JUnit/TestNG --\u003e\n113          \u003cdependency\u003e\n114              \u003cgroupId\u003eorg.jboss.arquillian.junit\u003c/groupId\u003e\n115              \u003cartifactId\u003earquillian-junit-container\u003c/artifactId\u003e\n116              \u003cscope\u003etest\u003c/scope\u003e\n117          \u003c/dependency\u003e\n118  \n119          \u003cdependency\u003e\n120              \u003cgroupId\u003eorg.jboss.arquillian.protocol\u003c/groupId\u003e\n121              \u003cartifactId\u003earquillian-protocol-servlet\u003c/artifactId\u003e\n122              \u003cscope\u003etest\u003c/scope\u003e\n123          \u003c/dependency\u003e\n124  \n125          \u003c!-- Import the Common Annotations API (JSR-250), we use provided scope\n126              as the API is included in JBoss EAP --\u003e\n127          \u003cdependency\u003e\n128              \u003cgroupId\u003eorg.jboss.spec.javax.annotation\u003c/groupId\u003e\n129              \u003cartifactId\u003ejboss-annotations-api_1.3_spec\u003c/artifactId\u003e\n130              \u003cscope\u003eprovided\u003c/scope\u003e\n131          \u003c/dependency\u003e\n132  \n133          \u003c!-- Import the EJB API, we use provided scope as the API is included in\n134              JBoss EAP --\u003e\n135          \u003cdependency\u003e\n136              \u003cgroupId\u003eorg.jboss.spec.javax.ejb\u003c/groupId\u003e\n137              \u003cartifactId\u003ejboss-ejb-api_3.2_spec\u003c/artifactId\u003e\n138              \u003cscope\u003eprovided\u003c/scope\u003e\n139          \u003c/dependency\u003e\n140  \n141          \u003c!-- Import the JSF API, we use provided scope as the API is included in\n142              JBoss EAP --\u003e\n143          \u003cdependency\u003e\n144              \u003cgroupId\u003eorg.jboss.spec.javax.faces\u003c/groupId\u003e\n145              \u003cartifactId\u003ejboss-jsf-api_2.3_spec\u003c/artifactId\u003e\n146              \u003cscope\u003eprovided\u003c/scope\u003e\n147          \u003c/dependency\u003e\n148  \n149          \u003c!-- Import the JAX-RS API, we use provided scope as the API is included\n150              in JBoss EAP --\u003e\n151          \u003cdependency\u003e\n152              \u003cgroupId\u003eorg.jboss.spec.javax.ws.rs\u003c/groupId\u003e\n153              \u003cartifactId\u003ejboss-jaxrs-api_2.1_spec\u003c/artifactId\u003e\n154              \u003cscope\u003eprovided\u003c/scope\u003e\n155          \u003c/dependency\u003e\n156  \n157          \u003cdependency\u003e\n158              \u003cgroupId\u003eorg.jboss.spec.javax.xml.bind\u003c/groupId\u003e\n159              \u003cartifactId\u003ejboss-jaxb-api_2.3_spec\u003c/artifactId\u003e\n160              \u003cscope\u003eprovided\u003c/scope\u003e\n161          \u003c/dependency\u003e\n162  \n163      \u003c/dependencies\u003e\n164  \n165      \u003cbuild\u003e\n166          \u003c!-- Set the name of the WAR, used as the context root when the app is deployed --\u003e\n167          \u003cfinalName\u003e${project.artifactId}\u003c/finalName\u003e\n168      \u003c/build\u003e\n169  \u003c/project\u003e\n","lineNumber":83,"variables":{"data":"groupId","innerText":"org.hibernate.validator","matchingXML":"org.hibernate.validator"}}],"links":[{"url":"https://quarkus.io/guides/hibernate-orm","title":"Using hibernate-orm and jakarta persistence"}],"Extras":null,"effort":1},"jaxrs-to-quarkus-00020":{"description":"JAX-RS activation is no longer necessary\nJAX-RS activation is no longer necessary. You can set a root path like this but you don't have to.","category":"optional","labels":["konveyor.io/source=java-ee","konveyor.io/target=quarkus"],"incidents":[{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/JaxRsActivator.java","message":"JAX-RS activation is no longer necessary. You can set a root path like this but you don't have to.","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import javax.ws.rs.ApplicationPath;\n 20  import javax.ws.rs.core.Application;\n 21  \n 22  /**\n 23   * A class extending {@link Application} and annotated with @ApplicationPath is the Jakarta EE \"no XML\" approach to activating\n 24   * JAX-RS.\n 25   * \u003cp\u003e\n 26   * \u003cp\u003e\n 27   * Resources are served relative to the servlet path specified in the {@link ApplicationPath} annotation.\n 28   * \u003c/p\u003e\n 29   */\n 30  @ApplicationPath(\"/rest\")\n 31  public class JaxRsActivator extends Application {\n 32      /* class body intentionally left blank */\n 33  }\n","lineNumber":30,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/JaxRsActivator.java","kind":"Class","name":"ApplicationPath"}},{"uri":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/JaxRsActivator.java","message":"JAX-RS activation is no longer necessary. You can set a root path like this but you don't have to.","codeSnip":"  1  /*\n  2   * JBoss, Home of Professional Open Source\n  3   * Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual\n  4   * contributors by the @authors tag. See the copyright.txt in the\n  5   * distribution for a full listing of individual contributors.\n  6   *\n  7   * Licensed under the Apache License, Version 2.0 (the \"License\");\n  8   * you may not use this file except in compliance with the License.\n  9   * You may obtain a copy of the License at\n 10   * http://www.apache.org/licenses/LICENSE-2.0\n 11   * Unless required by applicable law or agreed to in writing, software\n 12   * distributed under the License is distributed on an \"AS IS\" BASIS,\n 13   * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n 14   * See the License for the specific language governing permissions and\n 15   * limitations under the License.\n 16   */\n 17  package org.jboss.as.quickstarts.kitchensink.rest;\n 18  \n 19  import javax.ws.rs.ApplicationPath;\n 20  import javax.ws.rs.core.Application;\n 21  \n 22  /**\n 23   * A class extending {@link Application} and annotated with @ApplicationPath is the Jakarta EE \"no XML\" approach to activating\n 24   * JAX-RS.\n 25   * \u003cp\u003e\n 26   * \u003cp\u003e\n 27   * Resources are served relative to the servlet path specified in the {@link ApplicationPath} annotation.\n 28   * \u003c/p\u003e\n 29   */\n 30  @ApplicationPath(\"/rest\")\n 31  public class JaxRsActivator extends Application {\n 32      /* class body intentionally left blank */\n 33  }\n","lineNumber":31,"variables":{"file":"file:///opt/input/source/src/main/java/org/jboss/as/quickstarts/kitchensink/rest/JaxRsActivator.java","kind":"Class","name":"JaxRsActivator"}}],"links":[{"url":"https://quarkus.io/guides/resteasy-reactive#declaring-endpoints-uri-mapping","title":"Quarkus - Guide"}],"Extras":null,"effort":1}},"unmatched":["quarkus-agroal-00000","quarkus-agroal-00010","quarkus-amazon-dynamodb-00000","quarkus-amazon-dynamodb-00010","quarkus-amazon-iam-00000","quarkus-amazon-iam-00010","quarkus-amazon-kms-00000","quarkus-amazon-kms-00010","quarkus-amazon-lambda-http-00000","quarkus-amazon-lambda-http-00010","quarkus-amazon-lambda-rest-00000","quarkus-amazon-lambda-rest-00010","quarkus-amazon-lambda-xray-00000","quarkus-amazon-lambda-xray-00010","quarkus-amazon-s3-00000","quarkus-amazon-s3-00010","quarkus-amazon-ses-00000","quarkus-amazon-ses-00010","quarkus-amazon-sns-00000","quarkus-amazon-sns-00010","quarkus-amazon-sqs-00000","quarkus-amazon-sqs-00010","quarkus-amazon-ssm-00000","quarkus-amazon-ssm-00010","quarkus-apicurio-registry-avro-00000","quarkus-apicurio-registry-avro-00010","quarkus-artemis-jms-00000","quarkus-artemis-jms-00010","quarkus-avro-00000","quarkus-avro-00010","quarkus-config-yaml-00000","quarkus-config-yaml-00010","quarkus-elytron-security-jdbc-00000","quarkus-elytron-security-jdbc-00010","quarkus-elytron-security-ldap-00000","quarkus-elytron-security-ldap-00010","quarkus-elytron-security-oauth2-00000","quarkus-elytron-security-oauth2-00010","quarkus-flyway-00000","quarkus-flyway-00010","quarkus-hibernate-envers-00000","quarkus-hibernate-envers-00010","quarkus-hibernate-reactive-00000","quarkus-hibernate-reactive-00010","quarkus-hibernate-search-orm-elasticsearch-aws-00000","quarkus-hibernate-search-orm-elasticsearch-aws-00010","quarkus-hibernate-validator-00000","quarkus-hibernate-validator-00010","quarkus-jdbc-db2-00000","quarkus-jdbc-db2-00010","quarkus-jdbc-derby-00000","quarkus-jdbc-derby-00010","quarkus-jdbc-mariadb-00000","quarkus-jdbc-mariadb-00010","quarkus-jdbc-mysql-00000","quarkus-jdbc-mysql-00010","quarkus-jdbc-oracle-00000","quarkus-jdbc-oracle-00010","quarkus-jdbc-postgresql-00000","quarkus-jdbc-postgresql-00010","quarkus-jsonb-00000","quarkus-jsonb-00010","quarkus-jsonp-00000","quarkus-jsonp-00010","quarkus-kafka-client-00000","quarkus-kafka-client-00010","quarkus-kafka-streams-00000","quarkus-kafka-streams-00010","quarkus-keycloak-admin-client-00000","quarkus-keycloak-admin-client-00010","quarkus-kubernetes-client-00000","quarkus-kubernetes-client-00010","quarkus-liquibase-00000","quarkus-liquibase-00010","quarkus-liquibase-mongodb-00000","quarkus-liquibase-mongodb-00010","springboot-actuator-to-quarkus-0100","springboot-cache-to-quarkus-00000","springboot-cloud-config-client-to-quarkus-00000","quarkus-logging-gelf-00000","quarkus-logging-gelf-00010","quarkus-logging-sentry-00000","quarkus-logging-sentry-00010","springboot-jpa-to-quarkus-00000","springboot-annotations-to-quarkus-00000","springboot-di-to-quarkus-00000","springboot-generic-catchall-00100","springboot-di-to-quarkus-00002","springboot-integration-to-quarkus-00020","springboot-jmx-to-quarkus-00001","springboot-metrics-to-quarkus-0100","springboot-metrics-to-quarkus-0200","springboot-devtools-to-quarkus-0000","springboot-actuator-to-quarkus-0200","springboot-properties-to-quarkus-00000","springboot-integration-to-quarkus-00010","springboot-plugins-to-quarkus-0000","springboot-properties-to-quarkus-00001","springboot-jmx-to-quarkus-00000","quarkus-micrometer-registry-prometheus-00000","quarkus-micrometer-registry-prometheus-00010","springboot-scheduled-to-quarkus-00000","springboot-security-to-quarkus-00000","springboot-shell-to-quarkus-00000","springboot-web-to-quarkus-00000","springboot-web-to-quarkus-00010","springboot-webmvc-to-quarkus-00000","springboot-webmvc-to-quarkus-01000","quarkus-narayana-jta-00000","quarkus-narayana-jta-00010","quarkus-narayana-lra-00000","quarkus-narayana-lra-00010","quarkus-narayana-stm-00000","quarkus-narayana-stm-00010","quarkus-openshift-client-00000","quarkus-openshift-client-00010","springboot-parent-pom-to-quarkus-00000","cdi-to-quarkus-00000","springboot-metrics-to-quarkus-0300","cdi-to-quarkus-00020","springboot-properties-to-quarkus-00003","dependency-removal-for-quarkus-00000","springboot-properties-to-quarkus-00002","springboot-properties-to-quarkus-00005","springboot-properties-to-quarkus-00006","springboot-di-to-quarkus-00001","springboot-properties-to-quarkus-00004","javaee-pom-to-quarkus-00080","jaxrs-to-quarkus-00000","jaxrs-to-quarkus-00010","quarkus-opentelemetry-exporter-jaeger-00000","quarkus-opentelemetry-exporter-jaeger-00010","quarkus-opentelemetry-exporter-otlp-00000","quarkus-opentelemetry-exporter-otlp-00010","quarkus-picocli-00000","quarkus-picocli-00010","quarkus-resteasy-multipart-00000","quarkus-resteasy-multipart-00010"]},{"name":"rhr/springboot","description":"Verify the version of the Spring Boot framework is compatible with those supported by Red Hat Runtimes","skipped":["springboot-associated-00001","springboot-associated-00002","springboot-associated-00003","springboot-associated-00004","springboot-associated-00005","springboot-associated-00006","springboot-associated-00007","springboot-associated-00008","springboot-associated-00009","springboot-associated-00010","springboot-associated-00011","springboot-associated-00012","springboot-associated-00013","springboot-associated-00014","springboot-associated-00015","springboot-00001","springboot-00002"]},{"name":"technology-usage","description":"This ruleset adds tags the configuration management technologies so are appropriately categorized on the technology reports.","tags":["View=JSF Page","Web=JSF Page","Java EE=JSF Page","Java EE=EJB XML","Connect=EJB XML","Bean=EJB XML","Store=JPA XML","Persistence=JPA XML","Java EE=JPA XML","Java EE Batch","Execute=Java EE Batch","Processing=Java EE Batch","Java EE=Java EE Batch","CDI","Execute=CDI","Inversion of Control=CDI","Java EE=CDI","Bean Validation","Validation=Bean Validation","Store=Bean Validation","Java EE=Bean Validation","JSF XML","Java EE=JSF XML","View=JSF XML","Web=JSF XML"],"unmatched":["technology-usage-web-01100","technology-usage-web-01300","technology-usage-web-01400","technology-usage-web-01500","technology-usage-web-01600","technology-usage-web-01700","technology-usage-web-01800","technology-usage-web-01900","technology-usage-web-02000","technology-usage-web-02100","technology-usage-web-02200","technology-usage-web-02300","technology-usage-web-02400","technology-usage-test-frameworks-00010","technology-usage-test-frameworks-00020","technology-usage-test-frameworks-00030","technology-usage-test-frameworks-00040","technology-usage-test-frameworks-00050","technology-usage-test-frameworks-00060","technology-usage-test-frameworks-00070","technology-usage-test-frameworks-00080","technology-usage-test-frameworks-00090","technology-usage-test-frameworks-00100","technology-usage-test-frameworks-00110","technology-usage-test-frameworks-00120","technology-usage-test-frameworks-00130","technology-usage-test-frameworks-00140","technology-usage-test-frameworks-00150","technology-usage-test-frameworks-00160","technology-usage-test-frameworks-00170","technology-usage-test-frameworks-00180","technology-usage-test-frameworks-00190","technology-usage-test-frameworks-00200","technology-usage-test-frameworks-00210","technology-usage-test-frameworks-00220","technology-usage-test-frameworks-00230","technology-usage-test-frameworks-00240","technology-usage-test-frameworks-00250","technology-usage-test-frameworks-00260","technology-usage-test-frameworks-00270","technology-usage-test-frameworks-00280","technology-usage-test-frameworks-00290","technology-usage-test-frameworks-00300","technology-usage-test-frameworks-00310","technology-usage-test-frameworks-00320","technology-usage-test-frameworks-00330","technology-usage-test-frameworks-00340","technology-usage-test-frameworks-00350","technology-usage-test-frameworks-00360","technology-usage-test-frameworks-00370","technology-usage-security-01000","technology-usage-security-01100","technology-usage-security-01200","technology-usage-security-01300","technology-usage-security-01400","technology-usage-security-01500","technology-usage-security-01600","technology-usage-security-01700","technology-usage-security-01800","technology-usage-security-01900","technology-usage-security-02000","technology-usage-security-02100","technology-usage-security-02200","technology-usage-security-02300","technology-usage-security-02400","technology-usage-security-02500","technology-usage-security-02600","technology-usage-security-02700","technology-usage-security-02800","technology-usage-security-02900","technology-usage-security-03000","technology-usage-security-03100","technology-usage-security-03200","technology-usage-security-03300","technology-usage-security-03400","technology-usage-security-03500","observability-technology-usage-0100","observability-technology-usage-0200","non-xml-technology-usage-05000","non-xml-technology-usage-06000","non-xml-technology-usage-12000","non-xml-technology-usage-13000","non-xml-technology-usage-14000","non-xml-technology-usage-18000","non-xml-technology-usage-19000","non-xml-technology-usage-20000","non-xml-technology-usage-21000","non-xml-technology-usage-22000","non-xml-technology-usage-23000","non-xml-technology-usage-24000","non-xml-technology-usage-25000","non-xml-technology-usage-26000","non-xml-technology-usage-27000","technology-usage-mvc-01000","technology-usage-mvc-01100","technology-usage-mvc-01200","technology-usage-mvc-01300","technology-usage-mvc-01400","technology-usage-mvc-01500","technology-usage-mvc-01600","technology-usage-mvc-01700","technology-usage-mvc-01800","technology-usage-mvc-01900","technology-usage-mvc-02000","technology-usage-mvc-02100","technology-usage-mvc-02200","technology-usage-mvc-02300","technology-usage-mvc-02400","technology-usage-mvc-02500","technology-usage-mvc-02600","technology-usage-mvc-02700","technology-usage-mvc-02800","technology-usage-mvc-02900","technology-usage-mvc-03000","technology-usage-mvc-03100","technology-usage-mvc-03200","technology-usage-mvc-03300","technology-usage-mvc-03400","technology-usage-mvc-03500","technology-usage-mvc-03600","technology-usage-mvc-03700","technology-usage-mvc-03800","technology-usage-mvc-03900","technology-usage-mvc-04000","technology-usage-mvc-04100","technology-usage-mvc-0x4200","technology-usage-mvc-04300","technology-usage-mvc-04400","technology-usage-mvc-04500","technology-usage-mvc-04600","technology-usage-mvc-04700","technology-usage-mvc-04800","technology-usage-mvc-04900","technology-usage-mvc-05000","technology-usage-mvc-05100","technology-usage-mvc-05200","technology-usage-mvc-05300","technology-usage-mvc-05400","technology-usage-mvc-05500","technology-usage-mvc-05600","technology-usage-mvc-05700","technology-usage-mvc-05800","technology-usage-mvc-05900","technology-usage-mvc-06000","technology-usage-markup-01300","technology-usage-logging-00010","technology-usage-logging-00020","technology-usage-logging-00030","technology-usage-logging-00040","technology-usage-logging-00050","technology-usage-logging-00060","technology-usage-logging-00070","technology-usage-logging-00080","technology-usage-logging-00090","technology-usage-logging-000100","technology-usage-logging-000110","technology-usage-logging-000120","technology-usage-logging-000130","technology-usage-logging-000140","technology-usage-logging-000150","technology-usage-logging-000160","technology-usage-logging-000170","technology-usage-logging-000180","technology-usage-logging-000190","technology-usage-logging-000200","technology-usage-logging-000210","technology-usage-logging-000220","technology-usage-logging-000230","technology-usage-logging-000240","technology-usage-logging-000250","technology-usage-logging-000260","technology-usage-logging-000270","technology-usage-logging-000280","technology-usage-logging-000290","technology-usage-jta-00020","technology-usage-jta-00030","technology-usage-jta-00040","technology-usage-jta-00050","technology-usage-jta-00060","technology-usage-jta-00070","technology-usage-jta-00080","technology-usage-jta-00090","technology-usage-jta-00100","technology-usage-jta-00110","technology-usage-jta-00120","technology-usage-jta-00130","technology-usage-jta-00140","technology-usage-jta-00150","technology-usage-jta-00160","technology-usage-jta-00170","technology-usage-jta-00180","technology-usage-jta-00190","technology-usage-jta-00200","technology-usage-jta-00210","3rd-party-01000","3rd-party-02000","3rd-party-03000","3rd-party-04000","3rd-party-05000","3rd-party-06000","3rd-party-07000","3rd-party-08000","3rd-party-09000","3rd-party-10000","3rd-party-11000","3rd-party-12000","3rd-party-13000","3rd-party-14000","3rd-party-15000","3rd-party-16000","3rd-party-17000","3rd-party-18000","3rd-party-19000","clustering-00000","clustering-00001","configuration-management-0100","configuration-management-0200","configuration-management-0300","configuration-management-0400","configuration-management-0500","connect-01400","connect-01500","connect-01600","connect-01700","connect-01800","connect-01900","connect-02000","connect-02100","connect-02200","connect-02300","connect-02400","connect-02500","connect-02600","connect-02700","connect-02800","database-01400","database-01500","database-01600","database-01700","database-01800","database-01900","database-02000","database-02100","database-02200","database-02300","database-02400","database-02500","database-02600","database-02700","database-02800","database-02900","database-03100","database-03200","ejb-01000","javase-technology-usage-01000","embedded-framework-01000","embedded-framework-01010","embedded-framework-01100","embedded-framework-01200","embedded-framework-01300","embedded-framework-01400","embedded-framework-01500","embedded-framework-01600","embedded-framework-01700","embedded-framework-02000","embedded-framework-02200","embedded-framework-02300","embedded-framework-02400","embedded-framework-03000","embedded-framework-03100","embedded-framework-03200","embedded-framework-03300","embedded-framework-03400","embedded-framework-04700","embedded-framework-05000","embedded-framework-05100","embedded-framework-05300","embedded-framework-05400","embedded-framework-05500","embedded-framework-05600","embedded-framework-05700","embedded-framework-05800","embedded-framework-05900","embedded-framework-06000","embedded-framework-06100","embedded-framework-06200","embedded-framework-06300","embedded-framework-06400","embedded-framework-06500","embedded-framework-06600","embedded-framework-06700","embedded-framework-06800","embedded-framework-06900","embedded-framework-07000","embedded-framework-07100","embedded-framework-07200","embedded-framework-07300","embedded-framework-07400","embedded-framework-07500","embedded-framework-07600","embedded-framework-07700","embedded-framework-07800","embedded-framework-07900","embedded-framework-08000","embedded-framework-08100","embedded-framework-08200","embedded-framework-08300","embedded-framework-08400","embedded-framework-08500","embedded-framework-08600","embedded-framework-08700","embedded-framework-08800","embedded-framework-08900","embedded-framework-09100","embedded-framework-09000","embedded-framework-09200","embedded-framework-09300","integration-00001","integration-00002","integration-00003","integration-00004","integration-00005","integration-00006","integration-00007","integration-00008","integration-00009","integration-00010","integration-00011","integration-00012","integration-00013","integration-00014","integration-00015","integration-00016","integration-00017","javase-01000","javase-01100","jta-00020","jta-00030","jta-00040","jta-00050","jta-00060","jta-00070","jta-00080","jta-00090","jta-00100","jta-00110","jta-00120","jta-00130","jta-00140","jta-00150","jta-00160","jta-00170","jta-00180","jta-00190","jta-00200","jta-00210","javaee-technology-usage-00010","javaee-technology-usage-00012","javaee-technology-usage-00020-jakarta","javaee-technology-usage-00030","javaee-technology-usage-00031","javaee-technology-usage-00040","javaee-technology-usage-00050","javaee-technology-usage-00060","javaee-technology-usage-00070","javaee-technology-usage-00080","javaee-technology-usage-00090","javaee-technology-usage-00100","javaee-technology-usage-00120","javaee-technology-usage-00130","javaee-technology-usage-00140","javaee-technology-usage-00150","javaee-technology-usage-00160","javaee-technology-usage-00170","javaee-technology-usage-00180","javaee-technology-usage-00190","javaee-technology-usage-00200","javaee-technology-usage-00220","javaee-technology-usage-00230","javaee-technology-usage-00902","javaee-technology-usage-00903","javaee-technology-usage-00905","javaee-technology-usage-00906","javaee-technology-usage-00910","javaee-technology-usage-00911","javaee-technology-usage-00912","javaee-technology-usage-00913","javaee-technology-usage-00914","javaee-technology-usage-00915","javaee-technology-usage-00916","javaee-technology-usage-00917","javaee-technology-usage-00918","javaee-technology-usage-00926","javaee-technology-usage-00928","javaee-technology-usage-00930","javaee-technology-usage-00931","javaee-technology-usage-00932","javaee-technology-usage-00950","javaee-technology-usage-00951","javaee-technology-usage-00952","javaee-technology-usage-00953","javaee-technology-usage-00954","javaee-technology-usage-00955","javaee-technology-usage-00956","javaee-technology-usage-00958","logging-usage-00010","logging-usage-00020","logging-usage-00030","logging-usage-00040","logging-usage-00050","logging-usage-00080","logging-usage-00090","logging-usage-00100","logging-usage-00110","logging-usage-00120","logging-usage-00130","logging-usage-00140","logging-usage-00150","logging-usage-00160","logging-usage-00170","logging-usage-00180","logging-usage-00190","logging-usage-00200","logging-usage-00210","logging-usage-00220","logging-usage-00230","logging-usage-00240","logging-usage-00250","logging-usage-00260","logging-usage-00270","logging-usage-00280","logging-usage-00290","mvc-01000","mvc-01100","mvc-01200","mvc-01210","mvc-01220","mvc-01300","mvc-01400","mvc-01500","mvc-01600","mvc-01700","mvc-01800","mvc-01900","mvc-02000","mvc-02100","mvc-02200","mvc-02300","mvc-02400","mvc-02500","mvc-02600","mvc-02700","mvc-02800","mvc-02900","mvc-03000","mvc-03100","mvc-03200","mvc-03300","mvc-03400","mvc-03500","mvc-03600","mvc-03700","mvc-03800","mvc-03900","mvc-04000","mvc-04100","mvc-04200","mvc-04300","mvc-04400","mvc-04500","mvc-04600","mvc-04700","mvc-04800","mvc-04900","mvc-05000","mvc-05100","mvc-05200","mvc-05300","mvc-05400","mvc-05500","mvc-05600","mvc-05700","mvc-05800","mvc-05900","mvc-06000","observability-0100","observability-0200","security-01100","security-01200","security-01300","security-01400","security-01500","security-01600","security-01700","security-01800","security-01900","security-02000","security-02100","security-02200","security-02300","security-02400","security-02500","security-02600","security-02700","security-02800","security-02900","security-03000","security-03100","security-03200","security-03300","security-03400","security-03500","security-03600","spring-catchall-00001","test-frameworks-sauge-00010","test-frameworks-sauge-00020","test-frameworks-sauge-00030","test-frameworks-sauge-00040","test-frameworks-sauge-00050","test-frameworks-sauge-00060","test-frameworks-sauge-00070","test-frameworks-sauge-00080","test-frameworks-sauge-00090","test-frameworks-sauge-00100","test-frameworks-sauge-00110","test-frameworks-sauge-00120","test-frameworks-sauge-00130","test-frameworks-sauge-00140","test-frameworks-sauge-00150","test-frameworks-sauge-00160","test-frameworks-sauge-00170","test-frameworks-sauge-00180","test-frameworks-sauge-00190","test-frameworks-sauge-00200","test-frameworks-sauge-00210","test-frameworks-sauge-00220","test-frameworks-sauge-00230","test-frameworks-sauge-00240","test-frameworks-sauge-00560","test-frameworks-sauge-00260","test-frameworks-sauge-00270","test-frameworks-sauge-00280","test-frameworks-sauge-00290","test-frameworks-sauge-00300","test-frameworks-sauge-00310","test-frameworks-sauge-00320","test-frameworks-sauge-00330","test-frameworks-sauge-00340","test-frameworks-sauge-00350","test-frameworks-sauge-00360","test-frameworks-sauge-00370","technology-usage-integration-00001","technology-usage-integration-00002","technology-usage-integration-00003","technology-usage-integration-00004","technology-usage-integration-00005","technology-usage-integration-00006","technology-usage-integration-00007","technology-usage-integration-00008","technology-usage-integration-00009","technology-usage-integration-00010","technology-usage-integration-00011","technology-usage-integration-00012","technology-usage-integration-00013","technology-usage-integration-00014","technology-usage-integration-00015","technology-usage-embedded-framework-01000","technology-usage-embedded-framework-01010","technology-usage-embedded-framework-01100","technology-usage-embedded-framework-01200","technology-usage-embedded-framework-01300","technology-usage-embedded-framework-01400","technology-usage-embedded-framework-01500","technology-usage-embedded-framework-01600","technology-usage-embedded-framework-01700","technology-usage-embedded-framework-02000","technology-usage-embedded-framework-02100","technology-usage-embedded-framework-02200","technology-usage-embedded-framework-02300","technology-usage-embedded-framework-02400","embedded-framework-embedded-framework-02700","embedded-framework-embedded-framework-02800","embedded-framework-embedded-framework-02900","embedded-framework-embedded-framework-03000","embedded-framework-embedded-framework-03100","embedded-framework-embedded-framework-03200","embedded-framework-embedded-framework-03300","embedded-framework-embedded-framework-03400","embedded-framework-embedded-framework-03500","embedded-framework-embedded-framework-03600","embedded-framework-embedded-framework-03700","embedded-framework-embedded-framework-03800","embedded-framework-embedded-framework-03900","embedded-framework-embedded-framework-04000","embedded-framework-embedded-framework-04100","embedded-framework-embedded-framework-04200","embedded-framework-embedded-framework-04300","embedded-framework-embedded-framework-04400","embedded-framework-embedded-framework-04500","embedded-framework-embedded-framework-04600","technology-usage-embedded-framework-04700","technology-usage-embedded-framework-05000","technology-usage-embedded-framework-05100","technology-usage-embedded-framework-05300","technology-usage-embedded-framework-05400","technology-usage-embedded-framework-05600","technology-usage-embedded-framework-05700","technology-usage-embedded-framework-05800","technology-usage-embedded-framework-05900","technology-usage-embedded-framework-06000","technology-usage-embedded-framework-06100","technology-usage-embedded-framework-06200","technology-usage-embedded-framework-06300","technology-usage-embedded-framework-06400","technology-usage-embedded-framework-06500","technology-usage-embedded-framework-06600","technology-usage-embedded-framework-06700","technology-usage-embedded-framework-06800","technology-usage-embedded-framework-06900","technology-usage-embedded-framework-07000","technology-usage-embedded-framework-07100","technology-usage-embedded-framework-07200","technology-usage-embedded-framework-07300","technology-usage-embedded-framework-07400","technology-usage-embedded-framework-07500","technology-usage-embedded-framework-07600","technology-usage-embedded-framework-07700","technology-usage-embedded-framework-07800","technology-usage-embedded-framework-07900","technology-usage-embedded-framework-08000","technology-usage-embedded-framework-08100","technology-usage-embedded-framework-08200","technology-usage-embedded-framework-08300","technology-usage-embedded-framework-08400","technology-usage-embedded-framework-08500","technology-usage-embedded-framework-08600","technology-usage-embedded-framework-08700","technology-usage-embedded-framework-08800","technology-usage-embedded-framework-08900","technology-usage-embedded-framework-09000","technology-usage-embedded-framework-09100","embedded-framework-embedded-framework-09200","embedded-framework-embedded-framework-09300","technology-usage-ejb-01400","technology-usage-database-01400","technology-usage-database-01500","technology-usage-database-01600","technology-usage-database-01700","technology-usage-database-01800","technology-usage-database-01900","technology-usage-database-02000","technology-usage-database-02100","technology-usage-database-02200","technology-usage-database-02300","technology-usage-database-02400","technology-usage-database-02500","technology-usage-database-02600","technology-usage-database-02700","technology-usage-database-02800","technology-usage-database-02900","technology-usage-database-03100","technology-usage-database-03200","technology-usage-connect-01100","technology-usage-connect-01101","technology-usage-connect-01200","technology-usage-connect-01300","technology-usage-connect-01400","technology-usage-connect-01500","technology-usage-connect-01600","technology-usage-connect-01700","technology-usage-connect-01800","technology-usage-connect-01900","technology-usage-connect-02000","technology-usage-connect-02100","technology-usage-connect-02200","technology-usage-connect-02300","technology-usage-connect-02400","technology-usage-connect-02500","technology-usage-connect-02600","technology-usage-connect-02700","technology-usage-connect-02800","configuration-management-technology-usage-0100","configuration-management-technology-usage-0200","configuration-management-technology-usage-0300","technology-usage-clustering-01000","technology-usage-clustering-02000","technology-usage-3rd-party-01000","technology-usage-3rd-party-02000","technology-usage-3rd-party-03000","technology-usage-3rd-party-04000","technology-usage-3rd-party-05000","technology-usage-3rd-party-06000","technology-usage-3rd-party-08000","technology-usage-3rd-party-09000","technology-usage-3rd-party-10000","technology-usage-3rd-party-11000","technology-usage-3rd-party-12000","technology-usage-3rd-party-13000","technology-usage-3rd-party-14000","technology-usage-3rd-party-15000","technology-usage-3rd-party-16000","technology-usage-3rd-party-17000","technology-usage-3rd-party-18000","technology-usage-3rd-party-19000","technology-usage-3rd-party-20000"]}],"depItems":[{"fileURI":"file:///opt/input/source/pom.xml","provider":"java","dependencies":[]}]}]
