{"version":3,"file":"static/js/696.bf12da5b.chunk.js","mappings":"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","sources":["shared/components/conditional-render/conditional-render.tsx","shared/components/simple-select/simple-select.tsx","shared/components/dependencies-table/dependencies-table.tsx","shared/components/simple-markdown/simple-markdown.tsx","shared/components/file-editor/file-editor.tsx","shared/components/simple-table-with-toolbar/simple-pagination.tsx","shared/components/simple-table-with-toolbar/simple-state-error.tsx","shared/components/simple-table-with-toolbar/simple-state-no-data.tsx","shared/components/simple-table-with-toolbar/simple-state-no-results.tsx","shared/components/simple-table-with-toolbar/simple-table.tsx","shared/components/simple-table-with-toolbar/simple-table-with-toolbar.tsx","shared/components/violations-table/components/issue-overview.tsx","shared/components/violations-table/violations-table.tsx","shared/hooks/useModal/useModal.ts","shared/hooks/useTable/useTable.ts","shared/hooks/useTableControls/useTableControls.ts","shared/hooks/useToolbar/useToolbar.ts","shared/hooks/useCellSelectionState/useCellSelectionState.ts","utils/utils.ts"],"sourcesContent":["import React from 'react';\n\nexport interface ConditionalRenderProps {\n  when: boolean;\n  then: any;\n  children: any;\n}\n\nexport const ConditionalRender: React.FC<ConditionalRenderProps> = ({ when, then, children }) => {\n  return when ? then : children || <></>;\n};\n","import React, { useState } from 'react';\n\nimport {\n  Select,\n  SelectOption,\n  SelectOptionObject,\n  SelectOptionProps,\n  SelectProps,\n} from '@patternfly/react-core';\n\nexport interface OptionWithValue<T = string> extends SelectOptionObject {\n  value: T;\n  props?: Partial<SelectOptionProps>; // Extra props for <SelectOption>, e.g. children, className\n}\n\ntype OptionLike = string | SelectOptionObject | OptionWithValue;\n\nexport interface ISimpleSelectProps\n  extends Omit<\n    SelectProps,\n    'onChange' | 'isOpen' | 'onToggle' | 'onSelect' | 'selections' | 'value'\n  > {\n  'aria-label': string;\n  onChange: (selection: OptionLike) => void;\n  options: OptionLike[];\n  value?: OptionLike | OptionLike[];\n}\n\nexport const SimpleSelect: React.FC<ISimpleSelectProps> = ({\n  onChange,\n  options,\n  value,\n  placeholderText = 'Select...',\n\n  ...props\n}) => {\n  const [isOpen, setIsOpen] = useState(false);\n\n  return (\n    <Select\n      placeholderText={placeholderText}\n      isOpen={isOpen}\n      onToggle={setIsOpen}\n      onSelect={(_, selection: OptionLike) => {\n        onChange(selection);\n        if (props.variant !== 'checkbox') {\n          setIsOpen(false);\n        }\n      }}\n      selections={value}\n      {...props}\n    >\n      {options.map((option, index) => (\n        <SelectOption\n          key={`${index}-${option.toString()}`}\n          value={option}\n          {...(typeof option === 'object' && (option as OptionWithValue).props)}\n        />\n      ))}\n    </Select>\n  );\n};\n","import React, { useMemo, useState, useEffect, useCallback } from \"react\";\n\n\nimport { useSelectionState } from \"@migtools/lib-ui\";\nimport {\n  Bullseye,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Label,\n  Split,\n  SplitItem,\n  SelectVariant,\n  SearchInput,\n  Title,\n  ToolbarItem,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarFilter,\n  ToolbarGroup,\n} from \"@patternfly/react-core\";\nimport ArrowUpIcon from \"@patternfly/react-icons/dist/esm/icons/arrow-up-icon\";\nimport {\n  IAction,\n  ICell,\n  IRow,\n  IRowData,\n  cellWidth,\n  sortable,\n  truncate,\n} from \"@patternfly/react-table\";\nimport { useDebounce } from \"usehooks-ts\";\n\n\nimport { DependencyDto } from \"@app/api/report\";\nimport { ALL_APPLICATIONS_ID } from \"@app/Constants\";\nimport { useAllApplications } from \"@app/queries/report\";\nimport { SimpleTableWithToolbar, SimpleSelect, OptionWithValue } from \"@app/shared/components\";\nimport { useTable, useTableControls, useToolbar } from \"@app/shared/hooks\";\n\nconst areDependenciesEquals = (a: DependencyDto, b: DependencyDto) => {\n  return a.name === b.name && a.version === b.version && a.resolvedIdentifier === b.resolvedIdentifier;\n};\n\nconst DataKey = \"DataKey\";\n\nconst columns: ICell[] = [\n  {\n    title: \"Name\",\n    transforms: [cellWidth(50), sortable],\n    cellTransforms: [truncate],\n  },\n  {\n    title: \"Labels\",\n    transforms: [cellWidth(30)],\n  },\n  {\n    title: \"Version\",\n    transforms: [cellWidth(10)],\n    cellTransforms: [truncate],\n  },\n  {\n    title: \"Relation\",\n    transforms: [cellWidth(10), sortable],\n    cellTransforms: [truncate],\n  },\n];\n\nconst compareToByColumn = (\n  a: DependencyDto,\n  b: DependencyDto,\n  columnIndex?: number\n) => {\n  switch (columnIndex) {\n    case 1: // name\n      return a.name.localeCompare(b.name);\n    case 3: // version\n      return a.version === b.version ? 0 : 1\n    case 4: // indirect\n      return a.indirect === b.indirect ? 0 : 1\n    default:\n      return 0;\n  }\n};\n\nconst toOption = (option: string | ToolbarChip): OptionWithValue => {\n  if (typeof option === \"string\") {\n    const toStringFn = () => option;\n    return {\n      value: option,\n      toString: toStringFn,\n      compareTo: (other: string | OptionWithValue) => {\n        return typeof other === \"string\"\n          ? toStringFn().toLowerCase().includes(other.toLocaleLowerCase())\n          : option === other.value;\n      },\n    };\n  } else {\n    const toStringFn = () => option.node as string;\n    return {\n      value: option.key,\n      toString: toStringFn,\n      compareTo: (other: string | OptionWithValue) => {\n        return typeof other === \"string\"\n          ? toStringFn().toLowerCase().includes(other.toLowerCase())\n          : option.key === other.value;\n      },\n    };\n  }\n};\n\nconst toToolbarChip = (option: OptionWithValue): ToolbarChip => {\n  return {\n    key: option.value,\n    node: option.toString(),\n  };\n};\n\nconst getRow = (rowData: IRowData): DependencyDto => {\n  return rowData[DataKey];\n};\n\nexport interface IDependenciesTableProps {\n  applicationId?: string;\n}\n\nexport const DependenciesTable: React.FC<IDependenciesTableProps> = ({\n  applicationId,\n}) => {\n  const allApplicationsQuery = useAllApplications();\n\n  // Filters\n  const [filterText, setFilterText] = useState(\"\");\n  const { filters, setFilter, removeFilter, clearAllFilters } = useToolbar<\n    \"labels\" | \"relationship\",\n    ToolbarChip\n  >();\n\n  const debouncedFilterText = useDebounce<string>(filterText, 250);\n  const debouncedFilters = useDebounce<\n    Map<\n      \"labels\" | \"relationship\",\n      ToolbarChip[]\n    >\n  >(filters, 100);\n\n  const dependencies = useMemo(() => {\n    if (\n      !allApplicationsQuery.data ||\n      applicationId === undefined\n    ) {\n      return [];\n    }\n    return (\n      applicationId === ALL_APPLICATIONS_ID ? \n      allApplicationsQuery.data?.flatMap((a) => a.dependencies || []) : \n      allApplicationsQuery.data?.find((f) => f.id === applicationId)?.dependencies || []\n    );\n  }, [allApplicationsQuery.data, applicationId]);\n\n  const allLabels: string[] = useMemo(() => {\n    return Array.from(new Set(dependencies?.flatMap((d) => d.labels)))\n  }, [dependencies])\n\n  // Rows\n  const {\n    toggleItemSelected: toggleRowExpanded,\n  } = useSelectionState<DependencyDto>({\n    items: dependencies,\n    isEqual: areDependenciesEquals,\n  });\n\n  const {\n    page: currentPage,\n    sortBy: currentSortBy,\n    changePage: onPageChange,\n    changeSortBy: onChangeSortBy,\n  } = useTableControls();\n\n  const filterItem = useCallback(\n    (item: DependencyDto) => {\n      let isFilterTextFilterCompliant = true;\n      if (debouncedFilterText && debouncedFilterText.trim().length > 0) {\n        isFilterTextFilterCompliant =\n          item.name.toLowerCase().indexOf(debouncedFilterText.toLowerCase()) !==\n          -1;\n      }\n\n      let isLabelFilterCompliant = true;\n      const selectedLabels = debouncedFilters.get(\"labels\") || [];\n      if (selectedLabels.length > 0) {\n        isLabelFilterCompliant = selectedLabels.some(\n          (f) => item.labels?.includes(f.key)\n        );\n      }\n\n      let isRelationshipFilterCompliant = true;\n      const selectedRelation = debouncedFilters.get(\"relationship\") || [];\n      if (selectedRelation.length > 0) {\n        isLabelFilterCompliant = selectedRelation.some(\n          (f) => (f.key === \"Direct\" && !item.indirect) || (f.key === \"Indirect\" && item.indirect)\n        );\n      }\n\n      return (\n        isFilterTextFilterCompliant &&\n        isLabelFilterCompliant &&\n        isRelationshipFilterCompliant\n      );\n    },\n    [debouncedFilterText, debouncedFilters]\n  );\n\n  const { pageItems, filteredItems } = useTable<DependencyDto>({\n    items: dependencies,\n    currentPage,\n    currentSortBy,\n    compareToByColumn,\n    filterItem,\n  });\n\n  const itemsToRow = (items: DependencyDto[]) => {\n    const rows: IRow[] = [];\n    items.forEach((item) => {\n      rows.push({\n        [DataKey]: item,\n        cells: [\n          {\n            title: item.name,\n          },\n          {\n            title: (\n              <>\n                <Split hasGutter>\n                  {item.labels?.map((label, index) => (\n                    <SplitItem key={index}>\n                      <Label isCompact color=\"blue\">\n                        {label.replace(\"konveyor.io/source=\", \"\")}\n                      </Label>\n                    </SplitItem>\n                  ))}\n                </Split>\n              </>\n            ),\n          },\n          {\n            title: item.version,\n          },\n          {\n            title: item.indirect ? \"Indirect\" : \"Direct\",\n          },\n        ],\n      });\n    });\n\n    return rows;\n  };\n\n  const rows: IRow[] = itemsToRow(pageItems);\n  const actions: IAction[] = [];\n\n  // Reset pagination when application change\n  useEffect(() => {\n    onPageChange({ page: 1, perPage: currentPage.perPage });\n  }, [applicationId, onPageChange, currentPage.perPage]);\n\n  return (\n    <>\n      {applicationId === undefined ? (\n        <Bullseye>\n          <EmptyState>\n            <EmptyStateIcon icon={ArrowUpIcon} />\n            <Title headingLevel=\"h4\" size=\"lg\">\n              Select an application\n            </Title>\n            <EmptyStateBody>\n              Select an application whose data you want to get access to.\n            </EmptyStateBody>\n          </EmptyState>\n        </Bullseye>\n      ) : (\n        <SimpleTableWithToolbar\n          hasTopPagination\n          hasBottomPagination\n          totalCount={filteredItems.length}\n          // Expand\n          onCollapse={(_event, _rowIndex, _isOpen, rowData) => {\n            const issue = getRow(rowData);\n            toggleRowExpanded(issue);\n          }}\n          // Sorting\n          sortBy={\n            currentSortBy || { index: undefined, defaultDirection: \"asc\" }\n          }\n          onSort={onChangeSortBy}\n          // Pagination\n          currentPage={currentPage}\n          onPageChange={onPageChange}\n          // Table\n          rows={rows}\n          cells={columns}\n          actions={actions}\n          // Fech data\n          isLoading={allApplicationsQuery.isFetching}\n          loadingVariant=\"skeleton\"\n          fetchError={allApplicationsQuery.isError}\n          // Toolbar filters\n          filtersApplied={filterText.trim().length > 0}\n          toolbarClearAllFilters={clearAllFilters}\n          toolbarToggle={\n            <>\n              <ToolbarItem variant=\"search-filter\">\n                <SearchInput\n                  value={filterText}\n                  onChange={setFilterText}\n                  onClear={() => setFilterText(\"\")}\n                />\n              </ToolbarItem>\n              <ToolbarGroup variant=\"filter-group\">\n                  <ToolbarFilter\n                    chips={filters.get(\"labels\")}\n                    deleteChip={(\n                      category: string | ToolbarChipGroup,\n                      chip: ToolbarChip | string\n                    ) => removeFilter(\"labels\", chip)}\n                    deleteChipGroup={() => setFilter(\"labels\", [])}\n                    categoryName={{ key: \"labels\", name: \"Labels\" }}\n                  >\n                    <SimpleSelect\n                      maxHeight={300}\n                      variant={SelectVariant.checkbox}\n                      aria-label=\"labels\"\n                      aria-labelledby=\"labels\"\n                      placeholderText=\"Labels\"\n                      value={filters.get(\"labels\")?.map(toOption)}\n                      options={allLabels.map(toOption)}\n                      onChange={(option) => {\n                        const optionValue = option as OptionWithValue<string>;\n\n                        const elementExists = (\n                          filters.get(\"labels\") || []\n                        ).some((f) => f.key === optionValue.value);\n                        let newElements: ToolbarChip[];\n                        if (elementExists) {\n                          newElements = (filters.get(\"labels\") || []).filter(\n                            (f) => f.key !== optionValue.value\n                          );\n                        } else {\n                          newElements = [\n                            ...(filters.get(\"labels\") || []),\n                            toToolbarChip(optionValue),\n                          ];\n                        }\n\n                        setFilter(\"labels\", newElements);\n                      }}\n                      hasInlineFilter\n                      onClear={() => setFilter(\"labels\", [])}\n                    />\n                  </ToolbarFilter>\n                </ToolbarGroup>\n                <ToolbarGroup variant=\"filter-group\">\n                  <ToolbarFilter\n                    chips={filters.get(\"relationship\")}\n                    deleteChip={(\n                      category: string | ToolbarChipGroup,\n                      chip: ToolbarChip | string\n                    ) => removeFilter(\"relationship\", chip)}\n                    deleteChipGroup={() => setFilter(\"relationship\", [])}\n                    categoryName={{ key: \"relationship\", name: \"Relation\" }}\n                  >\n                    <SimpleSelect\n                      maxHeight={300}\n                      variant={SelectVariant.checkbox}\n                      aria-label=\"relationship\"\n                      aria-labelledby=\"relationship\"\n                      placeholderText=\"Relation\"\n                      value={filters.get(\"relationship\")?.map(toOption)}\n                      options={[\"Direct\", \"Indirect\"].map(toOption)}\n                      onChange={(option) => {\n                        const optionValue = option as OptionWithValue<string>;\n\n                        const elementExists = (\n                          filters.get(\"relationship\") || []\n                        ).some((f) => f.key === optionValue.value);\n                        let newElements: ToolbarChip[];\n                        if (elementExists) {\n                          newElements = (filters.get(\"relationship\") || []).filter(\n                            (f) => f.key !== optionValue.value\n                          );\n                        } else {\n                          newElements = [\n                            ...(filters.get(\"relationship\") || []),\n                            toToolbarChip(optionValue),\n                          ];\n                        }\n\n                        setFilter(\"relationship\", newElements);\n                      }}\n                      hasInlineFilter\n                      onClear={() => setFilter(\"relationship\", [])}\n                    />\n                  </ToolbarFilter>\n                </ToolbarGroup>\n            </>\n          }\n        />\n      )}\n    </>\n  );\n};\n","import React from \"react\";import ReactMarkdown from \"react-markdown\";\n\nimport { ReactMarkdownOptions } from \"react-markdown/lib/react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport \"github-markdown-css/github-markdown-light.css\";\n\ninterface ISimpleMarkdownProps extends ReactMarkdownOptions {}\n\nexport const SimpleMarkdown: React.FC<ISimpleMarkdownProps> = ({ ...rest }) => {\n  return (\n    <ReactMarkdown\n      className=\"markdown-body\"\n      remarkPlugins={[remarkGfm]}\n      linkTarget=\"_blank\"\n      {...rest}\n    />\n  );\n};\n","import React, { useEffect, useRef, useState } from \"react\";\n\nimport {\n  Card,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  Drawer,\n  DrawerContent,\n  DrawerContentBody,\n  DrawerHead,\n  DrawerPanelContent,\n  Text,\n  TextContent,\n} from \"@patternfly/react-core\";\n\nimport {\n  CodeEditor,\n  CodeEditorProps,\n  Language,\n} from \"@patternfly/react-code-editor\";\n\nimport * as monacoEditor from \"monaco-editor/esm/vs/editor/editor.api\";\n\nimport { LinkDto } from \"@app/api/report\";\nimport { ConditionalRender, SimpleMarkdown } from \"@app/shared/components\";\nimport { getMarkdown } from \"@app/utils/utils\";\nimport { IssueProcessed } from \"@app/models/api-enriched\";\nimport { IncidentCoordinates } from \"@app/models/file\";\n\nconst codeLineRegex = /^\\s*([0-9]+)( {2})?(.*)$/;\n\ninterface IFileEditorProps {\n  name: string;\n  displayName: string;\n  codeSnip: string;\n  isLoading: boolean;\n  incidents: IncidentCoordinates[];\n  issue: IssueProcessed;\n  props?: Partial<\n    Omit<CodeEditorProps, \"ref\" | \"code\" | \"options\" | \"onEditorDidMount\">\n  >;\n}\n\nexport const FileEditor: React.FC<IFileEditorProps> = ({\n  name, \n  displayName,\n  codeSnip,\n  isLoading,\n  incidents,\n  issue,\n  props,\n}) => {\n  let absoluteToRelativeLineNum = (lineNum: number) => lineNum;\n  let relativeToAbsoluteLineNum = (lineNum: number) => lineNum;\n  const codeSnipNumberedLines = codeSnip.split(\"\\n\");\n  const codeSnipTrimmedLines: string[] = [];\n  let codeSnipStartLine = 1;\n  codeSnipNumberedLines.forEach((numberedLine, index) => {\n    const match = numberedLine.match(codeLineRegex);\n    if (match && !isNaN(Number(match[1]))) {\n      const lineNum = Number(match[1]);\n      if (index === 0) codeSnipStartLine = lineNum;\n      const lineCode = match[3] || \"\";\n      codeSnipTrimmedLines.push(lineCode);\n    }\n  });\n  codeSnip = codeSnipTrimmedLines.join(\"\\n\");\n  absoluteToRelativeLineNum = (lineNum: number) => lineNum - (codeSnipStartLine - 1);\n  relativeToAbsoluteLineNum = (lineNum: number) => lineNum + (codeSnipStartLine - 1);\n\n  // Editor\n  const editorRef = useRef<monacoEditor.editor.IStandaloneCodeEditor>();\n  const monacoRef = useRef<typeof monacoEditor>();\n  useEffect(() => {\n    return () => {\n      monacoRef.current?.editor.getModels().forEach((model) => model.dispose());\n      editorRef.current?.dispose();\n    };\n  }, [editorRef, monacoRef]);\n\n  // Disposables\n  const [disposables, setDisposables] = useState<monacoEditor.IDisposable[]>(\n    []\n  );\n  useEffect(() => {\n    return () => {\n      disposables.forEach((disposable) => disposable && disposable.dispose());\n    };\n  }, [disposables]);\n\n  // const drawerRef = React.useRef<any>();\n  // const [isDrawerExpanded, setIsDrawerExpanded] = useState(\n  //   incidents ? true : false\n  // );\n  // const onDrawerExpand = () => {\n  //   drawerRef.current && drawerRef.current.focus();\n  // };\n\n  const fileExtension = name?.split('.')?.pop();\n\n  /**\n   * Adds a hover text to the hint line\n   */\n  const addHover = (\n    monaco: typeof monacoEditor,\n    incidents: IncidentCoordinates[],\n    links: LinkDto[]\n  ) => {\n    return incidents.map((inc) => {\n      return monaco.languages.registerHoverProvider(\"*\", {\n        provideHover: (model, position) => {\n          if (position.lineNumber !== inc.lineNumber) {\n            return undefined;\n          }\n\n          return {\n            range: new monaco.Range(inc.lineNumber!, 1, inc.lineNumber!, 1),\n            contents: [\n              {\n                value: getMarkdown(inc.message, links),\n              },\n            ],\n          };\n        },\n      });\n    });\n  };\n\n  /**\n   * Underlines the hint line\n   */\n  const addMarkers = (\n    monaco: typeof monacoEditor,\n    incidents: IncidentCoordinates[]\n  ) => {\n    const markers = incidents\n      .filter((inc) => inc.lineNumber && inc.lineNumber !== 0)\n      ?.map((inc) => {\n        const marker: monacoEditor.editor.IMarkerData = {\n          startLineNumber: absoluteToRelativeLineNum(inc.lineNumber),\n          endLineNumber: absoluteToRelativeLineNum(inc.lineNumber), \n          startColumn: 0,\n          endColumn: 1000,\n          message: issue.description,\n          severity: monaco.MarkerSeverity.Warning,\n        }\n        return marker\n      })\n\n    const model = monaco.editor.getModels()[0];\n    monaco.editor.setModelMarkers(model, \"*\", markers);\n  };\n\n  const onEditorDidMount = (\n    editor: monacoEditor.editor.IStandaloneCodeEditor,\n    monaco: typeof monacoEditor\n  ) => {\n    editor.layout();\n    editor.focus();\n    monaco.editor.getModels()[0].updateOptions({ tabSize: 5 });\n\n    let newDisposables: monacoEditor.IDisposable[] = [];\n\n    // Add markers\n    addMarkers(monaco, incidents);\n\n    // Add hovers\n    const hovers = addHover(monaco, incidents, issue.links);\n    newDisposables = newDisposables.concat(hovers);\n\n    setDisposables(newDisposables);\n\n    editorRef.current = editor;\n    monacoRef.current = monaco;\n  };\n\n  return (\n    <Drawer isExpanded={true} isInline>\n      <DrawerContent\n        panelContent={\n          <DrawerPanelContent\n            isResizable\n          >\n            <DrawerHead>\n              <Card isLarge>\n                <CardHeader>\n                  <CardTitle>\n                    <TextContent>\n                      <Text component=\"h1\">{issue.name}</Text>\n                    </TextContent>\n                    <TextContent>\n                      <Text component=\"small\">{issue.ruleID}</Text>\n                    </TextContent>\n                  </CardTitle>\n                </CardHeader>\n                <CardBody>\n                  {issue.description && (\n                    <SimpleMarkdown\n                      children={getMarkdown(\n                        issue.description,\n                        issue.links,\n                      )}\n                    />\n                  )}\n                </CardBody>\n              </Card>\n            </DrawerHead>\n          </DrawerPanelContent>\n        }\n      >\n        <DrawerContentBody>\n          <ConditionalRender\n            when={isLoading}\n            then={<span>Loading...</span>}\n          >\n            <CodeEditor\n              isDarkTheme\n              isLineNumbersVisible\n              isReadOnly={true}\n              isMinimapVisible\n              isLanguageLabelVisible\n              isDownloadEnabled={false}\n              title={displayName}\n              code={codeSnip ? codeSnip : \"\"}\n              language={Object.values(Language).find(\n                (l) => l === fileExtension?.toLowerCase()\n              )}\n              options={{\n                glyphMargin: true,\n                \"semanticHighlighting.enabled\": true,\n                renderValidationDecorations: \"on\",\n                lineNumbers: (lineNum: number) => \n                  String(relativeToAbsoluteLineNum(lineNum))\n              }}\n              onEditorDidMount={(\n                editor: monacoEditor.editor.IStandaloneCodeEditor,\n                monaco: typeof monacoEditor\n              ) => {\n                onEditorDidMount(editor, monaco);\n              }}\n              height={`${window.innerHeight - 300}px`}\n              {...props}\n            />\n          </ConditionalRender>\n        </DrawerContentBody>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n","import React from 'react';\n\nimport { Pagination, PaginationVariant, ToggleTemplate } from '@patternfly/react-core';\n\nexport interface ISimplePaginationProps {\n  count: number;\n  params: {\n    perPage?: number;\n    page?: number;\n  };\n\n  isTop?: boolean;\n  isCompact?: boolean;\n  perPageOptions?: number[];\n  onChange: ({ page, perPage }: { page: number; perPage: number }) => void;\n}\n\nexport const SimplePagination: React.FC<ISimplePaginationProps> = ({\n  count,\n  params,\n  isTop,\n  isCompact,\n  perPageOptions,\n  onChange,\n}) => {\n  const mapPerPageOptions = (options: number[]) => {\n    return options.map((option) => ({\n      title: String(option),\n      value: option,\n    }));\n  };\n\n  const getPerPage = () => {\n    return params.perPage || 10;\n  };\n\n  return (\n    <Pagination\n      itemCount={count}\n      page={params.page || 1}\n      perPage={getPerPage()}\n      onPageInput={(_, page) => {\n        onChange({ page, perPage: getPerPage() });\n      }}\n      onSetPage={(_, page) => {\n        onChange({ page, perPage: getPerPage() });\n      }}\n      onPerPageSelect={(_, perPage) => {\n        onChange({ page: 1, perPage });\n      }}\n      isCompact={isTop || isCompact}\n      widgetId=\"pagination-options-menu\"\n      variant={isTop ? PaginationVariant.top : PaginationVariant.bottom}\n      perPageOptions={mapPerPageOptions(perPageOptions || [10, 20, 50, 100])}\n      toggleTemplate={(props) => <ToggleTemplate {...props} />}\n    />\n  );\n};\n","import React from 'react';\n\nimport {\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport ExclamationCircleIcon from \"@patternfly/react-icons/dist/esm/icons/exclamation-circle-icon\";\nimport { global_danger_color_200 as globalDangerColor200 } from '@patternfly/react-tokens';\n\nexport const SimpleStateError: React.FC = () => {\n  return (\n    <EmptyState variant={EmptyStateVariant.small}>\n      <EmptyStateIcon icon={ExclamationCircleIcon} color={globalDangerColor200.value} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        Unable to connect\n      </Title>\n      <EmptyStateBody>\n        There was an error retrieving data. Check your connection and try again.\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import React from \"react\";\n\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport CubesIcon from \"@patternfly/react-icons/dist/esm/icons/cubes-icon\";\n\nexport const SimpleStateNoData: React.FC = () => {\n  return (\n    <EmptyState variant={EmptyStateVariant.small}>\n      <EmptyStateIcon icon={CubesIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        No data available\n      </Title>\n      <EmptyStateBody>No data available to be shown here.</EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import React from \"react\";\n\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  Title,\n} from \"@patternfly/react-core\";\nimport SearchIcon from \"@patternfly/react-icons/dist/esm/icons/search-icon\";\n\nexport const SimpleStateNoResults: React.FC = () => {\n  return (\n    <EmptyState variant={EmptyStateVariant.small}>\n      <EmptyStateIcon icon={SearchIcon} />\n      <Title headingLevel=\"h2\" size=\"lg\">\n        No results found\n      </Title>\n      <EmptyStateBody>\n        No results match the filter criteria. Remove all filters or clear all\n        filters to show results.\n      </EmptyStateBody>\n    </EmptyState>\n  );\n};\n","import React from 'react';\n\nimport { Bullseye, Spinner, Skeleton } from '@patternfly/react-core';\nimport { Table, TableHeader, TableBody, IRow, TableProps } from '@patternfly/react-table';\n\nimport { SimpleStateError } from './simple-state-error';\nimport { SimpleStateNoData } from './simple-state-no-data';\nimport { SimpleStateNoResults } from './simple-state-no-results';\n\nexport interface ISimpleTableProps extends TableProps {\n  isLoading: boolean;\n  loadingVariant?: 'skeleton' | 'spinner' | 'none';\n  fetchError?: any;\n\n  filtersApplied: boolean;\n  noDataState?: any;\n  noSearchResultsState?: any;\n  errorState?: any;\n}\n\nexport const SimpleTable: React.FC<ISimpleTableProps> = ({\n  cells,\n  rows,\n  'aria-label': ariaLabel = 'main-table',\n\n  isLoading,\n  fetchError,\n  loadingVariant = 'skeleton',\n\n  filtersApplied,\n  noDataState,\n  noSearchResultsState,\n  errorState,\n\n  ...rest\n}) => {\n  if (isLoading && loadingVariant !== 'none') {\n    let rows: IRow[] = [];\n    if (loadingVariant === 'skeleton') {\n      rows = [...Array(10)].map(() => {\n        return {\n          cells: [...Array(cells.length)].map(() => ({\n            title: <Skeleton />,\n          })),\n        };\n      });\n    } else if (loadingVariant === 'spinner') {\n      rows = [\n        {\n          heightAuto: true,\n          cells: [\n            {\n              props: { colSpan: 8 },\n              title: (\n                <Bullseye>\n                  <Spinner size=\"xl\" />\n                </Bullseye>\n              ),\n            },\n          ],\n        },\n      ];\n    } else {\n      throw new Error('Can not determine the loading state of table');\n    }\n\n    return (\n      <Table aria-label={ariaLabel} cells={cells} rows={rows}>\n        <TableHeader />\n        <TableBody />\n      </Table>\n    );\n  }\n\n  if (fetchError) {\n    return (\n      <>\n        <Table aria-label={ariaLabel} cells={cells} rows={[]}>\n          <TableHeader />\n          <TableBody />\n        </Table>\n        {errorState ? errorState : <SimpleStateError />}\n      </>\n    );\n  }\n\n  if (rows.length === 0) {\n    return filtersApplied ? (\n      <>\n        <Table aria-label={ariaLabel} cells={cells} rows={[]}>\n          <TableHeader />\n          <TableBody />\n        </Table>\n        {noSearchResultsState ? noSearchResultsState : <SimpleStateNoResults />}\n      </>\n    ) : (\n      <>\n        <Table aria-label={ariaLabel} cells={cells} rows={[]}>\n          <TableHeader />\n          <TableBody />\n        </Table>\n        {noDataState ? noDataState : <SimpleStateNoData />}\n      </>\n    );\n  }\n\n  return (\n    <Table aria-label={ariaLabel} cells={cells} rows={rows} {...rest}>\n      <TableHeader />\n      <TableBody />\n    </Table>\n  );\n};\n","import React from \"react\";\n\nimport {\n  Toolbar,\n  ToolbarContent,\n  ToolbarItem,\n  ToolbarItemVariant,\n  ToolbarToggleGroup,\n} from \"@patternfly/react-core\";\nimport FilterIcon from \"@patternfly/react-icons/dist/esm/icons/filter-icon\";\n\nimport { SimplePagination } from \"./simple-pagination\";\nimport { SimpleTable, ISimpleTableProps } from \"./simple-table\";\n\nexport interface ISimpleTableWithToolbarProps extends ISimpleTableProps {\n  totalCount: number;\n\n  currentPage: {\n    page?: number;\n    perPage?: number;\n  };\n  onPageChange: ({ page, perPage }: { page: number; perPage: number }) => void;\n\n  hasTopPagination?: boolean;\n  hasBottomPagination?: boolean;\n\n  toolbarBulkSelector?: any;\n  toolbarToggle?: any;\n  toolbarActions?: any;\n  toolbarClearAllFilters?: () => void;\n}\n\nexport const SimpleTableWithToolbar: React.FC<ISimpleTableWithToolbarProps> = ({\n  totalCount,\n  currentPage,\n  onPageChange,\n\n  hasTopPagination = false,\n  hasBottomPagination = false,\n\n  toolbarBulkSelector,\n  toolbarToggle,\n  toolbarActions,\n  toolbarClearAllFilters,\n\n  ...rest\n}) => {\n  return (\n    <div style={{ backgroundColor: \"var(--pf-global--BackgroundColor--100)\" }}>\n      <Toolbar\n        className=\"pf-m-toggle-group-container\"\n        collapseListedFiltersBreakpoint=\"xl\"\n        clearAllFilters={toolbarClearAllFilters}\n      >\n        <ToolbarContent>\n          {toolbarBulkSelector}\n          {toolbarToggle && (\n            <ToolbarToggleGroup toggleIcon={<FilterIcon />} breakpoint=\"xl\">\n              {toolbarToggle}\n            </ToolbarToggleGroup>\n          )}\n          {toolbarActions}\n          {hasTopPagination && (\n            <ToolbarItem\n              variant={ToolbarItemVariant.pagination}\n              alignment={{ default: \"alignRight\" }}\n            >\n              <SimplePagination\n                count={totalCount}\n                params={currentPage}\n                onChange={onPageChange}\n                isTop={true}\n              />\n            </ToolbarItem>\n          )}\n        </ToolbarContent>\n      </Toolbar>\n      <SimpleTable {...rest} />\n      {hasBottomPagination && (\n        <SimplePagination\n          count={totalCount}\n          params={currentPage}\n          onChange={onPageChange}\n        />\n      )}\n    </div>\n  );\n};\n","import React, { useState, useCallback, useMemo } from \"react\";\nimport { useDebounce } from \"usehooks-ts\";\n\nimport {\n  Button,\n  Card,\n  CardBody,\n  Grid,\n  GridItem,\n  Stack,\n  StackItem,\n  Truncate,\n  ToolbarItem,\n  SearchInput,\n  CardHeader,\n  CardTitle,\n  Text,\n  TextContent\n} from \"@patternfly/react-core\";\n\nimport {\n  ICell,\n  IRow,\n  cellWidth,\n  sortable,\n} from \"@patternfly/react-table\";\n\nimport {\n  SimpleTableWithToolbar\n} from \"@app/shared/components/simple-table-with-toolbar\"\nimport {\n  useTable,\n  useTableControls\n} from \"@app/shared/hooks\"\n\nimport { IssueProcessed } from \"@app/models/api-enriched\";\nimport { SimpleMarkdown } from \"@app/shared/components\";\nimport { getMarkdown } from \"@app/utils/utils\";\nimport { DispersedFile } from \"@app/models/file\";\nimport { useDispersedFiles } from \"@app/queries/report\";\n\ninterface IIssueOverviewProps {\n  issue: IssueProcessed;\n  onShowFile: (file: DispersedFile, issue: IssueProcessed) => void;\n}\n\nconst DataKey = \"DataKey\"\n\nconst columns: ICell[] = [\n  {\n    title: \"File\",\n    transforms: [cellWidth(80), sortable],\n    cellTransforms: [],\n  },\n  {\n    title: \"Total\",\n    transforms: [cellWidth(20), sortable],\n  },\n]\n\ninterface TableData extends DispersedFile {}\n\nexport const compareByColumnIndex = (\n  a: TableData,\n  b: TableData,\n  columnIndex?: number\n) => {\n  switch (columnIndex) {\n    case 0: // name\n      return a.name.localeCompare(b.name);\n    case 1: // count\n      return a.totalIncidents - b.totalIncidents;\n    default:\n      return 0;\n  }\n};\n\nexport const IssueOverview: React.FC<IIssueOverviewProps> = ({\n  issue,\n  onShowFile,\n}) => {\n  const [filterText, setFilterText] = useState(\"\");\n  const debouncedFilterText = useDebounce<string>(filterText, 250);\n  const dispersedFilesQuery = useDispersedFiles(issue);\n\n  const items: TableData[] = useMemo(() => \n    dispersedFilesQuery.data?.filter((f) => f.totalIncidents !== 0) || [], \n  [dispersedFilesQuery.data])\n\n  const filterItem = useCallback(\n    (item: TableData) => {\n      let isFilterTextFilterCompliant = true;\n      if (debouncedFilterText && debouncedFilterText.trim().length > 0) {\n        isFilterTextFilterCompliant =\n          item.name.toLowerCase().indexOf(debouncedFilterText.toLowerCase()) !==\n          -1;\n      }\n      return isFilterTextFilterCompliant\n    }, [debouncedFilterText]\n  );\n\n  const {\n    page: currentPage,\n    sortBy: currentSortBy,\n    changePage: onPageChange,\n    changeSortBy: onChangeSortBy,\n  } = useTableControls();\n\n  const { pageItems, filteredItems } = useTable<TableData>({\n    items,\n    filterItem,\n    currentPage: currentPage,\n    currentSortBy: currentSortBy,\n    compareToByColumn: compareByColumnIndex,\n  });\n\n  const rows: IRow[] = useMemo(() => {\n    const rows: IRow[] = [];\n    pageItems.forEach((item) => {\n      rows.push({\n        [DataKey]: item,\n        cells: [\n          {\n            title: <>\n              <FileLink\n                file={item.name}\n                defaultText={item.displayName}\n                onClick={() =>\n                  onShowFile(\n                    item,\n                    issue\n                  )\n                }/>\n            </>,\n          },\n          {\n            title: item.totalIncidents,\n          }\n        ],\n      });\n    });\n\n    return rows;\n  }, [pageItems, issue, onShowFile]);\n\n  return (\n    <Stack hasGutter>\n        <StackItem>\n          <Grid hasGutter>\n            <GridItem md={5}>\n              <SimpleTableWithToolbar\n                hasTopPagination\n                hasBottomPagination\n                currentPage={currentPage}\n                onPageChange={onPageChange}\n                sortBy={\n                  currentSortBy || { index: undefined, defaultDirection: \"asc\" }\n                }\n                onSort={onChangeSortBy}\n                totalCount={filteredItems.length}\n                filtersApplied={filterText.trim().length > 0}\n                cells={columns}\n                rows={rows}\n                isLoading={dispersedFilesQuery.isFetching || dispersedFilesQuery.isLoading}\n                toolbarToggle={\n                  <>\n                    <ToolbarItem variant=\"search-filter\">\n                      <SearchInput\n                        value={filterText}\n                        onChange={setFilterText}\n                        onClear={() => setFilterText(\"\")}\n                      />\n                    </ToolbarItem>\n                    </>\n                }\n              >\n              </SimpleTableWithToolbar>\n            </GridItem>\n            <GridItem md={7}>\n              <Card isCompact isFullHeight>\n                <CardHeader>\n                    <CardTitle>\n                    <TextContent>\n                      <>\n                        <Text component=\"h2\">{issue.ruleID}</Text>\n                      </>\n                    </TextContent>\n                    </CardTitle>\n                </CardHeader>\n                <CardBody>\n                  <SimpleMarkdown\n                    children={getMarkdown(\n                      issue.description || \"\",\n                      issue.links,\n                    )}\n                  />\n                </CardBody>\n              </Card>\n            </GridItem>\n          </Grid>\n        </StackItem>\n    </Stack>\n  );\n};\n\ninterface IFileLinkProps {\n  file: string;\n  defaultText: string;\n  onClick: () => void;\n}\n\nexport const FileLink: React.FC<IFileLinkProps> = ({\n  file,\n  defaultText,\n  onClick,\n}) => {\n  return (\n    <>\n      {file ? (\n        <Button variant=\"link\" isInline onClick={onClick}>\n          <Truncate content={defaultText || file} />\n        </Button>\n      ) : (\n        defaultText\n      )}\n    </>\n  );\n};\n","import React, { useCallback, useEffect, useMemo, useState } from \"react\";\n\nimport { useSelectionState } from \"@migtools/lib-ui\";\nimport {\n  Bullseye,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  Label,\n  Modal,\n  SearchInput,\n  SelectVariant,\n  Split,\n  SplitItem,\n  Tab,\n  Tabs,\n  Title,\n  ToolbarChip,\n  ToolbarChipGroup,\n  ToolbarFilter,\n  ToolbarGroup,\n  ToolbarItem,\n} from \"@patternfly/react-core\";\nimport ArrowUpIcon from \"@patternfly/react-icons/dist/esm/icons/arrow-up-icon\";\nimport {\n  ICell,\n  IRow,\n  IRowData,\n  cellWidth,\n  sortable,\n  truncate,\n  wrappable,\n} from \"@patternfly/react-table\";\nimport { useDebounce } from \"usehooks-ts\";\n\nimport { compareByCategoryFn } from \"@app/models/api-enriched\";\nimport { ALL_APPLICATIONS_ID } from \"@app/Constants\";\nimport { IssueProcessed } from \"@app/models/api-enriched\";\nimport { useAllApplications, useCodeSnip } from \"@app/queries/report\";\nimport {\n  SimpleTableWithToolbar,\n  SimpleSelect,\n  OptionWithValue,\n  FileEditor,\n} from \"@app/shared/components\";\nimport {\n  useModal,\n  useTable,\n  useTableControls,\n  useToolbar,\n} from \"@app/shared/hooks\";\n\nimport { IssueOverview } from \"./components/issue-overview\";\nimport { DispersedFile } from \"@app/models/file\";\n\nexport interface TableData extends IssueProcessed {}\n\nconst areRowsEquals = (a: TableData, b: TableData) => {\n  return a.id === b.id;\n};\n\nconst toOption = (option: string | ToolbarChip): OptionWithValue => {\n  if (typeof option === \"string\") {\n    const toStringFn = () => option;\n    return {\n      value: option,\n      toString: toStringFn,\n      compareTo: (other: string | OptionWithValue) => {\n        return typeof other === \"string\"\n          ? toStringFn().toLowerCase().includes(other.toLocaleLowerCase())\n          : option === other.value;\n      },\n    };\n  } else {\n    const toStringFn = () => option.node as string;\n    return {\n      value: option.key,\n      toString: toStringFn,\n      compareTo: (other: string | OptionWithValue) => {\n        return typeof other === \"string\"\n          ? toStringFn().toLowerCase().includes(other.toLowerCase())\n          : option.key === other.value;\n      },\n    };\n  }\n};\n\nconst toToolbarChip = (option: OptionWithValue): ToolbarChip => {\n  return {\n    key: option.value,\n    node: option.toString(),\n  };\n};\n\nconst DataKey = \"DataKey\";\n\nconst columns: ICell[] = [\n  {\n    title: \"Issue\",\n    transforms: [cellWidth(35), sortable],\n    cellTransforms: [],\n  },\n  {\n    title: \"Category\",\n    transforms: [cellWidth(10)],\n  },\n  {\n    title: \"Source\",\n    transforms: [cellWidth(10)],\n    cellTransforms: [wrappable],\n  },\n  {\n    title: \"Target\",\n    transforms: [cellWidth(10)],\n    cellTransforms: [wrappable],\n  },\n  {\n    title: \"Effort\",\n    transforms: [cellWidth(15)],\n    cellTransforms: [truncate],\n  },\n  {\n    title: \"Total incidents\",\n    transforms: [cellWidth(10), sortable],\n  },\n  {\n    title: \"Total effort\",\n    transforms: [cellWidth(10), sortable],\n  },\n];\n\nexport const compareByColumnIndex = (\n  a: IssueProcessed,\n  b: IssueProcessed,\n  columnIndex?: number\n) => {\n  switch (columnIndex) {\n    case 1: // name\n      return a.id.localeCompare(b.id);\n    case 6: // Total incidents\n      return a.totalIncidents - b.totalIncidents;\n    case 7: // Total storypoints\n      return a.totalEffort - b.totalEffort;\n    default:\n      return 0;\n  }\n};\n\nconst getRow = (rowData: IRowData): TableData => {\n  return rowData[DataKey];\n};\n\ninterface SelectedFile {\n  file: DispersedFile;\n  issue: IssueProcessed;\n}\n\nexport interface IViolationsTableProps {\n  applicationId?: string;\n}\n\nexport const ViolationsTable: React.FC<IViolationsTableProps> = ({ applicationId }) => {\n  const allApplications = useAllApplications();\n\n\n  const [fileEditorTabId, setFileEditorTabId] = useState<number>(0);\n  const [selectedFile, setSelectedFile] = useState<DispersedFile>({} as DispersedFile);\n\n  const codeSnipQuery = useCodeSnip(selectedFile, fileEditorTabId);\n\n  const codeSnip: string = useMemo(() => codeSnipQuery.data || \"\", [codeSnipQuery.data])\n\n  // Filters\n  const [filterText, setFilterText] = useState(\"\");\n  const { filters, setFilter, removeFilter, clearAllFilters } = useToolbar<\n    \"category\" | \"effort\" | \"sourceTechnology\" | \"targetTechnology\",\n    ToolbarChip\n  >();\n\n  const debouncedFilterText = useDebounce<string>(filterText, 250);\n  const debouncedFilters = useDebounce<\n    Map<\n      \"category\" | \"effort\" | \"sourceTechnology\" | \"targetTechnology\",\n      ToolbarChip[]\n    >\n  >(filters, 100);\n\n  const {\n    data: fileModalData,\n    isOpen: isFileModalOpen,\n    action: fileModalAction,\n    open: openFileModal,\n    close: closeFileModal,\n  } = useModal<\"showFile\", SelectedFile>();\n\n\n  const issues: TableData[] = useMemo(() => {\n    if (\n      !allApplications.data ||\n      applicationId === undefined\n    ) {\n      return [];\n    }\n\n    return (\n      applicationId === ALL_APPLICATIONS_ID ? \n        allApplications.data?.flatMap((a) => a.issues) : \n        allApplications.data?.find((f) => f.id === applicationId)?.issues || []\n    );\n  }, [allApplications.data, applicationId]);\n\n  const technologies = useMemo(() => {\n    const sources = new Set<string>();\n    const targets = new Set<string>();\n\n    issues.forEach((elem) => {\n      elem.sourceTechnologies?.forEach((e) => sources.add(e));\n      elem.targetTechnologies?.forEach((e) => targets.add(e));\n    });\n\n    return { source: Array.from(sources), target: Array.from(targets) };\n  }, [issues]);\n\n  const categories = useMemo(() => {\n    const allCategories = (issues || [])\n      .map((i) => i.category);\n    return Array.from(new Set(allCategories)).sort(\n      compareByCategoryFn((e) => e)\n    );\n  }, [issues]);\n\n  const efforts = useMemo(() => {\n    const allEfforts = (issues || [])\n      .map((e) => e.effort.toString());\n    return Array.from(new Set(allEfforts)).sort();\n  }, [issues]);\n\n  const {\n    isItemSelected: isRowExpanded,\n    toggleItemSelected: toggleRowExpanded,\n  } = useSelectionState<TableData>({\n    items: issues,\n    isEqual: areRowsEquals,\n  });\n\n  const {\n    page: currentPage,\n    sortBy: currentSortBy,\n    changePage: onPageChange,\n    changeSortBy: onChangeSortBy,\n  } = useTableControls();\n\n  const filterItem = useCallback(\n    (item: TableData) => {\n      let isFilterTextFilterCompliant = true;\n      if (debouncedFilterText && debouncedFilterText.trim().length > 0) {\n        isFilterTextFilterCompliant =\n          item.name.toLowerCase().indexOf(debouncedFilterText.toLowerCase()) !==\n          -1;\n      }\n\n      let isCategoryFilterCompliant = true;\n      const selectedCategories = debouncedFilters.get(\"category\") || [];\n      if (selectedCategories.length > 0) {\n        isCategoryFilterCompliant = selectedCategories.some(\n          (f) => item.category === f.key\n        );\n      }\n\n      let isLevelOfEffortCompliant = true;\n      const selectedLevelOfEfforts =\n        debouncedFilters.get(\"effort\") || [];\n      if (selectedLevelOfEfforts.length > 0) {\n        isLevelOfEffortCompliant = selectedLevelOfEfforts.some(\n          (f) => item.effort.toString() === f.key\n        );\n      }\n\n      let isSourceCompliant = true;\n      const selectedSources = debouncedFilters.get(\"sourceTechnology\") || [];\n      if (selectedSources.length > 0) {\n        isSourceCompliant = selectedSources.some((f) => {\n          return item.sourceTechnologies?.includes(f.key);\n        });\n      }\n\n      let isTargetCompliant = true;\n      const selectedTargets = debouncedFilters.get(\"targetTechnology\") || [];\n      if (selectedTargets.length > 0) {\n        isTargetCompliant = selectedTargets.some((f) => {\n          return item.targetTechnologies?.includes(f.key);\n        });\n      }\n\n      return (\n        isFilterTextFilterCompliant &&\n        isCategoryFilterCompliant &&\n        isLevelOfEffortCompliant &&\n        isSourceCompliant &&\n        isTargetCompliant\n      );\n    },\n    [debouncedFilterText, debouncedFilters]\n  );\n\n  const { pageItems, filteredItems } = useTable<TableData>({\n    items: issues,\n    currentPage: currentPage,\n    currentSortBy: currentSortBy,\n    compareToByColumn: compareByColumnIndex,\n    filterItem: filterItem,\n  });\n\n  const rows: IRow[] = useMemo(() => {\n    const rows: IRow[] = [];\n    pageItems.forEach((item) => {\n      const isExpanded = isRowExpanded(item);\n      rows.push({\n        [DataKey]: item,\n        isOpen: isExpanded,\n        cells: [\n          {\n            title: item.name,\n          },\n          {\n            title: item.category,\n          },\n          {\n            title: (\n              <>\n                <Split hasGutter>\n                  {item.sourceTechnologies?.map((technology) => (\n                    <SplitItem key={technology}>\n                      <Label isCompact color=\"blue\">\n                        {technology}\n                      </Label>\n                    </SplitItem>\n                  ))}\n                </Split>\n              </>\n            ),\n          },\n          {\n            title: (\n              <>\n                <Split hasGutter>\n                  {item.targetTechnologies?.map((technology) => (\n                    <SplitItem key={technology}>\n                      <Label isCompact color=\"blue\">\n                        {technology}\n                      </Label>\n                    </SplitItem>\n                  ))}\n                </Split>\n              </>\n            ),\n          },\n          {\n            title: item.effort.toString(),\n          },\n          {\n            title: item.totalIncidents,\n          },\n          {\n            title: item.totalEffort,\n          },\n        ],\n      });\n\n      // Expanded area\n      if (isExpanded) {\n        rows.push({\n          [DataKey]: item,\n          parent: rows.length - 1,\n          fullWidth: true,\n          cells: [\n            {\n              title: (\n                <div className=\"pf-u-m-sm\">\n                  <IssueOverview\n                    issue={item}\n                    onShowFile={(file, issue) => {\n                      openFileModal(\"showFile\", {\n                        file,\n                        issue,\n                      })\n                      setSelectedFile(file)\n                    }\n                    }\n                  />\n                </div>\n              ),\n            },\n          ],\n        });\n      }\n    });\n\n    return rows;\n  }, [pageItems, isRowExpanded, openFileModal]);\n\n\n  // Reset pagination when application change\n  useEffect(() => {\n    onPageChange({ page: 1, perPage: currentPage.perPage });\n  }, [\n    debouncedFilterText,\n    debouncedFilters,\n    onPageChange,\n    currentPage.perPage,\n  ]);\n\n  return (\n    <>\n      <>\n        {applicationId === undefined ? (\n          <Bullseye>\n            <EmptyState>\n              <EmptyStateIcon icon={ArrowUpIcon} />\n              <Title headingLevel=\"h4\" size=\"lg\">\n                Select an application\n              </Title>\n              <EmptyStateBody>\n                Select an application whose data you want to get access to.\n              </EmptyStateBody>\n            </EmptyState>\n          </Bullseye>\n        ) : (\n          <SimpleTableWithToolbar\n            rowWrapper={(props) => {\n              const row = getRow(props.row as IRowData);\n              const isNotExpandedRow = !props.row?.isExpanded;\n              return (\n                <tr key={`${row.name}${isNotExpandedRow ? \"\" : \"-expanded\"}`}>\n                  {props.children}\n                </tr>\n              );\n            }}\n            hasTopPagination\n            hasBottomPagination\n            totalCount={filteredItems.length}\n            // Expand\n            onCollapse={(_event, _rowIndex, _isOpen, rowData) => {\n              const issue = getRow(rowData);\n              toggleRowExpanded(issue);\n            }}\n            // Sorting\n            sortBy={\n              currentSortBy || { index: undefined, defaultDirection: \"asc\" }\n            }\n            onSort={onChangeSortBy}\n            // Pagination\n            currentPage={currentPage}\n            onPageChange={onPageChange}\n            // Table\n            rows={rows}\n            cells={columns}\n            // Fech data\n            isLoading={allApplications.isLoading}\n            loadingVariant=\"skeleton\"\n            fetchError={allApplications.isError}\n            // Toolbar filters\n            toolbarClearAllFilters={clearAllFilters}\n            filtersApplied={filterText.trim().length > 0}\n            toolbarToggle={\n              <>\n                <ToolbarItem variant=\"search-filter\">\n                  <SearchInput\n                    value={filterText}\n                    onChange={setFilterText}\n                    onClear={() => setFilterText(\"\")}\n                  />\n                </ToolbarItem>\n                <ToolbarGroup variant=\"filter-group\">\n                  <ToolbarFilter\n                    chips={filters.get(\"category\")}\n                    deleteChip={(\n                      category: string | ToolbarChipGroup,\n                      chip: ToolbarChip | string\n                    ) => removeFilter(\"category\", chip)}\n                    deleteChipGroup={() => setFilter(\"category\", [])}\n                    categoryName={{ key: \"category\", name: \"Category\" }}\n                  >\n                    <SimpleSelect\n                      maxHeight={300}\n                      variant={SelectVariant.checkbox}\n                      aria-label=\"category\"\n                      aria-labelledby=\"category\"\n                      placeholderText=\"Category\"\n                      value={filters.get(\"category\")?.map(toOption)}\n                      options={categories.map(toOption)}\n                      onChange={(option) => {\n                        const optionValue = option as OptionWithValue<string>;\n\n                        const elementExists = (\n                          filters.get(\"category\") || []\n                        ).some((f) => f.key === optionValue.value);\n                        let newElements: ToolbarChip[];\n                        if (elementExists) {\n                          newElements = (filters.get(\"category\") || []).filter(\n                            (f) => f.key !== optionValue.value\n                          );\n                        } else {\n                          newElements = [\n                            ...(filters.get(\"category\") || []),\n                            toToolbarChip(optionValue),\n                          ];\n                        }\n\n                        setFilter(\"category\", newElements);\n                      }}\n                      hasInlineFilter\n                      onClear={() => setFilter(\"category\", [])}\n                    />\n                  </ToolbarFilter>\n                </ToolbarGroup>\n                <ToolbarGroup variant=\"filter-group\">\n                  <ToolbarFilter\n                    chips={filters.get(\"effort\")}\n                    deleteChip={(\n                      category: string | ToolbarChipGroup,\n                      chip: ToolbarChip | string\n                    ) => removeFilter(\"effort\", chip)}\n                    deleteChipGroup={() => setFilter(\"effort\", [])}\n                    categoryName={{\n                      key: \"effort\",\n                      name: \"Effort\",\n                    }}\n                  >\n                    <SimpleSelect\n                      maxHeight={300}\n                      variant={SelectVariant.checkbox}\n                      aria-label=\"effort\"\n                      aria-labelledby=\"effort\"\n                      placeholderText=\"Effort\"\n                      value={filters.get(\"effort\")?.map(toOption)}\n                      options={efforts.map(toOption)}\n                      onChange={(option) => {\n                        const optionValue = option as OptionWithValue<string>;\n\n                        const elementExists = (\n                          filters.get(\"effort\") || []\n                        ).some((f) => f.key === optionValue.value);\n                        let newElements: ToolbarChip[];\n                        if (elementExists) {\n                          newElements = (\n                            filters.get(\"effort\") || []\n                          ).filter((f) => f.key !== optionValue.value);\n                        } else {\n                          newElements = [\n                            ...(filters.get(\"effort\") || []),\n                            toToolbarChip(optionValue),\n                          ];\n                        }\n\n                        setFilter(\"effort\", newElements);\n                      }}\n                      hasInlineFilter\n                      onClear={() => setFilter(\"effort\", [])}\n                    />\n                  </ToolbarFilter>\n                </ToolbarGroup>\n                <ToolbarGroup variant=\"filter-group\">\n                  {technologies.source.length > 0 && (\n                    <ToolbarFilter\n                      chips={filters.get(\"sourceTechnology\")}\n                      deleteChip={(\n                        category: string | ToolbarChipGroup,\n                        chip: ToolbarChip | string\n                      ) => removeFilter(\"sourceTechnology\", chip)}\n                      deleteChipGroup={() => setFilter(\"sourceTechnology\", [])}\n                      categoryName={{\n                        key: \"sourceTechnology\",\n                        name: \"Source\",\n                      }}\n                    >\n                      <SimpleSelect\n                        maxHeight={300}\n                        variant={SelectVariant.checkbox}\n                        aria-label=\"sourceTechnology\"\n                        aria-labelledby=\"sourceTechnology\"\n                        placeholderText=\"Source\"\n                        value={filters.get(\"sourceTechnology\")?.map(toOption)}\n                        options={technologies.source.map(toOption)}\n                        onChange={(option) => {\n                          const optionValue = option as OptionWithValue<string>;\n\n                          const elementExists = (\n                            filters.get(\"sourceTechnology\") || []\n                          ).some((f) => f.key === optionValue.value);\n                          let newElements: ToolbarChip[];\n                          if (elementExists) {\n                            newElements = (\n                              filters.get(\"sourceTechnology\") || []\n                            ).filter((f) => f.key !== optionValue.value);\n                          } else {\n                            newElements = [\n                              ...(filters.get(\"sourceTechnology\") || []),\n                              toToolbarChip(optionValue),\n                            ];\n                          }\n\n                          setFilter(\"sourceTechnology\", newElements);\n                        }}\n                        hasInlineFilter\n                        onClear={() => setFilter(\"sourceTechnology\", [])}\n                      />\n                    </ToolbarFilter>\n                  )}\n                  {technologies.target.length > 0 && (\n                    <ToolbarFilter\n                      chips={filters.get(\"targetTechnology\")}\n                      deleteChip={(\n                        category: string | ToolbarChipGroup,\n                        chip: ToolbarChip | string\n                      ) => removeFilter(\"targetTechnology\", chip)}\n                      deleteChipGroup={() => setFilter(\"targetTechnology\", [])}\n                      categoryName={{\n                        key: \"targetTechnology\",\n                        name: \"Target\",\n                      }}\n                    >\n                      <SimpleSelect\n                        maxHeight={300}\n                        variant={SelectVariant.checkbox}\n                        aria-label=\"targetTechnology\"\n                        aria-labelledby=\"targetTechnology\"\n                        placeholderText=\"Target\"\n                        value={filters.get(\"targetTechnology\")?.map(toOption)}\n                        options={technologies.target.map(toOption)}\n                        onChange={(option) => {\n                          const optionValue = option as OptionWithValue<string>;\n\n                          const elementExists = (\n                            filters.get(\"targetTechnology\") || []\n                          ).some((f) => f.key === optionValue.value);\n                          let newElements: ToolbarChip[];\n                          if (elementExists) {\n                            newElements = (\n                              filters.get(\"targetTechnology\") || []\n                            ).filter((f) => f.key !== optionValue.value);\n                          } else {\n                            newElements = [\n                              ...(filters.get(\"targetTechnology\") || []),\n                              toToolbarChip(optionValue),\n                            ];\n                          }\n\n                          setFilter(\"targetTechnology\", newElements);\n                        }}\n                        hasInlineFilter\n                        onClear={() => setFilter(\"targetTechnology\", [])}\n                      />\n                    </ToolbarFilter>\n                  )}\n                </ToolbarGroup>\n              </>\n            }\n          />\n        )}\n      </>\n\n      <Modal\n        title={`File ${fileModalData?.file?.name || \"\"}`}\n        isOpen={isFileModalOpen && fileModalAction === \"showFile\"}\n        onClose={closeFileModal}\n        variant=\"default\"\n        position=\"top\"\n        disableFocusTrap\n        actions={[\n          <Button key=\"close\" variant=\"primary\" onClick={closeFileModal}>\n            Close\n          </Button>,\n        ]}\n      >\n        { Object.keys(fileModalData?.file?.incidents || {}).length > 1 ? (\n          <Tabs\n            activeKey={fileEditorTabId}\n            onSelect={(_event, tabKey) =>\n              setFileEditorTabId(tabKey as number)}>\n          {\n            Object.values(fileModalData?.file?.incidents || {}).flatMap((incidents, idx) => (\n              <Tab\n                key={idx}\n                eventKey={idx}\n                title={`Line #${fileModalData?.file.ranges[idx*2]} - #${fileModalData?.file.ranges[idx*2+1]}`} // TODO i18n\n              >\n                {fileEditorTabId === idx ? (\n                      <FileEditor\n                        name={fileModalData?.file.name || \"\"}\n                        displayName={fileModalData?.file.displayName || \"\"}\n                        codeSnip={codeSnip}\n                        isLoading={codeSnipQuery.isLoading || codeSnipQuery.isFetching}\n                        issue={fileModalData?.issue || {} as IssueProcessed}\n                        incidents={incidents}\n                      />\n                ): null} \n              </Tab>))\n          }\n          </Tabs>\n        ) : (\n          <FileEditor\n            name={fileModalData?.file.name || \"\"}\n            displayName={fileModalData?.file.displayName || \"\"}\n            codeSnip={codeSnip}\n            isLoading={codeSnipQuery.isLoading || codeSnipQuery.isFetching}\n            issue={fileModalData?.issue || {} as IssueProcessed}\n            incidents={fileModalData?.file?.incidents[0] || []}/>\n        )}\n      </Modal>\n    </>\n  );\n};\n","import { useCallback, useReducer } from 'react';\n\nimport { ActionType, createAction, getType } from 'typesafe-actions';\n\ninterface IOpenAction {\n  action: any;\n  data: any;\n}\n\nconst openModal = createAction('useModal/action/openModalWithData')<IOpenAction>();\nconst closeModal = createAction('useModal/action/startClose')();\n\n// State\ntype State = Readonly<{\n  action: any;\n  data: any;\n  isOpen: boolean;\n}>;\n\nconst defaultState: State = {\n  action: undefined,\n  data: undefined,\n  isOpen: false,\n};\n\n// Reducer\n\ntype Action = ActionType<typeof openModal | typeof closeModal>;\n\nconst reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case getType(openModal):\n      return {\n        ...state,\n        action: action.payload.action,\n        data: action.payload.data,\n        isOpen: true,\n      };\n    case getType(closeModal):\n      return {\n        ...state,\n        action: undefined,\n        data: undefined,\n        isOpen: false,\n      };\n    default:\n      return state;\n  }\n};\n\n// Hook\n\ninterface HookState<A, T> {\n  action?: A;\n  data?: T;\n  isOpen: boolean;\n  open: (action: A, data?: T) => void;\n  close: () => void;\n  isAction: (action: A) => boolean;\n}\n\nexport const useModal = <A, T = any>(): HookState<A, T> => {\n  const [state, dispatch] = useReducer(reducer, {\n    ...defaultState,\n  });\n\n  const openHandler = useCallback((action: A, entity?: T) => {\n    dispatch(openModal({ action: action, data: entity }));\n  }, []);\n\n  const closeHandler = useCallback(() => {\n    dispatch(closeModal());\n  }, []);\n\n  return {\n    action: state.action,\n    data: state.data,\n    isOpen: state.isOpen,\n    open: openHandler,\n    close: closeHandler,\n    isAction: (action: A) => state.action === action,\n  };\n};\n\nexport default useModal;\n","import { useMemo } from 'react';\n\nimport { SortByDirection } from '@patternfly/react-table';\n\nimport { Page, SortBy } from '../../common/types';\n\n// Hook\n\ninterface HookArgs<T> {\n  items?: T[];\n\n  currentSortBy?: SortBy;\n  compareToByColumn: (a: T, b: T, columnIndex?: number) => number;\n\n  currentPage: Page;\n  filterItem: (value: T) => boolean;\n}\n\ninterface HookState<T> {\n  pageItems: T[];\n  filteredItems: T[];\n}\n\nexport const useTable = <T>({\n  items,\n  currentSortBy,\n  currentPage,\n  filterItem,\n  compareToByColumn,\n}: HookArgs<T>): HookState<T> => {\n  const state: HookState<T> = useMemo(() => {\n    const allItems = [...(items || [])];\n\n    // Filter\n    const filteredItems = allItems.filter(filterItem);\n\n    //  Sort\n    let orderChanged = false;\n\n    let sortedItems: T[];\n    sortedItems = [...filteredItems].sort((a, b) => {\n      const comparisonResult = compareToByColumn(a, b, currentSortBy?.index);\n      if (comparisonResult !== 0) {\n        orderChanged = true;\n      }\n      return comparisonResult;\n    });\n\n    if (orderChanged && currentSortBy?.direction === SortByDirection.desc) {\n      sortedItems = sortedItems.reverse();\n    }\n\n    // Paginate\n    const pageItems = sortedItems.slice(\n      (currentPage.page - 1) * currentPage.perPage,\n      currentPage.page * currentPage.perPage\n    );\n\n    return {\n      pageItems,\n      filteredItems,\n    };\n  }, [items, currentPage, currentSortBy, compareToByColumn, filterItem]);\n\n  return state;\n};\n","import { useCallback, useReducer } from 'react';\n\nimport { IExtraColumnData, SortByDirection } from '@patternfly/react-table';\nimport { ActionType, createAction, getType } from 'typesafe-actions';\n\nimport { Page, SortBy } from '../../common/types';\n\n// Actions\n\nconst setPage = createAction('useTableControls/pagination/change')<Page>();\nconst setSortBy = createAction('useTableControls/sortBy/change')<SortBy>();\n\n// State\ntype State = Readonly<{\n  changed: boolean;\n\n  currentPage: Page;\n  sortBy?: SortBy;\n}>;\n\nconst defaultState: State = {\n  changed: false,\n\n  currentPage: {\n    page: 1,\n    perPage: 10,\n  },\n  sortBy: undefined,\n};\n\n// Reducer\n\ntype Action = ActionType<typeof setSortBy | typeof setPage>;\n\nconst reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case getType(setPage):\n      return {\n        ...state,\n        changed: true,\n        currentPage: {\n          page: action.payload.page,\n          perPage: action.payload.perPage,\n        },\n      };\n    case getType(setSortBy):\n      return {\n        ...state,\n        changed: true,\n        sortBy: {\n          index: action.payload.index,\n          direction: action.payload.direction,\n        },\n      };\n    default:\n      return state;\n  }\n};\n\n// Hook\n\ninterface HookArgs {\n  page?: Page;\n  sortBy?: SortBy;\n}\n\ninterface HookState {\n  page: Page;\n  sortBy?: SortBy;\n  changePage: (page: { page: number; perPage?: number }) => void;\n  changeSortBy: (\n    event: React.MouseEvent,\n    index: number,\n    direction: SortByDirection,\n    extraData: IExtraColumnData\n  ) => void;\n}\n\nexport const useTableControls = (args?: HookArgs): HookState => {\n  const [state, dispatch] = useReducer(reducer, {\n    ...defaultState,\n    currentPage: args && args.page ? { ...args.page } : { ...defaultState.currentPage },\n    sortBy: args && args.sortBy ? { ...args.sortBy } : defaultState.sortBy,\n  });\n\n  const handlePageChange = useCallback((newPage: { page: number; perPage?: number }) => {\n    dispatch(\n      setPage({\n        page: newPage.page >= 1 ? newPage.page : 1,\n        perPage: newPage.perPage ?? defaultState.currentPage.perPage,\n      })\n    );\n  }, []);\n\n  const handleSortByChange = useCallback(\n    (\n      event: React.MouseEvent,\n      index: number,\n      direction: SortByDirection,\n      extraData: IExtraColumnData\n    ) => {\n      dispatch(\n        setSortBy({\n          index: index,\n          direction: direction,\n        })\n      );\n    },\n    []\n  );\n\n  return {\n    page: state.currentPage,\n    sortBy: state.sortBy,\n    changePage: handlePageChange,\n    changeSortBy: handleSortByChange,\n  };\n};\n","import { useState } from 'react';\n\nimport { ToolbarChip } from '@patternfly/react-core';\n\nconst getToolbarChipKey = (value: string | ToolbarChip) => {\n  return typeof value === 'string' ? value : value.key;\n};\n\n// Hook\n\ntype FilterType = string | ToolbarChip;\n\ninterface HookState<K, T> {\n  filters: Map<K, T[]>;\n  isPresent: boolean;\n  addFilter: (key: K, value: T) => void;\n  setFilter: (key: K, value: T[]) => void;\n  removeFilter: (key: K, value: FilterType | FilterType[]) => void;\n  clearAllFilters: () => void;\n}\n\nexport const useToolbar = <K, T extends FilterType>(\n  initialValue: Map<K, T[]> | (() => Map<K, T[]>) = new Map()\n): HookState<K, T> => {\n  const [filters, setFilters] = useState<Map<K, T[]>>(initialValue);\n\n  const isPresent =\n    Array.from(filters.values()).reduce((previous, current) => [...previous, ...current], [])\n      .length > 0;\n\n  const addFilter = (key: K, value: T) => {\n    setFilters((current) => {\n      const currentChips = current.get(key) || [];\n      return new Map(current).set(key, [...currentChips, value]);\n    });\n  };\n\n  const setFilter = (key: K, value: T[]) => {\n    setFilters((current) => new Map(current).set(key, value));\n  };\n\n  const removeFilter = (key: K, value: FilterType | FilterType[]) => {\n    setFilters((current) => {\n      let elementsToBeRemoved: FilterType[];\n      if (Array.isArray(value)) {\n        elementsToBeRemoved = [...value];\n      } else {\n        elementsToBeRemoved = [value];\n      }\n\n      const newValue = (current.get(key) || []).filter((f) => {\n        const fkey = getToolbarChipKey(f);\n        return !elementsToBeRemoved.some((r) => {\n          const rKey = getToolbarChipKey(r);\n          return fkey === rKey;\n        });\n      });\n\n      return new Map(current).set(key, newValue);\n    });\n  };\n\n  const clearAllFilters = () => {\n    setFilters((current) => {\n      const newVal = new Map(current);\n      Array.from(newVal.keys()).forEach((key) => {\n        newVal.set(key, []);\n      });\n      return newVal;\n    });\n  };\n\n  return {\n    filters,\n    isPresent,\n    addFilter,\n    setFilter,\n    removeFilter,\n    clearAllFilters,\n  };\n};\n","import { useState } from \"react\";\n\ninterface Cell {\n  isSelected: boolean;\n}\n\nconst defaultCellState: Cell = { isSelected: false };\n\nexport interface IArgs<R, C> {\n  rows: R[];\n  columns: C[];\n}\n\nexport interface IState<R, C> {\n  isCellSelected: (row: R, column: C) => boolean;\n  isSomeCellSelected: (row: R, columns: C[]) => boolean;\n  toggleCellSelected: (row: R, column: C, isSelecting?: boolean) => void;\n}\n\nexport const useCellSelectionState = <R, C>({\n  rows,\n  columns,\n}: IArgs<R, C>): IState<R, C> => {\n  const [spreadsheet, setSpreadsheet] = useState<Map<R, Map<C, Cell>>>(\n    new Map()\n  );\n\n  const isCellSelected = (row: R, column: C) => {\n    const cell = spreadsheet.get(row)?.get(column);\n    return cell ? cell.isSelected : false;\n  };\n\n  const isSomeCellSelected = (row: R, columns: C[]) => {\n    return columns.some((elem) => spreadsheet.get(row)?.get(elem));\n  };\n\n  const toggleCellSelected = (\n    row: R,\n    column: C,\n    isSelecting: boolean = !isCellSelected(row, column)\n  ) => {\n    const columns: Map<C, Cell> = spreadsheet.get(row) || new Map();\n    const cell: Cell = columns.get(column) || { ...defaultCellState };\n\n    const newColumns = new Map().set(column, {\n      ...cell,\n      isSelected: isSelecting,\n    });\n    const newSpreadsheet = new Map(spreadsheet).set(row, newColumns);\n\n    setSpreadsheet(newSpreadsheet);\n  };\n\n  return {\n    isCellSelected,\n    isSomeCellSelected,\n    toggleCellSelected,\n  };\n};\n\nexport default useCellSelectionState;\n","import { LinkDto } from \"@app/api/report\";\n\nexport const getMarkdown = (body: string, links: LinkDto[]): string => {\n  const formattedLinks = (links || [])\n    .map((link, index) => `${index + 1}. [${link.title}](${link.url})`)\n    .join(\"\\n\");\n  return [body, formattedLinks].join(\"\\n\");\n};\n\n\nexport const capitalizeFirstLetter = (val: string) => {\n  if (!val) {\n    return val;\n  }\n\n  return val.charAt(0).toUpperCase() + val.slice(1);\n};"],"names":["ConditionalRender","_ref","when","then","children","_jsx","_Fragment","SimpleSelect","onChange","options","value","_ref$placeholderText","placeholderText","props","_objectWithoutProperties","_excluded","_useState","useState","_useState2","_slicedToArray","isOpen","setIsOpen","Select","_objectSpread","onToggle","onSelect","_","selection","variant","selections","map","option","index","SelectOption","concat","toString","areDependenciesEquals","a","b","name","version","resolvedIdentifier","DataKey","columns","title","transforms","cellWidth","sortable","cellTransforms","truncate","compareToByColumn","columnIndex","localeCompare","indirect","toOption","toStringFn","compareTo","other","toLowerCase","includes","toLocaleLowerCase","node","key","toToolbarChip","DependenciesTable","_filters$get","_filters$get2","applicationId","allApplicationsQuery","useAllApplications","filterText","setFilterText","_useToolbar","useToolbar","filters","setFilter","removeFilter","clearAllFilters","debouncedFilterText","useDebounce","debouncedFilters","dependencies","useMemo","_allApplicationsQuery","_allApplicationsQuery2","_allApplicationsQuery3","data","undefined","ALL_APPLICATIONS_ID","flatMap","find","f","id","allLabels","Array","from","Set","d","labels","toggleRowExpanded","useSelectionState","items","isEqual","toggleItemSelected","_useTableControls","useTableControls","currentPage","page","currentSortBy","sortBy","onPageChange","changePage","onChangeSortBy","changeSortBy","filterItem","useCallback","item","isFilterTextFilterCompliant","trim","length","indexOf","isLabelFilterCompliant","selectedLabels","get","some","_item$labels","selectedRelation","_useTable","useTable","pageItems","filteredItems","rows","forEach","_item$labels2","_rows$push","push","_defineProperty","Split","hasGutter","label","SplitItem","Label","isCompact","color","replace","itemsToRow","useEffect","perPage","Bullseye","_jsxs","EmptyState","EmptyStateIcon","icon","ArrowUpIcon","Title","headingLevel","size","EmptyStateBody","SimpleTableWithToolbar","hasTopPagination","hasBottomPagination","totalCount","onCollapse","_event","_rowIndex","_isOpen","rowData","issue","getRow","defaultDirection","onSort","cells","actions","isLoading","isFetching","loadingVariant","fetchError","isError","filtersApplied","toolbarClearAllFilters","toolbarToggle","ToolbarItem","SearchInput","onClear","ToolbarGroup","ToolbarFilter","chips","deleteChip","category","chip","deleteChipGroup","categoryName","maxHeight","SelectVariant","checkbox","newElements","optionValue","filter","_toConsumableArray","hasInlineFilter","SimpleMarkdown","rest","Object","assign","_objectDestructuringEmpty","ReactMarkdown","className","remarkPlugins","remarkGfm","linkTarget","codeLineRegex","FileEditor","_name$split","absoluteToRelativeLineNum","relativeToAbsoluteLineNum","displayName","codeSnip","incidents","codeSnipNumberedLines","split","codeSnipTrimmedLines","codeSnipStartLine","numberedLine","match","isNaN","Number","lineNum","lineCode","join","editorRef","useRef","monacoRef","_monacoRef$current","_editorRef$current","current","editor","getModels","model","dispose","disposables","setDisposables","disposable","fileExtension","pop","onEditorDidMount","monaco","layout","focus","updateOptions","tabSize","newDisposables","_incidents$filter","markers","inc","lineNumber","startLineNumber","endLineNumber","startColumn","endColumn","message","description","severity","MarkerSeverity","Warning","setModelMarkers","addMarkers","hovers","links","languages","registerHoverProvider","provideHover","position","range","Range","contents","getMarkdown","addHover","Drawer","isExpanded","isInline","DrawerContent","panelContent","DrawerPanelContent","isResizable","DrawerHead","Card","isLarge","CardHeader","CardTitle","TextContent","Text","component","ruleID","CardBody","DrawerContentBody","CodeEditor","isDarkTheme","isLineNumbersVisible","isReadOnly","isMinimapVisible","isLanguageLabelVisible","isDownloadEnabled","code","language","values","Language","l","glyphMargin","renderValidationDecorations","lineNumbers","String","height","window","innerHeight","SimplePagination","count","params","isTop","perPageOptions","getPerPage","Pagination","itemCount","onPageInput","onSetPage","onPerPageSelect","widgetId","PaginationVariant","top","bottom","toggleTemplate","ToggleTemplate","SimpleStateError","EmptyStateVariant","small","ExclamationCircleIcon","globalDangerColor200","SimpleStateNoData","CubesIcon","SimpleStateNoResults","SearchIcon","SimpleTable","_ref$ariaLabel","ariaLabel","_ref$loadingVariant","noDataState","noSearchResultsState","errorState","Skeleton","Error","heightAuto","colSpan","Spinner","Table","TableHeader","TableBody","_ref$hasTopPagination","_ref$hasBottomPaginat","toolbarBulkSelector","toolbarActions","style","backgroundColor","Toolbar","collapseListedFiltersBreakpoint","ToolbarContent","ToolbarToggleGroup","toggleIcon","FilterIcon","breakpoint","ToolbarItemVariant","pagination","alignment","default","compareByColumnIndex","totalIncidents","IssueOverview","onShowFile","dispersedFilesQuery","useDispersedFiles","_dispersedFilesQuery$","FileLink","file","defaultText","onClick","Stack","StackItem","Grid","GridItem","md","isFullHeight","_ref2","Button","Truncate","content","areRowsEquals","wrappable","totalEffort","ViolationsTable","_filters$get3","_filters$get4","_fileModalData$file","_fileModalData$file2","_fileModalData$file3","_fileModalData$file4","allApplications","fileEditorTabId","setFileEditorTabId","_useState3","_useState4","selectedFile","setSelectedFile","codeSnipQuery","useCodeSnip","_useState5","_useState6","_useModal","useModal","fileModalData","isFileModalOpen","fileModalAction","action","openFileModal","open","closeFileModal","close","issues","_allApplications$data","_allApplications$data2","_allApplications$data3","technologies","sources","targets","elem","_elem$sourceTechnolog","_elem$targetTechnolog","sourceTechnologies","e","add","targetTechnologies","source","target","categories","allCategories","i","sort","compareByCategoryFn","efforts","allEfforts","effort","_useSelectionState","isRowExpanded","isItemSelected","isCategoryFilterCompliant","selectedCategories","isLevelOfEffortCompliant","selectedLevelOfEfforts","isSourceCompliant","selectedSources","_item$sourceTechnolog","isTargetCompliant","selectedTargets","_item$targetTechnolog","_item$sourceTechnolog2","_item$targetTechnolog2","_rows$push2","technology","rowWrapper","_props$row","row","isNotExpandedRow","Modal","onClose","disableFocusTrap","keys","Tabs","activeKey","tabKey","idx","Tab","eventKey","ranges","openModal","createAction","closeModal","defaultState","reducer","state","type","getType","payload","_useReducer","useReducer","_useReducer2","dispatch","openHandler","entity","closeHandler","isAction","sortedItems","orderChanged","comparisonResult","direction","SortByDirection","desc","reverse","slice","setPage","setSortBy","changed","args","handlePageChange","newPage","_newPage$perPage","handleSortByChange","event","extraData","getToolbarChipKey","initialValue","arguments","Map","setFilters","isPresent","reduce","previous","addFilter","currentChips","set","elementsToBeRemoved","isArray","newValue","fkey","r","rKey","newVal","defaultCellState","isSelected","useCellSelectionState","spreadsheet","setSpreadsheet","isCellSelected","column","_spreadsheet$get","cell","isSomeCellSelected","_spreadsheet$get2","toggleCellSelected","isSelecting","newColumns","newSpreadsheet","body","link","url","capitalizeFirstLetter","val","charAt","toUpperCase"],"sourceRoot":""}