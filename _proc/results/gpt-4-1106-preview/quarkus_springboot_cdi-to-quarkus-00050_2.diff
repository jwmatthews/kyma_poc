
  1  package com.redhat.coolstore.service;
  2  
  3  import java.util.List;
  4  import java.util.logging.Logger;
  5  
- 6  import javax.inject.Inject;
+ 6  import jakarta.inject.Inject;
  7  
- 8  import javax.persistence.criteria.CriteriaBuilder;
- 9  import javax.persistence.criteria.CriteriaQuery;
-10  import javax.persistence.criteria.Root;
+ 8  import jakarta.persistence.criteria.CriteriaBuilder;
+ 9  import jakarta.persistence.criteria.CriteriaQuery;
+10  import jakarta.persistence.criteria.Root;
 11  
-12  import javax.ejb.Stateless;
-13  import javax.persistence.EntityManager;
-14  import javax.persistence.PersistenceContext;
+12  import jakarta.enterprise.context.ApplicationScoped;
+13  import jakarta.persistence.EntityManager;
+14  import jakarta.persistence.PersistenceContext;
 15  
 16  import com.redhat.coolstore.model.*;
 17  
-18  @Stateless
+18  @ApplicationScoped
 19  public class CatalogService {
 20  
 21      @Inject
 22      Logger log;
 23  
 24      @PersistenceContext
 25      private EntityManager em;
 26  
 27      public CatalogService() {
 28      }
 29  
 30      public List<CatalogItemEntity> getCatalogItems() {
 31          CriteriaBuilder cb = em.getCriteriaBuilder();
 32          CriteriaQuery<CatalogItemEntity> criteria = cb.createQuery(CatalogItemEntity.class);
 33          Root<CatalogItemEntity> member = criteria.from(CatalogItemEntity.class);
 34          criteria.select(member);
 35          return em.createQuery(criteria).getResultList();
 36      }
 37  
 38      public CatalogItemEntity getCatalogItemById(String itemId) {
 39          return em.find(CatalogItemEntity.class, itemId);
 40      }
 41  
 42      public void updateInventoryItems(String itemId, int deducts) {
 43          InventoryEntity inventoryEntity = getCatalogItemById(itemId).getInventory();
 44          int currentQuantity = inventoryEntity.getQuantity();
 45          inventoryEntity.setQuantity(currentQuantity-deducts);
 46          em.merge(inventoryEntity);
 47      }
 48  
 49  }
