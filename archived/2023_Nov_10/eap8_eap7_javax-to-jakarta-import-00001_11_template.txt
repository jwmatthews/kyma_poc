You are an excellent enterprise architect who has an extensive
background in helping companies rewrite their legacy Java EE applications to 
Quarkus.  Your task is to examine code snippets from a legacy Java EE application and 
generate correct and proper code changes to update the application to use Quarkus.

You will be given information from a static code analysis tool which has assessed the 
Java EE application's suitability for adopting Quarkus and will highlight key issues it has found.

You will examine this analysis information and may also have an example problem that was solved 
for a similar problem.  If the example problem is present it will contain the original source code 
and then the updated source code. Pay attention to how the example was solved if it is present.  

## Here is a description of the problem: javax.{renamed} has been replaced by jakarta.{renamed}


## 'Example Original Source Code':
### File name: src/main/java/com/redhat/coolstore/model/InventoryEntity.java
############
package com.redhat.coolstore.model;

import java.io.Serializable;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;
import javax.persistence.UniqueConstraint;
import javax.xml.bind.annotation.XmlRootElement;

@Entity
@XmlRootElement
@Table(name = "INVENTORY", uniqueConstraints = @UniqueConstraint(columnNames = "itemId"))
public class InventoryEntity implements Serializable {

	private static final long serialVersionUID = 7526472295622776147L; 

    @Id
    private String itemId;


    @Column
    private String location;


    @Column
    private int quantity;


    @Column
    private String link;

    public InventoryEntity() {

    }

    public String getItemId() {
		return itemId;
	}

	public void setItemId(String itemId) {
		this.itemId = itemId;
	}

	public String getLocation() {
		return location;
	}

	public void setLocation(String location) {
		this.location = location;
	}

	public int getQuantity() {
		return quantity;
	}

	public void setQuantity(int quantity) {
		this.quantity = quantity;
	}

	public String getLink() {
		return link;
	}

	public void setLink(String link) {
		this.link = link;
	}

	@Override
    public String toString() {
        return "InventoryEntity [itemId=" + itemId + ", availability=" + quantity + "/" + location + " link=" + link + "]";
    }
}

############

## 'Example Updated Source Code'
### File name: src/main/java/com/redhat/coolstore/model/InventoryEntity.java
############
package com.redhat.coolstore.model;

import java.io.Serializable;

import jakarta.persistence.Column;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import jakarta.persistence.UniqueConstraint;
import jakarta.xml.bind.annotation.XmlRootElement;

@Entity
@XmlRootElement
@Table(name = "INVENTORY", uniqueConstraints = @UniqueConstraint(columnNames = "itemId"))
public class InventoryEntity implements Serializable {

	private static final long serialVersionUID = 7526472295622776147L; 

    @Id
    private String itemId;


    @Column
    private String location;


    @Column
    private int quantity;


    @Column
    private String link;

    public InventoryEntity() {

    }

    public String getItemId() {
		return itemId;
	}

	public void setItemId(String itemId) {
		this.itemId = itemId;
	}

	public String getLocation() {
		return location;
	}

	public void setLocation(String location) {
		this.location = location;
	}

	public int getQuantity() {
		return quantity;
	}

	public void setQuantity(int quantity) {
		this.quantity = quantity;
	}

	public String getLink() {
		return link;
	}

	public void setLink(String link) {
		this.link = link;
	}

	@Override
    public String toString() {
        return "InventoryEntity [itemId=" + itemId + ", availability=" + quantity + "/" + location + " link=" + link + "]";
    }
}

############

## 'Message' related to the issue we need to solve
Replace the `javax.persistence` import statement with `jakarta.persistence`

## 'Current Source Code' we need to update to Quarkus:
### File name: src/main/java/com/redhat/coolstore/model/InventoryEntity.java
############
  1  package com.redhat.coolstore.model;
  2  
  3  import java.io.Serializable;
  4  
  5  import javax.persistence.Column;
  6  import javax.persistence.Entity;
  7  import javax.persistence.Id;
  8  import javax.persistence.Table;
  9  import javax.persistence.UniqueConstraint;
 10  import javax.xml.bind.annotation.XmlRootElement;
 11  
 12  @Entity
 13  @XmlRootElement
 14  @Table(name = "INVENTORY", uniqueConstraints = @UniqueConstraint(columnNames = "itemId"))
 15  public class InventoryEntity implements Serializable {
 16  
 17  	private static final long serialVersionUID = 7526472295622776147L; 
 18  
 19      @Id
 20      private String itemId;
 21  
 22  
 23      @Column
 24      private String location;
 25  
 26  
 27      @Column
 28      private int quantity;
 29  
 30  
 31      @Column
 32      private String link;
 33  
 34      public InventoryEntity() {
 35  
 36      }
 37  
 38      public String getItemId() {
 39  		return itemId;
 40  	}
 41  
 42  	public void setItemId(String itemId) {
 43  		this.itemId = itemId;
 44  	}
 45  
 46  	public String getLocation() {
 47  		return location;
 48  	}
 49  
 50  	public void setLocation(String location) {
 51  		this.location = location;
 52  	}
 53  
 54  	public int getQuantity() {
 55  		return quantity;
 56  	}
 57  
 58  	public void setQuantity(int quantity) {
 59  		this.quantity = quantity;
 60  	}
 61  
 62  	public String getLink() {
 63  		return link;
 64  	}
 65  
 66  	public void setLink(String link) {
 67  		this.link = link;
 68  	}
 69  
 70  	@Override
 71      public String toString() {
 72          return "InventoryEntity [itemId=" + itemId + ", availability=" + quantity + "/" + location + " link=" + link + "]";
 73      }
 74  }

############


Your job is to look at the 'Current Source Code' and updated it to work correctly with Quarkus,
following the best information you know of Quarkus, the static code analysis information we share 
here, and the studying how the prior example was solved if present.  Read the 'Example Original Source Code'
and see how it was updated to 'Example Updated Source Code', and determine if a similar pattern can 
be applied to the 'Current Sourec Code'.

Think through the changes you will make and explain each step of the process and why you think it is needed.
If you are unsure of what changes is needed please state you are unsure and ask 
for clarification to help you.

When you are done explaining the reasoning for each change, write the updated 
Quarkus source code for the 'Current Sourec Code' in the form of a 'diff'
in Markdown format, e.g.:

```java
....
```